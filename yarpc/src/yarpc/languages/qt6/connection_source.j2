/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ output.definitionPath }}
 *   Template: qt6/object_path_source.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#include "Connection.hpp"
{% for service in output.services %}
#include "{{ service.className }}.hpp"
{% endfor %}

using namespace {{ qt6.namespace(output) }};

{% for objectPath in output.services|map(attribute='objectPath')|unique|list %}

{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}::{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}(QObject *parent) : QObject(parent) {
}

bool {{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}::hasRegistrations() const {
    return (
        false
        {% for service in output.services|selectattr('objectPath', 'equalto', objectPath) %}
        || m_{{ service.definition|camel_case }} != nullptr
        {% endfor %}
    );
}

{% endfor %}

Connection::Connection() : QObject(nullptr) {}

Connection& Connection::instance() {
    static Connection object{};
    return object;
}

void Connection::connect() {
    bool hasChanged = false;
    if (m_connection == nullptr) {
        m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "{{ output.busName }}"));
        if ( m_connection->isConnected()) {
            m_connection->registerService("{{ output.busName }}");
            hasChanged = true;
        }
    }

    if (hasChanged) {
        emit connectedChanged();
    }
}

void Connection::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("{{ output.busName }}");
    m_connection = nullptr;
    emit connectedChanged();
}

void Connection::disconnectIfUnused(){
    if (
        false
        {% for service in output.services %}
        || m_{{ service.definition }} != nullptr
        {% endfor %}
    ) {
        return;
    }
    disconnect();
}

void Connection::updateRegistrations() {
    if (m_connection != nullptr && m_connection->isConnected()) {
        {% for objectPath in output.services|map(attribute='objectPath')|unique|list %}
        m_connection->unregisterObject("{{ objectPath }}");
        m_{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}.reset(new {{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}(this));
        {% for service in output.services %}
        if (m_{{ service.definition }} != nullptr) {
            auto {{ service.className|camel_case }} = dynamic_cast<{{ service.className }}*>(m_{{ service.definition }});
            m_{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}->m_{{ service.definition|camel_case }} = new {{ service.className}}Adaptor(
                {{ service.className|camel_case }},
                m_{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}.get()
            );
        }
        {% endfor %}
        if (
            false
            {% for service in output.services %}
            || m_{{ service.definition }} != nullptr
            {% endfor %}
        ) {
            m_connection->registerObject(
                "{{ objectPath }}",
                m_{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}.get()
            );
        }
        {% endfor %}
        emit registrationChanged();
    }
}

bool Connection::getConnected() const {
    return m_connection != nullptr;
}

void Connection::send(const QDBusMessage &message) {
    if (m_connection == nullptr) {
        qDebug() << "Sending message failed: No connection";
        return;
    }
    m_connection->send(message);
}

{% for service in output.services %}
{% set objectPath = "m_" + ('_'.join(service.objectPath.split('/')|reverse)+"ObjectPath")|pascal_case %}
void Connection::register{{ service.definition }}(QObject* interface) {
    if (m_{{ service.definition }} == nullptr) {
        auto {{ service.className|camel_case }} = dynamic_cast<{{ service.className }}*>(interface);
        if ({{ service.className|camel_case }} != nullptr) {
            m_{{ service.definition }} = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregister{{ service.definition }}() {
    if (m_{{ service.definition }} != nullptr) {
        m_{{ service.definition }} = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::is{{ service.definition }}Registered() const {
    return (m_{{ service.definition }} != nullptr);
}

{{ service.className}}Adaptor* Connection::{{ service.definition }}() {
    if ({{ objectPath }} != nullptr) {
        return {{ objectPath }}->m_{{ service.definition|camel_case }};
    } else {
        return nullptr;
    }
}

{% endfor %}