/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/service_header.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusAbstractAdaptor>
#include <QDBusConnection>
#include <QDBusMessage>
#include <memory>
#include "DBusError.hpp"
namespace {{ qt6.namespace(output) }} {

/**
 * @brief D-Bus adaptor for the {{ object.name }} interface.
 */
class {{ target.className }}Adaptor : public QDBusAbstractAdaptor {
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "{{ target.interfaceName }}")
public:
    {{ target.className }}Adaptor(QObject* parent = nullptr);
public slots:
    {% for member in object.members %}
    {% if member.kind == 'method' %}
    /**
     * @brief {{ member.docs }}
     */
    void {{ member.name }}(const QDBusMessage &message);
    {% endif %}
    {% endfor %}
signals:
    {% for member in object.members %}
    {% if member.kind == 'signal' %}
    /**
     * @brief {{ member.docs }}
     */
    void {{ member.name }}();
    {% endif %}
    {% endfor %}
};

{% for member in object.members %}
{% if member.kind == 'method' %}
class {{ member.name }}Args {
    Q_GADGET
};

class {{ member.name }}PendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    {{ member.name }}PendingReply(QDBusMessage call, QObject *parent);
public slots:
    {{ member.name }}Args* args();
    void sendReply();
    void sendError(const QString &name, const QString &message);
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    {{ member.name }}Args m_args;
};

{% endif %}
{% endfor %}

class {{ target.className }} : public QObject {
    Q_OBJECT
    QML_ELEMENT
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:
    {{ target.className }}(QObject* parent = nullptr);
    bool getConnected() const;
    void callFinished(const QDBusMessage &reply);
    {% for member in object. members %}
    {% if member.kind == 'method' %}
    void handle{{ member.name }}Called(QDBusMessage call);
    {% endif %}
    {% endfor %}

public slots:
    void connect();
    void disconnect();

    {% for member in object.members %}
    {% if member.kind == 'signal' %}
    void Emit{{ member.name }}();
    {% endif %}
    {% endfor %}

signals:
    void connectedChanged();
    {% for member in object.members %}
    {% if member.kind == 'method' %}
    void {{ member.name|camel_case }}Called({{ member.name }}PendingReply* reply);
    {% endif %}
    {% endfor %}

private:
    {{ target.className }}Adaptor *m_adaptor;
    std::unique_ptr<QDBusConnection> m_connection = nullptr;
};

}