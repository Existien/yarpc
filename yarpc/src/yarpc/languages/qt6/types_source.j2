/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ output.definitionPath }}
 *   Template: qt6/types_source.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#include "types.hpp"
#include <QList>
#include <QDBusMetaType>
{% for enum in output.objects|selectattr('kind', 'equalto', 'enum') %}
#include "{{ enum.name }}.hpp"
{% endfor %}

namespace {{ qt6.namespace(output) }} {

void registerMetaTypes() {
    {% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
    qRegisterMetaType<{{ struct.name }}>("{{ struct.name }}");
    qDBusRegisterMetaType<{{ struct.name }}>();
    {% endfor %}
    {% for array_type in get_list_of_arrays(output.objects)|sort %}
    {% set qt6_type = qt6.type(array_type, output.objects) %}
    qRegisterMetaType<{{ qt6_type }}>("{{ qt6_type }}");
    qDBusRegisterMetaType<{{ qt6.type(array_type, output.objects, dbus=true) }}>();
    {% endfor %}
    {% for dict_type in get_list_of_dicts(output.objects)|sort %}
    {% set qt6_type = qt6.type(dict_type, output.objects) %}
    qRegisterMetaType<{{ qt6_type }}>("{{ qt6_type }}");
    qDBusRegisterMetaType<{{ qt6.type(dict_type, output.objects, dbus=true) }}>();
    {% endfor %}
}
{% set array_type_list = [] %}
{% set dict_type_list = [] %}
{% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
{% for array_type in struct.name|array_types(output.objects) %}
{% set devNull = array_type_list.append(array_type) %}
{% endfor %}
{% for dict_type in struct.name|dict_types(output.objects) %}
{% set devNull = dict_type_list.append(dict_type) %}
{% endfor %}
{% endfor %}
{% for array_type in array_type_list|sort|unique %}
{% set qt6_type = qt6.type(array_type, output.objects ) %}

bool operator!=(const {{ qt6_type }} &lhs, const {{ qt6_type }} &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=0; i<lhs.size(); ++i) {
        if (lhs[i] != rhs[i]) {
            return true;
        }
    }
    return false;
}
{% endfor %}
{% for dict_type in dict_type_list|sort|unique %}
{% set qt6_type = qt6.type(dict_type, output.objects ) %}

bool operator!=(const {{ qt6_type }} &lhs, const {{ qt6_type }} &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=lhs.keyBegin(); i!=lhs.keyEnd(); ++i) {
        if (!rhs.contains(*i))
        {
            return true;
        }
        if (lhs[*i] != rhs[*i]) {
            return true;
        }
    }
    return false;
}
{% endfor %}
{% set type_list = [] %}
{% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
{% for member in struct.members %}
{% set devNull = type_list.append(member.type|replace(' ', '')) %}
{% endfor %}
{% endfor %}
{% for iface in output.objects|selectattr('kind', 'equalto', 'interface') %}
{% for method in iface.members|selectattr('kind', 'equalto', 'method') %}
{% for arg in method.args %}
{% set devNull = type_list.append(arg.type|replace(' ', '')) %}
{% endfor %}
{% if method.returns %}
{% set devNull = type_list.append(method.returns.type|replace(' ', '')) %}
{% endif %}
{% endfor %}
{% for signal in iface.members|selectattr('kind', 'equalto', 'signal') %}
{% for arg in signal.args %}
{% set devNull = type_list.append(arg.type|replace(' ', '')) %}
{% endfor %}
{% endfor %}
{% endfor %}
{% set dict_type_list = [] %}
{% set array_type_list = [] %}
{% for t in type_list|sort|unique %}
{% if (t|find_type(output.objects)).name == 'dict' %}
{% set devNull = dict_type_list.append(t) %}
{% elif (t|find_type(output.objects)).name == 'array' %}
{% if 'dict<' in t %}
{% set devNull = array_type_list.append(t) %}
{% endif %}
{% endif %}
{% endfor %}
{% for dict_type in dict_type_list %}
{% set qt6_type = qt6.type(dict_type, output.objects ) %}
{% set dict_name = qt6.convert_type_to_name(dict_type, output.objects) %}

{{ qt6_type }} Conversions::jsTo{{ dict_name }}(QVariant jsonObject) {
    {{ qt6.convert_js_to_map("jsonObject", "converted", dict_type, output.objects)|indent(4) }}
    return converted;
}
{% endfor %}
{% for array_type in array_type_list %}
{% set qt6_type = qt6.type(array_type, output.objects ) %}
{% set array_name = qt6.convert_type_to_name(array_type, output.objects) %}

{{ qt6_type }} Conversions::jsTo{{ array_name }}(QVariant jsonObject) {
    {{ qt6.convert_js_to_list("jsonObject", "converted", array_type, output.objects)|indent(4) }}
    return converted;
}
{% endfor %}

}