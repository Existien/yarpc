/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/client_source.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#include "{{ target.className }}.hpp"
#include "types.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>


using namespace {{ qt6.namespace(output) }};
using namespace {{ target.className }}Utils;

{{ target.className }}::{{ target.className }}(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "{{ target.busName }}",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{
    registerMetaTypes();
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &{{ target.className }}::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &{{ target.className }}::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
{% for member in object.members %}
{% if member.kind == 'signal' %}
    QDBusConnection::sessionBus().connect(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        "{{ member.name }}",
        this,
        SLOT({{ member.name}}DBusHandler(QDBusMessage))
    );
{% endif %}
{% endfor %}

}

bool {{ target.className }}::getConnected() const {
    return m_connected;
}

QVariantMap {{ target.className }}::getAllProperties() const {
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "{{ target.interfaceName }}"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void {{ target.className }}::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void {{ target.className }}::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void {{ target.className }}::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "{{ target.interfaceName }}") {
        return;
    }
    {% for member in object.members %}
    {% if member.kind == 'property' %}
    if (changes.contains("{{ member.name }}")) {
        emit {{ member.name|camel_case }}Changed();
    }
    {% endif %}
    {% endfor %}
}

{% for member in object.members %}
{% if member.kind == 'method'%}
{% if member.args|count > 0 %}
{{ member.name }}PendingCall* {{ target.className }}::{{ member.name }}(
    {{ qt6.funcparams(member.args, output.objects, true)|indent(4) }}
) {
    {% for i in range(0, member.args|count) %}
    {% set arg = member.args[i] %}
    {{ qt6.unmarshalVariant(arg.name, arg.type, "arg_"+i|string, output.objects)|indent(4) }}
    {% endfor%}
    return {{ member.name }}(
        {% for i in range(0, member.args|count) %}
        {% set arg = member.args[i] %}
        arg_{{i}}
        {%- if i < member.args|count - 1 -%}
        ,
        {% endif %}
        {% endfor %}

    );
}
{% endif %}
{{ member.name }}PendingCall* {{ target.className }}::{{ member.name }}(
    {{ qt6.funcparams(member.args, output.objects)|indent(4) }}
) {
    {% for arg in member.args %}
    QDBusArgument dbus{{ arg.name }};
    dbus{{ arg.name }} << {{ qt6.force_cast(arg.name, arg.type, output.objects, dbus=true) }};
    {% endfor %}
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "{{ member.name }}"
        {%- if member.args|count > 0 -%}
        ,
        {% endif %}
        {% for i in range(0, member.args|count) %}
        {% set arg = member.args[i] %}
        QVariant::fromValue(dbus{{ arg.name }})
        {%- if i < member.args|count - 1 -%}
        ,
        {% endif %}
        {% endfor %}

    )};
    return new {{ member.name }}PendingCall(pendingCall, this);
}

{{ member.name }}PendingCall::{{ member.name }}PendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &{{ member.name }}PendingCall::callFinished
    );
}

void {{ member.name }}PendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    {% if member.returns is defined %}
    {% set reply_type = qt6.type(member.returns.type, output.objects, dbus=true) %}
    {% else %}
    {% set reply_type = "void" %}
    {% endif %}
    QDBusPendingReply<{{ reply_type }}> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        {% if member.returns is defined %}
        {{ reply_type }} finishedReply = reply;
        emit finished({{ qt6.force_cast("finishedReply", member.returns.type, output.objects, dbus=false) }});
        {% else %}
        emit finished();
        {% endif %}
    }
    deleteLater();
}
{% endif %}

{% if member.kind == 'signal' %}
void {{ target.className }}::{{ member.name }}DBusHandler(QDBusMessage content) {
    {% for i in range(0, member.args|count) %}
    {% set arg = member.args[i] %}
    {% set type = arg.type|find_type(output.objects) %}
    {% if type.kind == 'struct' or type.name == 'array' or type.name == 'dict' %}
    {{ qt6.type(arg.type, output.objects) }} arg_{{ i|string}};
    content.arguments()[{{ i|string }}].value<QDBusArgument>() >> arg_{{ i|string}};
    {% else %}
    auto arg_{{ i|string }} = content.arguments()[{{ i|string }}].value<{{ qt6.type(arg.type, output.objects) }}>();
    {% endif %}
    {% endfor %}
    emit {{ member.name|camel_case }}Received(
        {% for i in range(0, member.args|count) %}
        QVariant::fromValue(arg_{{ i|string }})
        {%- if i < member.args|count - 1 -%}
        ,
        {% endif %}
        {% endfor %}

    );
}
{% endif %}
{% if member.kind == 'property' %}

{{ qt6.type(member.type, output.objects) }} {{ target.className }}::get{{ member.name }}() const {
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "{{ target.interfaceName }}",
        "{{ member.name }}"
    );
    {{ qt6.type(member.type, output.objects) }} unmarshalled{};
    if (reply.isValid()) {
        {% if member.type|needs_marshalling(output.objects) %}
        auto marshalled = qvariant_cast<QDBusArgument>(reply.value().variant());
        marshalled >> unmarshalled;
        {% else %}
        unmarshalled = reply.value().variant().value<{{ qt6.type(member.type, output.objects) }}>();
        {% endif %}
    }
    return unmarshalled;
}


QVariant {{ target.className }}::getVariant{{ member.name }}() const {
    auto unmarshalled = get{{ member.name }}();
    {{ qt6.marshalVariant("unmarshalled", member.type, "marshalled", output.objects)|indent(4) }}
    return marshalled;
}

{% if member.readonly != true %}

void {{ target.className }}::set{{ member.name }}(const {{ qt6.type(member.type, output.objects) }} &newValue) {
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusArgument marshalled;
    QDBusVariant v;
    v.setVariant(QVariant::fromValue({{ qt6.force_cast("newValue", member.type, output.objects, dbus=true) }}));
    marshalled << v;
    iface.call(
        "Set",
        "{{ target.interfaceName }}",
        "{{ member.name }}",
        QVariant::fromValue<QDBusArgument>(marshalled)
    );
}

void {{ target.className }}::setVariant{{ member.name }}(QVariant value ) {
    {{ qt6.unmarshalVariant("value", member.type, "unmarshalled", output.objects)|indent(4) }}
    set{{ member.name }}(unmarshalled);
}
{% endif %}
{% endif %}
{% endfor %}
