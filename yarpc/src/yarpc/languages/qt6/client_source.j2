/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/client_source.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#include "{{ target.className }}.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace {{ qt6.namespace(output) }};

{{ target.className }}::{{ target.className }}(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "{{ target.busName }}",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &{{ target.className }}::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &{{ target.className }}::disconnectedHandler
    );

{% for member in object.members %}
{% if member.kind == 'signal' %}
    QDBusConnection::sessionBus().connect(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        "{{ member.name }}",
        this,
        SLOT({{ member.name}}DBusHandler(QDBusMessage))
    );
{% endif %}
{% endfor %}

}

bool {{ target.className }}::getConnected() const {
    return m_connected;
}

void {{ target.className }}::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void {{ target.className }}::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

{% for member in object.members %}
{% if member.kind == 'method'%}
{{ member.name }}PendingCall* {{ target.className }}::{{ member.name }}() {
    QDBusInterface iface(
        "{{ target.busName }}",
        "{{ target.objectPath }}",
        "{{ target.interfaceName }}",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "{{ member.name }}"
    )};
    return new {{ member.name }}PendingCall(pendingCall, this);
}

{{ member.name }}PendingCall::{{ member.name }}PendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &{{ member.name }}PendingCall::callFinished
    );
}

void {{ member.name }}PendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}
{% endif %}

{% if member.kind == 'signal' %}
void {{ target.className }}::{{ member.name }}DBusHandler(QDBusMessage content) {
    emit {{ member.name|camel_case }}Received();
}
{% endif %}
{% endfor %}
