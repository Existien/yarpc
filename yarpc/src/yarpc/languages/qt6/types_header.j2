/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ output.definitionPath }}
 *   Template: qt6/types_header.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#pragma once
#include <qqmlintegration.h>
#include <QObject>
{% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
#include "{{ struct.name }}.hpp"
{% endfor %}
{% for enum in output.objects|selectattr('kind', 'equalto', 'enum') %}
#include "{{ enum.name }}.hpp"
{% endfor %}

namespace {{ qt6.namespace(output) }} {

/**
* @brief Registers MetaTypes used by this interface.
*/
void registerMetaTypes();

{% set array_type_list = [] %}
{% set dict_type_list = [] %}
{% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
{% for array_type in struct.name|array_types(output.objects) %}
{% set devNull = array_type_list.append(array_type) %}
{% endfor %}
{% for dict_type in struct.name|dict_types(output.objects) %}
{% set devNull = dict_type_list.append(dict_type) %}
{% endfor %}
{% endfor %}
{% for array_type in array_type_list|sort|unique %}
{% set qt6_type = qt6.type(array_type, output.objects ) %}
bool operator!=(const {{ qt6_type }} &lhs, const {{ qt6_type }} &rhs);
{% endfor %}
{% for dict_type in dict_type_list|sort|unique %}
{% set qt6_type = qt6.type(dict_type, output.objects ) %}
bool operator!=(const {{ qt6_type }} &lhs, const {{ qt6_type }} &rhs);
{% endfor %}
{% set type_list = [] %}
{% for struct in output.objects|selectattr('kind', 'equalto', 'struct') %}
{% for member in struct.members %}
{% set devNull = type_list.append(member.type|replace(' ', '')) %}
{% endfor %}
{% endfor %}
{% for iface in output.objects|selectattr('kind', 'equalto', 'interface') %}
{% for method in iface.members|selectattr('kind', 'equalto', 'method') %}
{% for arg in method.args %}
{% set devNull = type_list.append(arg.type|replace(' ', '')) %}
{% endfor %}
{% if method.returns %}
{% set devNull = type_list.append(method.returns.type|replace(' ', '')) %}
{% endif %}
{% endfor %}
{% for signal in iface.members|selectattr('kind', 'equalto', 'signal') %}
{% for arg in signal.args %}
{% set devNull = type_list.append(arg.type|replace(' ', '')) %}
{% endfor %}
{% endfor %}
{% endfor %}
{% set dict_type_list = [] %}
{% set array_type_list = [] %}
{% for t in type_list|sort|unique %}
{% if (t|find_type(output.objects)).name == 'dict' %}
{% set devNull = dict_type_list.append(t) %}
{% elif (t|find_type(output.objects)).name == 'array' %}
{% if 'dict<' in t %}
{% set devNull = array_type_list.append(t) %}
{% endif %}
{% endif %}
{% endfor %}
{% if dict_type_list|count + array_type_list|count > 0 %}

/**
 * Provides JS -> QMap conversion functions in QML.
 *
 * Since JS objects are passed as QJSValue,
 * we need some helper functions to convert them
 * to the QMaps used in the interface.
 *
 * This class provides helper functions to convert
 * JS objects and array to the types required by
 * the interface.
 */
class Conversions : public QObject {
    Q_OBJECT
    QML_ELEMENT
    QML_SINGLETON
public:
{% for dict_type in dict_type_list %}
{% set qt6_type = qt6.type(dict_type, output.objects ) %}
{% set dict_name = qt6.convert_type_to_name(dict_type, output.objects) %}
    Q_INVOKABLE {{ qt6_type }} jsTo{{ dict_name }}(QVariant jsonObject);
{% endfor %}
{% for array_type in array_type_list %}
{% set qt6_type = qt6.type(array_type, output.objects ) %}
{% set array_name = qt6.convert_type_to_name(array_type, output.objects) %}
    Q_INVOKABLE {{ qt6_type }} jsTo{{ array_name }}(QVariant jsonObject);
{% endfor %}
};
{% endif %}
}