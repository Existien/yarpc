{#
    Convert QML URIs into C++ namespaces
#}
{% macro namespace(output) %}
{{- output.qmlUri|replace('.', '::') -}}
{% endmacro %}
{#
    Find *type_as_str* in *objects*
    and return the respective C++ type
#}
{% macro type(type_as_str, objects, dbus=false) %}
{%- set object = type_as_str|find_type(objects) -%}
{%- if object.kind == 'struct' -%}
{{ object.name }}
{%- elif object.kind == 'enum' -%}
{%- if dbus -%}
{{ ('int32'|find_type(objects)).qt6 }}
{%- else -%}
{{ object.name }}::Type
{%- endif -%}
{%- elif object.kind == 'builtin' -%}
{%- if object.name == 'array' -%}
{%- set inner_type = type(type_as_str|extract_inner(object)|first, objects, dbus=dbus) %}
{{ object.qt6|replace("$1", inner_type) }}
{%- elif object.name == 'dict' -%}
{%- set inner_types = type_as_str|extract_inner(object) -%}
{%- set key_type = type(inner_types[0], objects, dbus=dbus) -%}
{%- set value_type = type(inner_types[1], objects, dbus=dbus) -%}
{{ object.qt6|replace("$1", key_type)|replace("$2", value_type) }}
{%- else -%}
{{ object.qt6 }}
{%- endif -%}
{%- endif -%}
{%- endmacro %}
{#
    Force cast type if required
    Note that this only works if the underlying types are identical!
#}
{% macro force_cast(arg_name, arg_type, objects, dbus) %}
{% if type(arg_type, objects) != type(arg_type, objects, dbus=true) %}
*reinterpret_cast<const {{ type(arg_type, objects, dbus=dbus) }}*>(&{{ arg_name }})
{%- else %}
{{ arg_name }}
{%- endif -%}
{% endmacro %}
{#
    Render generic doxygen tags
#}
{% macro doctag(member, tag) -%}
{%- set lines = member.docs.strip().split('\n') -%}
* @{{tag}} {{ lines[0] }}
{%- if lines|count > 1 %}
{% for line in lines[1:] %}

*   {{ line.rstrip() }}
{%- endfor %}
{% endif %}
{% endmacro %}
{#
    Render doxygen @param tags
#}
{%- macro docparams(args) %}
{% for i in range(0,args|count) %}
{% if i > 0 %}{{'\n'}}{% endif %}
{% set arg = args[i] %}
{% set lines = arg.docs.strip().split('\n') %}
* @param {{ arg.name }} {{ lines[0] }}
{%- if lines|count > 1 %}
{% for line in lines[1:] %}

*   {{ line.rstrip() }}
{%- endfor %}
{% endif %}
{%- endfor %}
{% endmacro %}
{#
    Render function parameters
#}
{% macro funcparams(args, objects, asVariant=false, dbus=false) %}
{% for i in range(0, args|count) %}
{% set arg = args[i] %}
{% if asVariant %}
{% set argType = "QVariant" %}
{% else %}
{% set argType = type(arg.type, objects, dbus) %}
{% endif %}
{{ argType }} {{ arg.name }}
{%- if i < args|count - 1 -%}
,
{% endif %}
{% endfor %}
{% endmacro %}
{#
    Marshal value into QVariant
#}
{% macro marshalVariant(value, type_as_str, output, objects, i=0) %}
QVariant {{ output }};
{% set object = type_as_str|find_type(objects) %}
{%- if object.kind == 'builtin' -%}
{%- if object.name == 'array' -%}
{%- set inner_type = type_as_str|extract_inner(object)|first %}
QList<QVariant> list_{{i}};
for (auto& item_{{i}} : {{ value }}) {
    {{ marshalVariant("item_"+i|string, inner_type, "o_"+i|string, objects, i=i+1)|indent(4) }}
    list_{{i}}.push_back(o_{{i}});
}
{{ output }} = QVariant::fromValue(list_{{i}});
{% else %}
{{ output }} = QVariant::fromValue({{value}});
{% endif %}
{% else %}
{{ output }} = QVariant::fromValue({{value}});
{% endif %}
{% endmacro %}
{#
    Unmarshal value from QVariant
#}
{% macro unmarshalVariant(value, type_as_str, output, objects, i=0) %}
{% set marshalled_type = type(type_as_str, objects) %}
{{ marshalled_type }} {{ output }};
{% set object = type_as_str|find_type(objects) %}
{%- if object.kind == 'builtin' -%}
{%- if object.name == 'array' -%}
{%- set inner_type_as_str = type_as_str|extract_inner(object)|first %}
{%- set inner_type = type(inner_type_as_str, objects) %}
for (auto& item_{{i}} : {{ value }}.value<QVariantList>()) {
    {{ unmarshalVariant("item_"+i|string, inner_type_as_str, "o_"+i|string, objects, i=i+1)|indent(4) }}
    {{ output }}.push_back(o_{{i}});
}
{% else %}
{{ output }} = {{ value }}.value<{{ marshalled_type }}>();
{% endif %}
{% else %}
{{ output }} = {{ value }}.value<{{ marshalled_type }}>();
{% endif %}
{% endmacro %}
{#
    Converts type to name
#}
{% macro convert_type_to_name(type_as_str, objects) %}
{% set outer_type = type_as_str|find_type(objects) %}
{%- if outer_type.name == 'dict' -%}
{% set inner_types = type_as_str|extract_inner(outer_type) %}
MapOf{{ inner_types[0]|pascal_case }}To{{ convert_type_to_name(inner_types[1], objects) }}
{%- elif outer_type.name == 'array' -%}
{% set inner_types = type_as_str|extract_inner(outer_type) %}
ListOf{{ convert_type_to_name(inner_types[0], objects) }}
{%- else -%}
{{ type_as_str|pascal_case }}
{%- endif -%}
{% endmacro %}
{#
    Parses a string as the requested type
#}
{% macro parse_string(entry, type_as_str, objects) %}
{%- if type_as_str == 'string' -%}
{{ entry }}
{%- elif type_as_str == 'bool' -%}
({{ entry }} == "true")
{%- elif type_as_str == 'uint8' -%}
{{ entry }}.toUInt()
{%- elif type_as_str == 'int16' -%}
{{ entry }}.toInt()
{%- elif type_as_str == 'uint16' -%}
{{ entry }}.toUInt()
{%- elif type_as_str == 'int32' -%}
{{ entry }}.toLong()
{%- elif type_as_str == 'uint32' -%}
{{ entry }}.toULong()
{%- elif type_as_str == 'int64' -%}
{{ entry }}.toLongLong()
{%- elif type_as_str == 'uint64' -%}
{{ entry }}.toULongLong()
{%- elif type_as_str == 'double' -%}
{{ entry }}.toDouble()
{%- elif (type_as_str|find_type(objects)).kind == 'enum' -%}
static_cast<{{ type(type_as_str, objects) }}>({{ parse_string(entry, 'int32', objects) }})
{%- endif -%}
{% endmacro %}
{#
    Converts JSValue to Maps
#}
{% macro convert_js_to_map(value, output, type_as_str, objects, i=0) %}
{% set output_type = type(type_as_str, objects) %}
{{ output_type }} {{ output }};
{% set outer_type = type_as_str|find_type(objects) %}
{% set inner_types = type_as_str|extract_inner(outer_type) %}
{% set value_type = type(inner_types[1], objects) %}
{% set key_type = type(inner_types[0], objects) %}
{% set map = "map_"+i|string %}
{% set k = "k_"+i|string %}
{% set v = "v_"+i|string %}
{% set o = "o_"+i|string %}
{% set key = "key_"+i|string %}
auto {{ map }} = {{ value }}.toMap();
for (auto {{ k }} = {{ map }}.keyBegin(); {{ k }} != {{ map }}.keyEnd(); ++{{ k }}) {
    {{ key_type }} {{ key }} = {{ parse_string("(*"+k+")", inner_types[0], objects) }};
    auto {{ v }} = {{ map }}.value(*{{ k }});
    {% if (inner_types[1]|find_type(objects)).name == 'dict' %}
    {{ convert_js_to_map(v, o, inner_types[1], objects, i+1)|indent(4) }}
    {{ output }}[{{ key }}] = {{ o }};
    {% elif (inner_types[1]|find_type(objects)).name == 'array' %}
    {{ convert_js_to_list(v, o, inner_types[1], objects, i+1)|indent(4) }}
    {{ output }}[{{ key }}] = {{ o }};
    {% else %}
    {{ output }}[{{ key }}] = {{ v }}.value<{{ value_type }}>();
    {% endif %}
}
{% endmacro %}
{#
    Converts Lists containing JSValue to Lists containing Maps
#}
{% macro convert_js_to_list(value, output, type_as_str, objects, i=0) %}
{% set output_type = type(type_as_str, objects) %}
{{ output_type }} {{ output }};
{% set outer_type = type_as_str|find_type(objects) %}
{% set inner_type = (type_as_str|extract_inner(outer_type))[0] %}
{% set v = "v_"+i|string %}
{% set o = "o_"+i|string %}
for (auto &{{ v }} : {{ value }}.toList()) {
    {% if (inner_type|find_type(objects)).name == 'dict' %}
    {{ convert_js_to_map(v, o, inner_type, objects, i+1)|indent(4) }}
    {{ output }}.append({{ o }});
    {% elif (inner_type|find_type(objects)).name == 'array' %}
    {{ convert_js_to_list(v, o, inner_type, objects, i+1)|indent(4) }}
    {{ output }}.append({{ o }});
    {% else %}
    {{ output }}.append({{ v }}.value<{{ type(inner_type, objects) }}>());
    {% endif %}
}
{% endmacro %}