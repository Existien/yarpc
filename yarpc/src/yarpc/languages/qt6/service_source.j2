/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/service_source.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#include <QDBusArgument>
#include "{{ target.className }}.hpp"
#include "{{ target.className }}Adaptor.hpp"
#include "Connection.hpp"
#include "types.hpp"

using namespace {{ qt6.namespace(output) }};
using namespace {{ target.className }}Utils;

{{ target.className }}::{{ target.className }}(QObject* parent)
: QObject(parent) {
    registerMetaTypes();
    QObject::connect(
        &Connection::instance(),
        &Connection::connectedChanged,
        this,
        &{{ target.className }}::connectedChanged
    );
    QObject::connect(
        &Connection::instance(),
        &Connection::registrationChanged,
        this,
        &{{ target.className }}::connectedChanged
    );
}

void {{ target.className }}::connect() {
    Connection::instance().register{{ object.name }}(this);
}

void {{ target.className }}::disconnect() {
    Connection::instance().unregister{{ object.name }}();
}

void {{ target.className }}::finishCall(const QDBusMessage &reply)
{
    Connection::instance().send(reply);
}

bool {{ target.className }}::getConnected() const {
    return (
        Connection::instance().getConnected()
        && Connection::instance().is{{ object.name }}Registered()
    );
}

{% for member in object.members %}
{% if member.kind == 'signal' %}
void {{ target.className }}::Emit{{ member.name }}(
{% if member.args|count > 0 %}
    {{ qt6.funcparams(member.args, output.objects)|indent(4) }}
{% endif %}
) {
    if (Connection::instance().{{ object.name }}() != nullptr ) {
        emit Connection::instance().{{ object.name }}()->{{ member.name }}(
            {% for i in range(0, member.args|count) %}
            {% set arg = member.args[i] %}
            {{ arg.name }}
            {%- if i < member.args|count - 1 -%}
            ,
            {% endif %}
            {% endfor %}

        );
    }
}

{% if member.args|count > 0 %}
void {{ target.className }}::Emit{{ member.name }}(
    {{ qt6.funcparams(member.args, output.objects, true)|indent(4) }}
) {
    {% for i in range(0, member.args|count) %}
    {% set arg = member.args[i] %}
    {{ qt6.unmarshalVariant(arg.name, arg.type, "arg_"+i|string, output.objects)|indent(4) }}
    {% endfor%}
    Emit{{ member.name }}(
        {% for i in range(0, member.args|count) %}
        {% set arg = member.args[i] %}
        arg_{{i}}
        {%- if i < member.args|count - 1 -%}
        ,
        {% endif %}
        {% endfor %}

    );
}
{% endif %}

{% endif %}
{% if member.kind == 'method' %}
{{ member.name }}PendingReply::{{ member.name }}PendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    {% for i in range(0, member.args|count) %}
    {% set arg = member.args[i] %}
    {% if arg.type|needs_marshalling(output.objects) %}
    {{ qt6.type(arg.type, output.objects, dbus=true) }} arg_{{i}};
    {
        auto marshalled = m_call.arguments()[{{i}}].value<QDBusArgument>();
        marshalled >> arg_{{i}};
    }
    {% endif %}
    {% endfor %}
    m_args = {{ member.name }}Args{
        {% for i in range(0, member.args|count) %}
        {% set arg = member.args[i] %}
        {% if arg.type|needs_marshalling(output.objects) %}
        .{{ arg.name }} = static_cast<{{ qt6.type(arg.type, output.objects) }}>(arg_{{i}}),
        {% else %}
        .{{ arg.name }} = m_call.arguments()[{{i}}].value<{{ qt6.type(arg.type, output.objects) }}>(),
        {% endif %}
        {% endfor %}
    };
}

{{ member.name }}Args {{ member.name }}PendingReply::args() {
    return m_args;
}

{% if member.returns is defined %}
void {{ member.name }}PendingReply::sendReply(
    QVariant reply
) {
    {{ qt6.unmarshalVariant("reply", member.returns.type, "unmarshalled", output.objects)|indent(4) }}
    sendReply(unmarshalled);
}
{% endif %}

void {{ member.name }}PendingReply::sendReply(
    {% if member.returns is defined %}
    const {{ qt6.type(member.returns.type, output.objects) }} &reply
    {% endif %}
) {
    {% if member.returns is defined %}
    auto replyToSend = static_cast<{{ qt6.type(member.returns.type, output.objects, dbus=true) }}>(reply);
    auto dbusReply = m_call.createReply(QVariant::fromValue(replyToSend));
    {% else %}
    auto dbusReply = m_call.createReply();
    {% endif %}
    auto iface = dynamic_cast<{{ target.className }}*>(parent());
    if (iface != nullptr) {
        iface->finishCall(dbusReply);
    }
    deleteLater();
}

void {{ member.name }}PendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<{{ target.className }}*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void {{ member.name }}PendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<{{ target.className }}*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void {{ target.className }}::handle{{ member.name }}Called(QDBusMessage call) {
    auto reply = new {{ member.name }}PendingReply(call, this);
    emit {{ member.name|camel_case }}Called(reply);
}

{% endif %}
{% if member.kind == 'property' %}
{{ qt6.type(member.type, output.objects)}} {{ target.className }}::get{{ member.name }}() const {
    return m_{{ member.name }};
}

void {{ target.className }}::set{{ member.name }}(const {{ qt6.type(member.type, output.objects) }} &value ) {
    m_{{ member.name }} = value;
    emit {{ member.name|camel_case }}Changed();
    if (Connection::instance().{{ object.name }}() != nullptr ) {
        QVariantMap changedProps;
        changedProps.insert("{{ member.name }}", QVariant::fromValue(static_cast<{{ qt6.type(member.type, output.objects, dbus=true) }}>(value)));
        emitPropertiesChangedSignal(changedProps);
    }
}

QVariant {{ target.className }}::getVariant{{ member.name }}() const {
    auto unmarshalled = get{{ member.name }}();
    {{ qt6.marshalVariant("unmarshalled", member.type, "marshalled", output.objects)|indent(4) }}
    return marshalled;
}

void {{ target.className }}::setVariant{{ member.name }}(QVariant value ) {
    {{ qt6.unmarshalVariant("value", member.type, "unmarshalled", output.objects)|indent(4) }}
    set{{ member.name }}(unmarshalled);
}

{% endif %}
{% endfor %}

void {{ target.className }}::emitPropertiesChangedSignal(const QVariantMap &changedProps) {
    auto signal = QDBusMessage::createSignal(
        "{{ target.objectPath }}",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged"
    );
    signal << "{{ target.interfaceName }}";
    signal << changedProps;
    signal << QStringList{};
    Connection::instance().send(signal);
}
