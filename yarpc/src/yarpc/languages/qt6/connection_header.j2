/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ output.definitionPath }}
 *   Template: qt6/object_path_header.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#pragma once
#include <QObject>
#include <QQmlEngine>
#include <qqmlintegration.h>
#include <QDBusConnection>
#include <QDBusMessage>
#include <memory>
{% for service in output.services %}
#include "{{ service.className }}Adaptor.hpp"
{% endfor %}
namespace {{ qt6.namespace(output) }} {

{% for objectPath in output.services|map(attribute='objectPath')|unique|list %}
/**
 * @brief Container for D-Bus interfaces exposed under the object path "{{ objectPath }}"
 */
class {{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }} : public QObject {
    Q_OBJECT
public:
    {{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}(QObject* parent = nullptr);

    /**
     * @brief Returns whether there are any interfaces registered under this object path.
     *
     * @returns whether there are any interfaces registered
     */
    bool hasRegistrations() const;
    {% for service in output.services|selectattr('objectPath', 'equalto', objectPath) %}

    /** @brief Pointer to the adaptor for a registered {{ service.className }} interface or null if it isn't registered. */
    {{ service.className}}Adaptor *m_{{ service.definition|camel_case }} = nullptr;
    {% endfor %}

};
{% endfor %}

/**
 * @brief D-Bus connection singleton.
 *
 * Responsible for managing the registered interfaces
 */
class Connection : public QObject {
Q_OBJECT
/** @brief Whether there are any interfaces registered. */
Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:

    /**
     * @brief Returns the singleton instance.
     *
     * @returns the singleton instance
     */
    static Connection& instance();

    /**
     * @brief Disconnects from the D-Bus if no interfaces are registered.
     */
    void disconnectIfUnused();

    /**
     * @brief Returns whether the a connection to the D-Bus was established.
     *
     * @returns whether a connection was established
     */
    bool getConnected() const;

    /**
     * @brief Send a D-Bus message.
     *
     * @param message the message to send
     */
    void send(const QDBusMessage &message);

    {% for service in output.services %}
    /**
     * @brief Registers the {{ service.definition }} interface under its object path.
     *
     * @param interface pointer to the {{ service.definition }} object to register
     */
    void register{{ service.definition }}(QObject* interface);

    /**
     * @brief Unregisters the {{ service.definition }}.
     */
    void unregister{{ service.definition }}();

    /**
     * @brief Returns whether the {{ service.definition }} interface is registered.
     *
     * @returns whether the interface is registered
     */
    bool is{{ service.definition }}Registered() const;
    {{ service.className}}Adaptor * {{ service.definition }}();

    {% endfor %}
public slots:
    /**
     * @brief Establishes a connection to the D-Bus.
     */
    void connect();

    /**
     * @brief Severs a connection to the D-Bus.
     */
    void disconnect();
signals:
    /**
     * @brief Emitted when the connection status changes.
     */
    void connectedChanged();

    /**
     * @brief Emitted when interfaces are registered or unregistered.
     */
    void registrationChanged();
private:
    Connection();

private:
    void updateRegistrations();
    std::unique_ptr<QDBusConnection> m_connection = nullptr;

    {% for objectPath in output.services|map(attribute='objectPath')|unique|list %}
    std::unique_ptr<{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }}> m_{{ ('_'.join(objectPath.split('/')|reverse)+"ObjectPath")|pascal_case }} = nullptr;
    {% endfor %}

    {% for service in output.services %}
    QObject* m_{{ service.definition }} = nullptr;
    {% endfor %}

};

}
