/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/client_header.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include <QDBusServiceWatcher>
#include <QDBusPendingCallWatcher>
#include <QVariant>
#include "DBusError.hpp"
{% for object in output.objects|selectattr('kind', 'equalto', 'struct') %}
#include "{{ object.name }}.hpp"
{% endfor %}
{% for object in output.objects|selectattr('kind', 'equalto', 'enum') %}
#include "{{ object.name }}.hpp"
{% endfor %}
#include "types.hpp"
namespace {{ qt6.namespace(output) }} {

namespace {{ target.className }}Utils {

{% for member in object.members %}
{% if member.kind == 'method' %}
/**
 * @brief Pending call object for the {{ member.name }} method calls.
 */
class {{ member.name }}PendingCall : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    {{ member.name }}PendingCall(QDBusPendingCall pendingCall, QObject *parent);
signals:
    {% if member.returns is defined %}
    /**
     * @brief Emitted when an {{ member.name }} call returns.
     *
     {{ qt6.doctag(member.returns, "param")|indent(5) }}
     */
    void finished(const {{ qt6.type(member.returns.type, output.objects) }} &reply);
    {% else %}
    /**
     * @brief Emitted when an {{ member.name }} call returns.
     */
    void finished();
    {% endif %}

    /**
     * @brief Emitted when an error ocurred during an {{ member.name }} call.
     *
     * @param error the error
     */
    void error(DBusError error);
private slots:
    void callFinished(QDBusPendingCallWatcher *watcher);
private:
    QDBusPendingCallWatcher m_watcher;
};

{% endif %}
{% endfor %}
}

/**
 * D-Bus client for the {{ target.interfaceName}} D-Bus interface
 */
class {{ target.className }} : public QObject {
    Q_OBJECT
    QML_ELEMENT
    /**
     * @brief Whether the client is connected.
     */
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
    {% for member in object.members %}
    {% if member.kind == "property" %}
    /**
     {{ qt6.doctag(member, "brief")|indent(5) }}
     */
    Q_PROPERTY(QVariant {{ member.name|camel_case }} READ getVariant{{ member.name }} {% if member.readonly != True %}WRITE setVariant{{ member.name }} {% endif %}NOTIFY {{ member.name|camel_case }}Changed)

    {% endif %}
    {% endfor %}
public:
    {{ target.className }}(QObject* parent = nullptr);
    {% for member in object.members %}
    {% if member.kind == "property" %}

    /**
     * @brief Getter for the {{ member.name }} property.
     *
     * @returns the current value of the property
     *
    {% for line in member.docs.strip().split('\n') %}
     * {{ line }}
    {% endfor %}
     */
    {{ qt6.type(member.type, output.objects) }} get{{ member.name }}() const;
    {% if member.readonly != true %}

    /**
     * @brief Setter for the {{ member.name }} property.
     *
     * @param newValue the new value of the property
     *
    {% for line in member.docs.strip().split('\n') %}
     * {{ line }}
    {% endfor %}
     */
    void set{{ member.name }}(const {{ qt6.type(member.type, output.objects) }} &newValue);
    {% endif %}
    {% endif %}
    {% if member.kind == 'method' %}
    {% if member.args|count > 0 %}

    /**
     {{ qt6.doctag(member, "brief")|indent(5) }}
     {% if member.args|count > 0 %}
     *
     {{ qt6.docparams(member.args)|indent(5) }}
     {% endif %}
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    {{ target.className }}Utils::{{ member.name }}PendingCall* {{ member.name }}(
    {% if member.args|count > 0 %}
        {{ qt6.funcparams(member.args, output.objects)|indent(8) }}
    {% endif %}
    );
    {% endif %}
    {% endif %}
    {% endfor %}

public slots:
    /**
     * @brief Returns whether the target service is available.
     *
     * @returns Whether the target service is available.
     */
    bool getConnected() const;

    /**
     * @brief Returns a map containing the current values of all properties.
     *
     * @returns a map containing the current values of all properties
     */
    QVariantMap getAllProperties() const;
    {% for member in object.members %}
    {% if member.kind == 'method' %}

    /**
     {{ qt6.doctag(member, "brief")|indent(5) }}
     {% if member.args|count > 0 %}
     *
     {{ qt6.docparams(member.args)|indent(5) }}
     {% endif %}
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    {{ target.className }}Utils::{{ member.name }}PendingCall* {{ member.name }}(
    {% if member.args|count > 0 %}
        {{ qt6.funcparams(member.args, output.objects, true)|indent(8) }}
    {% endif %}
    );
    {% endif %}
    {% endfor %}

signals:
    /**
     * @brief Emitted when the connected property changes.
     */
    void connectedChanged();
    {% for member in object.members %}
    {% if member.kind == 'property'%}

    /**
     * @brief Changed signal for the {{ member.name }} property.
     *
    {% for line in member.docs.strip().split('\n') %}
     * {{ line }}
    {% endfor %}
     */
    void {{ member.name|camel_case }}Changed();
    {% endif %}
    {% if member.kind == 'signal' %}

    /**
     {{ qt6.doctag(member, "brief")|indent(5) }}
     {% if member.args|count > 0 %}
     *
     {{ qt6.docparams(member.args)|indent(5) }}
     {% endif %}
     */
    void {{ member.name|camel_case }}Received(
    {% if member.args|count > 0 %}
        {{ qt6.funcparams(member.args, output.objects, true)|indent(8) }}
    {% endif %}
    );
    {% endif %}
    {% endfor %}

private slots:
    void connectedHandler(const QString& service);
    void disconnectedHandler(const QString& service);
    void propertiesChangedHandler(QString interface, QVariantMap changes, QStringList);
    {% for member in object.members %}
    {% if member.kind == 'signal' %}
    void {{ member.name }}DBusHandler(QDBusMessage content);
    {% endif %}
    {% if member.kind == "property" %}

    /**
     * @brief Getter for the {{ member.name }} property as variant.
     *
     * @returns the current value of the property as variant
     *
    {% for line in member.docs.strip().split('\n') %}
     * {{ line }}
    {% endfor %}
     */
    QVariant getVariant{{ member.name }}() const;
    {% if member.readonly != true %}

    /**
     * @brief Setter for the {{ member.name }} property as variant.
     *
     * @param newValue the new value of the property wrapped in a variant
     *
    {% for line in member.docs.strip().split('\n') %}
     * {{ line }}
    {% endfor %}
     */
    void setVariant{{ member.name }}(QVariant newValue);
    {% endif %}
    {% endif %}
    {% endfor %}
private:
    bool m_connected = false;
    QDBusServiceWatcher m_watcher;
};

}