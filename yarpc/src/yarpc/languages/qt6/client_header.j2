/* Generated by YARPC
 * Version:  {{version}}
 * Definition:
 *   File: {{ object.definitionPath }}
 *   Object: {{ object.name }}
 *   Template: qt6/client_header.j2
 */
{% import "dbus/common.j2" as dbus %}
{% import "qt6/common.j2" as qt6 %}
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include "DBusError.hpp"
#include <QDBusServiceWatcher>
#include <QDBusPendingCallWatcher>
namespace {{ qt6.namespace(output) }} {

{% for member in object.members %}
{% if member.kind == 'method' %}
/**
 * @brief Pending call object for the Bump method calls.
 */
class {{ member.name }}PendingCall : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    {{ member.name }}PendingCall(QDBusPendingCall pendingCall, QObject *parent);
signals:
    /**
     * @brief Emitted when an {{ member.name }} call returns.
     */
    void finished();

    /**
     * @brief Emitted when an error ocurred during an {{ member.name }} call.
     *
     * @param error the error
     */
    void error(DBusError error);
private slots:
    void callFinished(QDBusPendingCallWatcher *watcher);
private:
    QDBusPendingCallWatcher m_watcher;
};
{% endif %}
{% endfor %}

/**
 * D-Bus client for the {{ target.interfaceName}} D-Bus interface
 */
class {{ target.className }} : public QObject {
    Q_OBJECT
    QML_ELEMENT
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:
    {{ target.className }}(QObject* parent = nullptr);

public slots:
    /**
     * @brief Returns whether the target service is available.
     * @returns Whether the target service is available.
     */
    bool getConnected() const;

    {% for member in object.members %}
    {% if member.kind == 'method' %}

    /**
     * @brief {{ member.docs }}
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    {{ member.name }}PendingCall* {{ member.name }}();
    {% endif %}
    {% endfor %}

signals:
    /**
     * @brief Emitted when the connected property changes.
     */
    void connectedChanged();

    {% for member in object.members %}
    {% if member.kind == 'signal' %}
    /**
     * @brief {{ member.docs }}
     */
    void {{ member.name|camel_case }}Received();
    {% endif %}
    {% endfor %}

private slots:
    void connectedHandler(const QString& service);
    void disconnectedHandler(const QString& service);
    {% for member in object.members %}
    {% if member.kind == 'signal' %}
    void {{ member.name }}DBusHandler(QDBusMessage content);
    {% endif %}
    {% endfor %}
private:
    bool m_connected = false;
    QDBusServiceWatcher m_watcher;
};

}