# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}

from dbus_next.aio import MessageBus
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock, Mock
import asyncio

class {{ object.name }}ServiceInterfaceMock(ServiceInterface):
    """
    Mock service implementation of the {{ object.name }} D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    """

    def __init__(self):
        super().__init__("{{ target.interfaceName }}")
        self._bus = None
        self.mock = AsyncMock()

    async def run(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        self._bus = await MessageBus().connect()
        self._bus.export("{{ target.objectPath }}", self)
        await self._bus.request_name("{{ target.busName }}")
        await self._bus.wait_for_disconnect()

    def stop(self):
        """
        Closes the D-Bus connection
        """
        if self._bus is None:
            self._bus.disconnect()

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)
{% for member in object.members %}

{% if member.kind == 'signal' %}
    @signal()
    def {{ member.name }}(self) -> None:
        """
        {{ member.docs }}
        """
        return
{% endif %}
{% if member.kind == 'method' %}
{% set handler = 'self._'+member.name+'_handler' %}
    @method()
    async def {{ member.name }}(self) -> None:
        """
        {{ member.docs }}
        """
        return await self._await_mock_method("{{ member.name }}", locals())
{% endif %}
{% endfor %}


class {{ object.name }}ClientMock():
    """
    Mock client implementation of the {{ object.name }} D-Bus interface

    The Mock instance can be accessed via the `mock` attribute.
    All received signals will be forwarded to the mock using keyword arguments.
    E.g.
    A received signal `Fooed('bar')`
    might result in the following call of the mock:
    `client.mock.Fooed(msg='bar')`
    """

    def __init__(self):
        self._bus = None
        self._interface = None
        self.mock = Mock()

    async def run(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        self._bus = await MessageBus().connect()
        introspection = await self._bus.introspect(
            "{{ target.busName }}",
            "{{ target.objectPath }}",
        )
        proxy_object = self._bus.get_proxy_object(
            "{{ target.busName }}",
            "{{ target.objectPath }}",
            introspection
        )
        self._interface = proxy_object.get_interface(
            "{{ target.interfaceName }}"
        )

        {% for member in object.members %}
        {% if member['kind'] == 'signal' %}
        self._interface.on_{{ member.name|snake_case }}(self._{{ member.name }}_handler)
        {% endif %}
        {% endfor %}
        await self._bus.wait_for_disconnect()

    def stop(self):
        """
        Closes the D-Bus connection
        """
        if self._bus:
            self._bus.disconnect()
{% for member in object.members %}

{% if member.kind == 'signal' %}
    def _{{ member.name }}_handler(self):
        self.mock.{{ member.name }}()
{% endif %}
{% if member.kind == 'method' %}
    async def {{ member.name }}(self) -> None:
        """
        {{ member.docs }}
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        return await self._interface.call_{{ member.name|snake_case }}()
{% endif %}
{% endfor %}