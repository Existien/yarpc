# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: {{ target.template }}

from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
import asyncio

class {{ target.className }}(ServiceInterface):
    """
    Mock service implementation of the {{ object.name }} D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    """

    def __init__(self):
        super().__init__("{{ target.interfaceName }}")
        self.mock = AsyncMock()
        self.object_path = "{{ target.objectPath }}"

        {% for member in object.members %}
        {% if member.kind == 'method' %}
        self.mock.{{ member.name }}.return_value = None
        {% endif %}
        {% endfor %}

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)
{% for member in object.members %}

{% if member.kind == 'signal' %}
    @signal()
    def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: {{ (arg.type|find_type(output.objects)).py }},
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.args|count > 0 %}'{% for arg in member.args %}{{ (arg.type|find_type(output.objects)).dbus }}{% endfor %}'{% else %}None{% endif %}:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ (arg.type|find_type(output.objects)).py }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        """
        {% if member.args|count > 1 %}
        return [
            {% for arg in member.args %}
            {{ arg.name }},
            {% endfor %}
        ]
        {% elif member.args|count == 1 %}
        return {{ member.args[0].name }}
        {% endif %}
{% endif %}
{% if member.kind == 'method' %}
    @method()
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ (arg.type|find_type(output.objects)).dbus }}',
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.returns %}'{{ (member.returns.type|find_type(output.objects)).dbus }}'{% else %}None{% endif %}:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ (arg.type|find_type(output.objects)).py }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        {% if member.returns %}

        Returns:
            {{ (member.returns.type|find_type(output.objects)).py }}: {{ member.returns.docs }}
        {% endif %}
        """
        return await self._await_mock_method("{{ member.name }}", locals())
{% endif %}
{% endfor %}
