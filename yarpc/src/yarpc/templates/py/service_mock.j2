# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: {{ target.template }}

from dbus_next.aio import MessageBus
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
import asyncio

class {{ target.className }}(ServiceInterface):
    """
    Mock service implementation of the {{ object.name }} D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    """

    def __init__(self):
        super().__init__("{{ target.interfaceName }}")
        self._bus = None
        self.mock = AsyncMock()

    async def run(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        self._bus = await MessageBus().connect()
        self._bus.export("{{ target.objectPath }}", self)
        await self._bus.request_name("{{ target.busName }}")
        await self._bus.wait_for_disconnect()

    def stop(self):
        """
        Closes the D-Bus connection
        """
        if self._bus is None:
            self._bus.disconnect()

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)
{% for member in object.members %}

{% if member.kind == 'signal' %}
    @signal()
    def {{ member.name }}(self) -> None:
        """
        {{ member.docs }}
        """
        return
{% endif %}
{% if member.kind == 'method' %}
{% set handler = 'self._'+member.name+'_handler' %}
    @method()
    async def {{ member.name }}(self) -> None:
        """
        {{ member.docs }}
        """
        return await self._await_mock_method("{{ member.name }}", locals())
{% endif %}
{% endfor %}
