# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: py/service_mock.j2
{% import "dbus_common.j2" as dbus %}
{% import "py/common.j2" as py %}

from typing import Sequence
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
from copy import deepcopy
{% for object in output.objects|selectattr('kind', 'equalto', 'struct') %}
from .{{ object.name|snake_case }} import {{ object.name }}
{% endfor %}


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for {{ object.name }}

    Args:
        wrapper({{ target.className }}): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("{{ target.interfaceName }}")
        self.object_path = "{{ target.objectPath }}"
        self._wrapper = wrapper
{% for member in object.members %}

{% if member.kind == 'signal' %}
    @signal()
    def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ dbus.type(arg.type, output.objects) }}',
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.args|count > 0 %}'{% for arg in member.args %}{{ dbus.type(arg.type, output.objects) }}{% endfor %}'{% else %}None{% endif %}:
        {% if member.args|count > 1 %}
        return [
            {% for arg in member.args %}
            {{ arg.name }},
            {% endfor %}
        ]
        {% elif member.args|count == 1 %}
        return {{ member.args[0].name }}
        {% else %}
        return None
        {% endif %}
{%- endif -%}
{% if member.kind == 'method' %}
{% set handler = 'self._'+member.name+'_handler' %}
    @method()
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ dbus.type(arg.type, output.objects) }}',
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.returns %}'{{ dbus.type(member.returns.type, output.objects) }}'{% else %}None{% endif %}:
        {{''}}{% if member.returns %}raw_return = {% endif %}await self._wrapper.{{ member.name }}(
            {% for arg in member.args %}
            {{ py.from_dbus(arg.name, arg.type, output.objects) }},
            {% endfor %}
        )
        {% if member.returns %}
        return {{ py.to_dbus('raw_return', member.returns.type, output.objects)|indent(8) }}
        {% else %}
        return None
        {% endif %}
{%- endif -%}
{% if member.kind == 'property' %}
{% if member.readonly %}
{% set access = 'PropertyAccess.READ' %}
{% else %}
{% set access = 'PropertyAccess.READWRITE' %}
{% endif %}
    @dbus_property(access={{ access }})
    async def {{ member.name }}(self) -> '{{ dbus.type(member.type, output.objects) }}':
        unmarshalled = await self._wrapper.get_{{ member.name}}()
        return {{ py.to_dbus('unmarshalled', member.type, output.objects)|indent(8) }}
{% if not member.readonly %}

    @{{ member.name }}.setter
    async def {{ member.name }}(self, value: '{{ dbus.type(member.type, output.objects) }}'):
        unmarshalled = {{ py.from_dbus('value', member.type, output.objects) }}
        await self._wrapper.set_{{ member.name }}(unmarshalled)
{% endif %}
{% endif %}
{% endfor %}


class {{ target.className }}():
    """
    Mock service implementation of the {{ object.name }} D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    {% if object.members|selectattr('kind', 'equalto', 'property')|list|count > 0 %}

    Setting properties will trigger a on_<property>_changed call to the mock with
    the new value and a dictionary with the current properties as arguments. The mock is expected to return
    an updated dictionary of properties.

    Per default, the mock is configured to just return the updated value.

    Args:
        {% for member in object.members|selectattr('kind', 'equalto', 'property') %}
        {{ member.name }} ({{ py.type(member.type, output.objects) }}): {{ member.docs|indent(12) }}
        {% endfor %}
    {% endif %}
    """

    def __init__(
        self,
        {% for member in object.members|selectattr('kind', 'equalto', 'property') %}
        {{ member.name }}: {{ py.type(member.type, output.objects) }},
        {% endfor %}
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path
        self.mock = AsyncMock()

        {% for member in object.members|selectattr('kind', 'equalto', 'method') %}
        self.mock.{{ member.name }}.return_value = None
        {% endfor %}

        self._properties = {}
        {% for member in object.members|selectattr('kind', 'equalto', 'property') %}
        {% set type = member.type|find_type(output.objects) %}
        self._properties["{{ member.name }}"] = {{ member.name }}
        self._{{ member.name }}_change_handler = {{ target.className }}._default_{{ member.name }}_change_handler
        self.mock.on_{{ member.name }}_changed = AsyncMock(wraps=self._{{ member.name }}_change_handler)
        {% endfor %}

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                for key in data.keys():
                    data[key] = marshal(data[key])
                return data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)
{% for member in object.members %}

{% if member.kind == 'signal' %}
    def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: {{ py.type(arg.type, output.objects) }},
        {% endfor %}
    ) -> None:
        """
        {{ member.docs|indent(8) }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ py.type(arg.type, output.objects) }}): {{ arg.docs|indent(12) }}
        {% endfor %}
        {% endif %}
        """
        self.interface.{{ member.name }}(
            {% for arg in member.args %}
            {{ py.to_dbus(arg.name, arg.type, output.objects)|indent(16) }},
            {% endfor %}
        )
{% endif %}
{% if member.kind == 'method' %}
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: {{ py.type(arg.type, output.objects) }},
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.returns %}{{ py.type(member.returns.type, output.objects) }}{% else %}None{% endif %}:
        """
        {{ member.docs|indent(8) }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ py.type(arg.type, output.objects) }}): {{ arg.docs|indent(16) }}
        {% endfor %}
        {% endif %}
        {% if member.returns %}

        Returns:
            {{ py.type(member.returns.type, output.objects) }}: {{ member.returns.docs|indent(16) }}
        {% endif %}
        """
        return await self._await_mock_method("{{ member.name }}", locals())
{% endif %}
{% if member.kind == 'property' %}
{% if member.readonly %}
{% set access = 'PropertyAccess.READ' %}
{% else %}
{% set access = 'PropertyAccess.READWRITE' %}
{% endif %}
    async def get_{{ member.name }}(self) -> {{ py.type(member.type, output.objects) }}:
        """Getter for property {{ member.name }}

        {{ member.docs|indent(8) }}

        Returns:
            {{ py.type(member.type, output.objects) }}: the current value
        """
        return self._properties["{{ member.name }}"]

    def on_{{ member.name }}_changed(self, handler) -> None:
        """
        Set handler for property changes due to {{ member.name }} changes

        The handler takes the new {{ member.name}} value and a dictionary of the current properties
        and returns a dictionary with the current property values, or just the changed ones

        Args:
            handler(Callable[[{{ py.type(member.type, output.objects) }}, dict], Awaitable[dict]]): the properties change handler

        Returns:
            dict: the changed properties
        """
        self._{{ member.name }}_change_handler = handler
        self.mock.on_{{ member.name }}_changed = AsyncMock(wraps=self._{{ member.name }}_change_handler)

    async def _default_{{ member.name }}_change_handler(value: {{ py.type(member.type, output.objects) }}, _: dict) -> dict:
        return { "{{ member.name }}": value }

    async def set_{{ member.name }}(self, value: {{ py.type(member.type, output.objects) }}):
        """Setter for property {{ member.name }}

        {{ member.docs|indent(8) }}

        Args:
            value ({{ py.type(member.type, output.objects) }}): the new value
        """
        properties_working_copy = deepcopy(self._properties)
        changed_properties = await self.mock.on_{{ member.name }}_changed(value, properties_working_copy)
        properties_working_copy.update(changed_properties)
        for key in self._properties.keys():
            if key not in properties_working_copy:
                continue
            if properties_working_copy[key] == self._properties[key]:
                del properties_working_copy[key]
            else:
                self._properties[key] = properties_working_copy[key]

            self.emit_properties_changed(properties_working_copy)
{% endif %}
{% endfor %}
