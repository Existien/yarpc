# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: {{ target.template }}

from .connection import Connection
from dbus_next import Variant, DBusError
import sys
import asyncio


class {{ target.className }}():
    """
    {{ object.docs }}
    """

    def __init__(self):
        self._interface = None
        {% for member in object.members %}
        {% if member['kind'] == 'signal' %}
        self._{{ member['name'] }}_handler = None
        {% endif %}
        {% endfor %}

    async def connect(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        try:
            bus = await Connection.bus()
            introspection = await bus.introspect(
                "{{ target.busName }}",
                "{{ target.objectPath }}",
            )
            proxy_object = bus.get_proxy_object(
                "{{ target.busName }}",
                "{{ target.objectPath }}",
                introspection
            )
            self._interface = proxy_object.get_interface(
                "{{ target.interfaceName }}"
            )

            {% for member in object.members %}
            {% if member['kind'] == 'signal' %}
            if self._{{ member['name'] }}_handler:
                self._interface.on_{{ member.name|snake_case }}(self._{{ member.name }}_handler)
            {% endif %}
            {% endfor %}
            await bus.wait_for_disconnect()
        except Exception as e:
            print(f"{type(e).__name__}: {e}", file=sys.stderr)
{% for member in object.members %}

{% if member.kind == 'signal' %}
    def on_{{ member.name }}(self, handler):
        """
        Set handler for {{ member.name }} signal

        Args:
            handler (Callable[[{{member.args|map(attribute='type')|join(', ')}}], None]): the signal handler
        """
        self._{{ member.name }}_handler = handler
        if self._interface:
            self._interface.on_{{ member.name|snake_case }}(self._{{ member.name }}_handler)
{% endif %}
{% if member.kind == 'method' %}
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: {{ (arg.type|find_type(output.objects)).py }},
        {% endfor %}
    ) -> None:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ (arg.type|find_type(output.objects)).py }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        return await self._interface.call_{{ member.name|snake_case }}(
        {% for arg in member.args %}
            {{ arg.name }},
        {% endfor %}
        )
{% endif %}
{% endfor %}