# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: py/client.j2
{% import "dbus_common.j2" as dbus %}
{% import "py/common.j2" as py %}

from typing import Sequence
from .connection import Connection
from dbus_next import Variant, DBusError
import sys
import asyncio
{% for object in output.objects|selectattr('kind', 'equalto', 'struct') %}
from .{{ object.name|snake_case }} import {{ object.name }}
{% endfor %}


class {{ target.className }}():
    """
    {{ object.docs }}
    """

    def __init__(self):
        self.name = "{{ target.interfaceName }}"
        self._interface = None
        self._property_interface = None
        self._properties_changed_handler = None
        {% for member in object.members %}
        {% if member['kind'] == 'signal' %}
        self._{{ member['name'] }}_handler = None
        {% endif %}
        {% endfor %}

    async def connect(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        try:
            bus = await Connection.bus()
            introspection = await bus.introspect(
                "{{ target.busName }}",
                "{{ target.objectPath }}",
            )
            proxy_object = bus.get_proxy_object(
                "{{ target.busName }}",
                "{{ target.objectPath }}",
                introspection
            )
            self._interface = proxy_object.get_interface(
                self.name
            )

            {% for member in object.members %}
            {% if member['kind'] == 'signal' %}
            if self._{{ member['name'] }}_handler:
                self._interface.on_{{ member.name|snake_case }}(self._{{ member.name }}_wrapper)
            {% endif %}
            {% endfor %}

            self._property_interface = proxy_object.get_interface(
                "org.freedesktop.DBus.Properties"
            )
            if self._properties_changed_handler:
                self._property_interface.on_properties_changed(self._properties_changed_wrapper)

            await bus.wait_for_disconnect()
        except Exception as e:
            print(f"{type(e).__name__}: {e}", file=sys.stderr)

    def _unpack_prop(self, name, variant):
        prop_map = {
            {% for member in object.members|selectattr('kind', 'equalto', 'property') %}
            "{{ member.name }}": lambda value: {{ py.unmarshal('value', member.type, output.objects)|indent(12) }},
            {% endfor %}
        }
        if name in prop_map:
            return prop_map[name](variant.value)
        return None

    def _unpack_properties(self, packed_properties):
        return {
            key: self._unpack_prop(key, packed_properties[key])
            for key in packed_properties.keys()
        }

    async def get_all_properties(self) -> dict:
        """Getter for all properties

        Returns:
            dict: a dictionary containing the current state of all properties
        """
        while not self._property_interface:
            await asyncio.sleep(0.1)
        properties = await self._property_interface.call_get_all(self.name)
        return self._unpack_properties(properties)

    def _properties_changed_wrapper(self, interface: str, properties: dict, _invalidated: list):
        if self._properties_changed_handler and interface == self.name:
            properties = self._unpack_properties(properties)
            self._properties_changed_handler(properties)

    def on_properties_changed(self, handler) -> None:
        """
        Set handler for property changes

        The handler takes a dictionary of the changed properties

        Args:
            handler(Callable[[dict], None]): the handler
        """
        self._properties_changed_handler = handler
{% for member in object.members %}

{% if member.kind == 'signal' %}
    def _{{ member.name }}_wrapper(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ dbus.type(arg.type, output.objects) }}',
        {% endfor %}
    ):
        self._{{ member.name }}_handler(
            {% for arg in member.args %}
            {{ py.from_dbus(arg.name, arg.type, output.objects) }},
            {% endfor %}
        )

    def on_{{ member.name }}(self, handler):
        """
        Set handler for {{ member.name }} signal

        Args:
            handler (Callable[[
            {%- for i in range(0,member.args|count) -%}
            {{ py.type(member.args[i].type, output.objects) }}
            {%- if i < member.args|count - 1 -%}
            {{', '}}
            {%- endif -%}
            {%- endfor -%}
            ], None]): the signal handler
        """
        self._{{ member.name }}_handler = handler
        if self._interface:
            self._interface.on_{{ member.name|snake_case }}(self._{{ member.name }}_wrapper)
{% endif %}
{% if member.kind == 'method' %}
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ py.type(arg.type, output.objects) }}',
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.returns %}{{ py.type(member.returns.type, output.objects) }}{% else %}None{% endif %}:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ py.type(arg.type, output.objects) }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        {% if member.returns %}

        Returns:
            {{ py.type(member.returns.type, output.objects) }}: {{ member.returns.docs }}
        {% endif %}
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_{{ member.name|snake_case }}(
        {% for arg in member.args %}
            {{ py.to_dbus(arg.name, arg.type, output.objects) }},
        {% endfor %}
        )
        {% if member.returns %}
        return {{ py.from_dbus('raw_return', member.returns.type, output.objects)|indent(8) }}
        {% else %}
        return None
        {% endif %}
{% endif %}
{% if member.kind == 'property' %}
    async def get_{{ member.name }}(self) -> {{ py.type(member.type, output.objects) }}:
        """Getter for property '{{ member.name }}'

        {{ member.docs }}

        Returns:
            {{ py.type(member.type, output.objects) }}: the current value
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.get_{{ member.name|snake_case }}()
        unmarshalled = {{ py.from_dbus('raw_return', member.type, output.objects) }}
        return unmarshalled

{% if not member.readonly %}

    async def set_{{ member.name }}(self, value: {{ py.type(member.type, output.objects) }}) -> None:
        """Setter for property '{{ member.name }}'

        {{ member.docs }}

        Args:
            value ({{ py.type(member.type, output.objects) }}): the new value
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        marshalled = {{ py.to_dbus('value', member.type, output.objects)|indent(8) }}
        return await self._interface.set_{{ member.name|snake_case }}(marshalled)
{% endif %}
{% endif %}
{% endfor %}