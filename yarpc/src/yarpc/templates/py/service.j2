# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: {{ target.template }}

from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError

import asyncio

class {{ target.className }}(ServiceInterface):
    """
    {{ object.docs }}
    """

    def __init__(self):
        super().__init__("{{ target.interfaceName }}")
        self.object_path = "{{ target.objectPath }}"
        {% for member in object.members %}
        {% if member['kind'] == 'method' %}
        self._{{ member['name'] }}_handler = None
        {% endif %}
        {% endfor %}
{% for member in object.members %}

{% if member.kind == 'signal' %}
    @signal()
    def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: {{ (arg.type|find_type(output.objects)).py }},
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.args|count > 0 %}'{% for arg in member.args %}{{ (arg.type|find_type(output.objects)).dbus }}{% endfor %}'{% else %}None{% endif %}:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ (arg.type|find_type(output.objects)).py }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        """
        {% if member.args|count > 1 %}
        return [
            {% for arg in member.args %}
            {{ arg.name }},
            {% endfor %}
        ]
        {% elif member.args|count == 1 %}
        return {{ member.args[0].name }}
        {% endif %}
{% endif %}
{% if member.kind == 'method' %}
{% set handler = 'self._'+member.name+'_handler' %}

    def on_{{ member.name }}(self, handler) -> None:
        """
        Set handler for {{ member.name }} method

        Args:
            handler (Callable[[{{member.args|map(attribute='type')|join(', ')}}], Awaitable[None]]): the method handler
        """
        {{ handler }} = handler

    @method()
    async def {{ member.name }}(
        self,
        {% for arg in member.args %}
        {{ arg.name }}: '{{ (arg.type|find_type(output.objects)).dbus }}',
        {% endfor %}
    ) ->{{ ' ' }}
    {%- if member.returns %}'{{ (member.returns.type|find_type(output.objects)).dbus }}'{% else %}None{% endif %}:
        """
        {{ member.docs }}
        {% if member.args|count > 0 %}

        Args:
        {% for arg in member.args %}
            {{ arg.name }} ({{ (arg.type|find_type(output.objects)).py }}): {{ arg.docs }}
        {% endfor %}
        {% endif %}
        """
        if {{ handler }} is None:
            raise NotImplementedError()

        return await {{ handler }}(
            {% for arg in member.args %}
            {{ arg.name }},
            {% endfor %}
        )
{% endif %}
{% endfor %}