# Generated by YARPC
# Version:  {{version}}
# Spec:
#   File: {{ object.specPath }}
#   Object: {{ object.name }}
#   Template: py/struct.j2
{% import "dbus_common.j2" as dbus %}
{% import "py/common.j2" as py %}

{% for item in object.name | extract_structs(output.objects) %}
{% if item != object.name %}
from .{{ item|snake_case }} import {{ item }}
{% endif %}
{% endfor %}
from dataclasses import dataclass
from typing import Sequence, Mapping

@dataclass
class {{ object.name }}:
    """
    {{ object.docs|indent(4) }}

    Args:
    {% for member in object.members %}
        {{ member.name }} ({{ py.type(member.type, output.objects) }}): {{ member.docs|indent(12) }}
    {% endfor %}
    """
    {% for member in object.members %}
    {{ member.name }}: {{ py.type(member.type, output.objects) }}
    {% endfor %}

    def to_dbus(self):
        """
        Marshals this object into an array compatible with dbus structs.

        Returns:
            list: the marshalled structure
        """
        return [
            {% for member in object.members %}
            {{ py.marshal("self."+member.name, member.type, output.objects)|indent }},
            {% endfor %}
        ]

    def from_dbus(dbus_struct: list):
        """
        Attempts to unmarshal a D-Bus struct array into this dataclass

        Args:
            dbus_struct (list): the marshalled D-Bus struct as array

        Returns:
            {{ object.name }}: the unmarshalled structure
        """
        return {{ object.name }}(
            {% for index in range(0, object.members|count) %}
            {% set member = object.members[index] %}
            {{ member.name }}={{ py.unmarshal("dbus_struct["+index|string+"]", member.type, output.objects)|indent }},
            {% endfor %}
        )

