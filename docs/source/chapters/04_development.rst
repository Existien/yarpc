Development
===========


This project uses a Docker image to containerize
the development environment.

.. _sdk-setup:

SDK setup
---------

- clone the repository
- build the SDK image via ``./sdk/build.sh``
- start the SDK via ``./sdk/run.sh``
- In the SDK, install the image via ``pdm install -p yarpc``

Testing
-------

While there exist some unit tests for yarpc,
that can be run via ``yarpc/run_tests.sh``,
most of the functionality is tested via behave tests.

The interface definitions in ``tests/definitions`` are used
to generate mock, service and client code covering all features
supported by yarpc.
For each supported language, there exists a service that will
connect to the defined client interface and forward the signals,
method calls and properties to its own D-Bus interface.

The behave tests then use the generated mocks to connect to the service
and test the interfaces:

.. code::

         Behave                Service under test            Behave
   BackendServiceMock <-> [BackendClient <-> Service ] <-> ClientMock


The interface code can be generated by running ``tests/generate.sh``.
The behave tests can be run via ``tests/run_tests.sh``.

Manual Testing
~~~~~~~~~~~~~~

For manual testing, the BackendServiceMock can also be started manually via ``pdm run -p tests/python_mocks mock``.

The SDK contains ``d-feet`` to call D-Bus methods and interact with properties and ``bustle`` to monitor signals.

Adding support for a new language
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Add language support to the SDK

   If the new language needs additional libraries,
   compilers or other tools, install them in the
   ``sdk/Dockerfile``.

2. Run bootstrapping script

   Start the SDK and run the ``sdk/add_language.sh`` script
   and answer the questions.

   This will create skeleton entries for the new language in

   - ``yarpc/languages`` for the generation of the language
   - ``tests`` for the service used in the behave tests
   - ``tests/definitions`` for the output to be generated
   - ``tests/behave-tests`` for the behave tests of this language
   - ``docs/source/chapters/outputs`` for the documentation of this language
