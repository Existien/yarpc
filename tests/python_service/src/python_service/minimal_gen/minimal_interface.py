# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/01_minimal.yml
#   Object: Minimal
#   Template: py/service.j2

from typing import Protocol, Sequence
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from copy import deepcopy



class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for Minimal

    Args:
        wrapper(MinimalInterface): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.testservice.minimal")
        self.object_path = "/com/yarpc/testservice"
        self._wrapper = wrapper

    @signal()
    def Bumped(
        self,
    ) -> None:
        return None

    @method()
    async def Bump(
        self,
    ) -> None:
        await self._wrapper.Bump(
        )
        return None


class MinimalInterface():
    """
    A interface using signals and methods without args
    """

    def __init__(
        self,
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path

        self._Bump_handler = None

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                for key in data.keys():
                    data[key] = marshal(data[key])
                return data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    def Bumped(
        self,
    ) -> None:
        """
        a simple signal without arguments
        """
        self.interface.Bumped(
        )

    def on_Bump(self, handler) -> None:
        """
        Set handler for Bump method

        Args:
            handler (Callable[[], Awaitable[None]]): the method handler
        """
        self._Bump_handler = handler

    async def Bump(
        self,
    ) -> None:
        """
        a simple method without args
        """
        if self._Bump_handler is None:
            raise NotImplementedError()

        return await self._Bump_handler(
        )
