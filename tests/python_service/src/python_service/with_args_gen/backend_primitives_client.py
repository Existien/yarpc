# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/02.2_primitives.yml
#   Object: Primitives
#   Template: py/client.j2

from typing import Sequence, Mapping
from .connection import Connection
from dbus_next import Variant, DBusError
import sys
import asyncio


class BackendPrimitivesClient():
    """
    A interface using all builtin primitive types
    """

    def __init__(self):
        self.name = "com.yarpc.backend.primitives"
        self._interface = None
        self._property_interface = None
        self._properties_changed_handler = None
        self._Uint8Signal_handler = None
        self._BoolSignal_handler = None
        self._Int16Signal_handler = None
        self._Uint16Signal_handler = None
        self._Int32Signal_handler = None
        self._Uint32Signal_handler = None
        self._Int64Signal_handler = None
        self._Uint64Signal_handler = None
        self._DoubleSignal_handler = None
        self._StringSignal_handler = None

    async def connect(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        try:
            bus = await Connection.bus()
            introspection = await bus.introspect(
                "com.yarpc.backend",
                "/com/yarpc/backend",
            )
            proxy_object = bus.get_proxy_object(
                "com.yarpc.backend",
                "/com/yarpc/backend",
                introspection
            )
            self._interface = proxy_object.get_interface(
                self.name
            )

            if self._Uint8Signal_handler:
                self._interface.on_uint8_signal(self._Uint8Signal_wrapper)
            if self._BoolSignal_handler:
                self._interface.on_bool_signal(self._BoolSignal_wrapper)
            if self._Int16Signal_handler:
                self._interface.on_int16_signal(self._Int16Signal_wrapper)
            if self._Uint16Signal_handler:
                self._interface.on_uint16_signal(self._Uint16Signal_wrapper)
            if self._Int32Signal_handler:
                self._interface.on_int32_signal(self._Int32Signal_wrapper)
            if self._Uint32Signal_handler:
                self._interface.on_uint32_signal(self._Uint32Signal_wrapper)
            if self._Int64Signal_handler:
                self._interface.on_int64_signal(self._Int64Signal_wrapper)
            if self._Uint64Signal_handler:
                self._interface.on_uint64_signal(self._Uint64Signal_wrapper)
            if self._DoubleSignal_handler:
                self._interface.on_double_signal(self._DoubleSignal_wrapper)
            if self._StringSignal_handler:
                self._interface.on_string_signal(self._StringSignal_wrapper)

            self._property_interface = proxy_object.get_interface(
                "org.freedesktop.DBus.Properties"
            )
            if self._properties_changed_handler:
                self._property_interface.on_properties_changed(self._properties_changed_wrapper)

            await bus.wait_for_disconnect()
        except Exception as e:
            print(f"{type(e).__name__}: {e}", file=sys.stderr)

    def _unpack_prop(self, name, variant):
        prop_map = {
        }
        if name in prop_map:
            return prop_map[name](variant.value)
        return None

    def _unpack_properties(self, packed_properties):
        return {
            key: self._unpack_prop(key, packed_properties[key])
            for key in packed_properties.keys()
        }

    async def get_all_properties(self) -> dict:
        """Getter for all properties

        Returns:
            dict: a dictionary containing the current state of all properties
        """
        while not self._property_interface:
            await asyncio.sleep(0.1)
        properties = await self._property_interface.call_get_all(self.name)
        return self._unpack_properties(properties)

    def _properties_changed_wrapper(self, interface: str, properties: dict, _invalidated: list):
        if self._properties_changed_handler and interface == self.name:
            properties = self._unpack_properties(properties)
            self._properties_changed_handler(properties)

    def on_properties_changed(self, handler) -> None:
        """
        Set handler for property changes

        The handler takes a dictionary of the changed properties

        Args:
            handler(Callable[[dict], None]): the handler
        """
        self._properties_changed_handler = handler

    def _Uint8Signal_wrapper(
        self,
        value: 'y',
    ):
        self._Uint8Signal_handler(
            value,
        )

    def on_Uint8Signal(self, handler):
        """
        Set handler for Uint8Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Uint8Signal_handler = handler
        if self._interface:
            self._interface.on_uint8_signal(self._Uint8Signal_wrapper)

    def _BoolSignal_wrapper(
        self,
        value: 'b',
    ):
        self._BoolSignal_handler(
            value,
        )

    def on_BoolSignal(self, handler):
        """
        Set handler for BoolSignal signal

        Args:
            handler (Callable[[bool], None]): the signal handler
        """
        self._BoolSignal_handler = handler
        if self._interface:
            self._interface.on_bool_signal(self._BoolSignal_wrapper)

    def _Int16Signal_wrapper(
        self,
        value: 'n',
    ):
        self._Int16Signal_handler(
            value,
        )

    def on_Int16Signal(self, handler):
        """
        Set handler for Int16Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Int16Signal_handler = handler
        if self._interface:
            self._interface.on_int16_signal(self._Int16Signal_wrapper)

    def _Uint16Signal_wrapper(
        self,
        value: 'q',
    ):
        self._Uint16Signal_handler(
            value,
        )

    def on_Uint16Signal(self, handler):
        """
        Set handler for Uint16Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Uint16Signal_handler = handler
        if self._interface:
            self._interface.on_uint16_signal(self._Uint16Signal_wrapper)

    def _Int32Signal_wrapper(
        self,
        value: 'i',
    ):
        self._Int32Signal_handler(
            value,
        )

    def on_Int32Signal(self, handler):
        """
        Set handler for Int32Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Int32Signal_handler = handler
        if self._interface:
            self._interface.on_int32_signal(self._Int32Signal_wrapper)

    def _Uint32Signal_wrapper(
        self,
        value: 'u',
    ):
        self._Uint32Signal_handler(
            value,
        )

    def on_Uint32Signal(self, handler):
        """
        Set handler for Uint32Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Uint32Signal_handler = handler
        if self._interface:
            self._interface.on_uint32_signal(self._Uint32Signal_wrapper)

    def _Int64Signal_wrapper(
        self,
        value: 'x',
    ):
        self._Int64Signal_handler(
            value,
        )

    def on_Int64Signal(self, handler):
        """
        Set handler for Int64Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Int64Signal_handler = handler
        if self._interface:
            self._interface.on_int64_signal(self._Int64Signal_wrapper)

    def _Uint64Signal_wrapper(
        self,
        value: 't',
    ):
        self._Uint64Signal_handler(
            value,
        )

    def on_Uint64Signal(self, handler):
        """
        Set handler for Uint64Signal signal

        Args:
            handler (Callable[[int], None]): the signal handler
        """
        self._Uint64Signal_handler = handler
        if self._interface:
            self._interface.on_uint64_signal(self._Uint64Signal_wrapper)

    def _DoubleSignal_wrapper(
        self,
        value: 'd',
    ):
        self._DoubleSignal_handler(
            value,
        )

    def on_DoubleSignal(self, handler):
        """
        Set handler for DoubleSignal signal

        Args:
            handler (Callable[[float], None]): the signal handler
        """
        self._DoubleSignal_handler = handler
        if self._interface:
            self._interface.on_double_signal(self._DoubleSignal_wrapper)

    def _StringSignal_wrapper(
        self,
        value: 's',
    ):
        self._StringSignal_handler(
            value,
        )

    def on_StringSignal(self, handler):
        """
        Set handler for StringSignal signal

        Args:
            handler (Callable[[str], None]): the signal handler
        """
        self._StringSignal_handler = handler
        if self._interface:
            self._interface.on_string_signal(self._StringSignal_wrapper)

    async def Uint8Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_uint8_method(
            value,
        )
        return raw_return

    async def BoolMethod(
        self,
        value: 'bool',
    ) -> bool:
        """
        a method

        Args:
            value (bool): the value

        Returns:
            bool: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_bool_method(
            value,
        )
        return raw_return

    async def Int16Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_int16_method(
            value,
        )
        return raw_return

    async def Uint16Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_uint16_method(
            value,
        )
        return raw_return

    async def Int32Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_int32_method(
            value,
        )
        return raw_return

    async def Uint32Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_uint32_method(
            value,
        )
        return raw_return

    async def Int64Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_int64_method(
            value,
        )
        return raw_return

    async def Uint64Method(
        self,
        value: 'int',
    ) -> int:
        """
        a method

        Args:
            value (int): the value

        Returns:
            int: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_uint64_method(
            value,
        )
        return raw_return

    async def DoubleMethod(
        self,
        value: 'float',
    ) -> float:
        """
        a method

        Args:
            value (float): the value

        Returns:
            float: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_double_method(
            value,
        )
        return raw_return

    async def StringMethod(
        self,
        value: 'str',
    ) -> str:
        """
        a method

        Args:
            value (str): the value

        Returns:
            str: the return type
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        raw_return = await self._interface.call_string_method(
            value,
        )
        return raw_return
