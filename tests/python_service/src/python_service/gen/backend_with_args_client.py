# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/basic_args.yml
#   Object: WithArgs
#   Template: client

from .connection import Connection
from dbus_next import Variant, DBusError
import sys
import asyncio


class BackendWithArgsClient():
    """
    A interface using only primitive types
    """

    def __init__(self):
        self._interface = None
        self._Notified_handler = None
        self._OrderReceived_handler = None

    async def connect(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        try:
            bus = await Connection.bus()
            introspection = await bus.introspect(
                "com.yarpc.backend",
                "/com/yarpc/backend",
            )
            proxy_object = bus.get_proxy_object(
                "com.yarpc.backend",
                "/com/yarpc/backend",
                introspection
            )
            self._interface = proxy_object.get_interface(
                "com.yarpc.backend.withArgs"
            )

            if self._Notified_handler:
                self._interface.on_notified(self._Notified_handler)
            if self._OrderReceived_handler:
                self._interface.on_order_received(self._OrderReceived_handler)
            await bus.wait_for_disconnect()
        except Exception as e:
            print(f"{type(e).__name__}: {e}", file=sys.stderr)

    def on_Notified(self, handler):
        """
        Set handler for Notified signal

        Args:
            handler (Callable[[str], None]): the signal handler
        """
        self._Notified_handler = handler
        if self._interface:
            self._interface.on_notified(self._Notified_handler)

    def on_OrderReceived(self, handler):
        """
        Set handler for OrderReceived signal

        Args:
            handler (Callable[[str, int, float], None]): the signal handler
        """
        self._OrderReceived_handler = handler
        if self._interface:
            self._interface.on_order_received(self._OrderReceived_handler)

    async def Notify(
        self,
        message: str,
    ) -> None:
        """
        a simple method with one argument

        Args:
            message (str): The message
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        return await self._interface.call_notify(
            message,
        )

    async def Order(
        self,
        item: str,
        amount: int,
        pricePerItem: float,
    ) -> float:
        """
        a simple method with args and return value

        Args:
            item (str): The item
            amount (int): a amount ordered
            pricePerItem (float): the price per item

        Returns:
            float: the total price
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        return await self._interface.call_order(
            item,
            amount,
            pricePerItem,
        )
