# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/basic_args.yml
#   Object: WithArgs
#   Template: service

from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError

import asyncio

class WithArgsInterface(ServiceInterface):
    """
    A interface using only primitive types
    """

    def __init__(self):
        super().__init__("com.yarpc.testservice.withArgs")
        self.object_path = "/com/yarpc/testservice"
        self._Notify_handler = None
        self._Order_handler = None

    @signal()
    def Notified(self) -> None:
        """
        a simple signal with one argument
        """
        return

    @signal()
    def OrderReceived(self) -> None:
        """
        a simple signal with multiple arguments
        """
        return


    def on_Notify(self, handler) -> None:
        """
        Set handler for Notify method

        Args:
            handler (Callable[[], Awaitable[None]]): the method handler
        """
        self._Notify_handler = handler

    @method()
    async def Notify(self) -> None:
        """
        a simple method with one argument
        """
        if self._Notify_handler is None:
            raise NotImplementedError()

        return await self._Notify_handler()


    def on_Order(self, handler) -> None:
        """
        Set handler for Order method

        Args:
            handler (Callable[[], Awaitable[None]]): the method handler
        """
        self._Order_handler = handler

    @method()
    async def Order(self) -> None:
        """
        a simple method with args and return value
        """
        if self._Order_handler is None:
            raise NotImplementedError()

        return await self._Order_handler()
