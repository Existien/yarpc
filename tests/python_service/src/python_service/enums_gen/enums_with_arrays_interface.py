# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/06.3_enums_with_arrays.yml
#   Object: EnumsWithArrays
#   Template: py/service.j2

from typing import Protocol, Sequence, Mapping
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from copy import deepcopy
from enum import Enum
from .enum_struct import EnumStruct
from .color import Color


class ProvidesEnumsWithArraysInterfaceProperties(Protocol):
    """Protocol for property providers of EnumsWithArraysInterface
    """

    async def get_EnumProperty(self) -> Sequence[Color]:
        """Getter for EnumProperty property

        Returns:
            Sequence[Color]: the current value
        """
        ...

    async def set_EnumProperty(self, value: Sequence[Color]) -> dict:
        """Setter for EnumProperty property

        Args:
            value (Sequence[Color]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        ...


class EnumsWithArraysInterfaceProperties:
    """Manages the state of the properties for EnumsWithArraysInterface

    Args:
        EnumProperty (Sequence[Color]): a property
    """

    def __init__(
        self,
        EnumProperty: Sequence[Color],
    ):
        self._properties = {
            "EnumProperty": EnumProperty,
        }

    async def get_EnumProperty(self) -> Sequence[Color]:
        """Getter for EnumProperty property

        Returns:
            Sequence[Color]: the current value
        """
        return self._properties["EnumProperty"]

    async def set_EnumProperty(self, value: Sequence[Color]) -> dict:
        """Setter for EnumProperty property

        Args:
            value (Sequence[Color]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        if value == self._properties["EnumProperty"]:
            return {}
        self._properties["EnumProperty"] = value
        return {"EnumProperty": value}


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for EnumsWithArrays

    Args:
        wrapper(EnumsWithArraysInterface): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.testservice.enumsWithArrays")
        self.object_path = "/com/yarpc/testservice"
        self._wrapper = wrapper

    @method()
    async def EnumMethod(
        self,
        color: 'ai',
    ) -> 'ai':
        raw_return = await self._wrapper.EnumMethod(
            [ Color(x0) for x0 in color ],
        )
        return [ x0.value for x0 in raw_return ]

    @signal()
    def EnumSignal(
        self,
        color: 'ai',
    ) -> 'ai':
        return color

    @dbus_property(access=PropertyAccess.READWRITE)
    async def EnumProperty(self) -> 'ai':
        unmarshalled = await self._wrapper.get_EnumProperty()
        return [ x0.value for x0 in unmarshalled ]

    @EnumProperty.setter
    async def EnumProperty(self, value: 'ai'):
        unmarshalled = [ Color(x0) for x0 in value ]
        await self._wrapper.set_EnumProperty(unmarshalled)


class EnumsWithArraysInterface():
    """
    A interface using enums

    Args:
        property_provider (ProvidesEnumsWithArraysInterfaceProperties): provider for interface properties
    """

    def __init__(
        self,
        property_provider: ProvidesEnumsWithArraysInterfaceProperties,
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path

        self._EnumMethod_handler = None
        self._properties = property_provider

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                new_data = {}
                for key in data.keys():
                    new_data[key.value if isinstance(key, Enum) else key] = marshal(data[key])
                return new_data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif isinstance(data, Enum):
                return data.value
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    def on_EnumMethod(self, handler) -> None:
        """
        Set handler for EnumMethod method

        Args:
            handler (Callable[[Sequence[Color]], Awaitable[Sequence[Color]]]): the method handler
        """
        self._EnumMethod_handler = handler

    async def EnumMethod(
        self,
        color: Sequence[Color],
    ) -> Sequence[Color]:
        """
        a simple method with one argument

        Args:
            color (Sequence[Color]): a color

        Returns:
            Sequence[Color]: another color
        """
        if self._EnumMethod_handler is None:
            raise NotImplementedError()

        return await self._EnumMethod_handler(
            color,
        )

    def EnumSignal(
        self,
        color: Sequence[Color],
    ) -> None:
        """
        a simple signal with one argument

        Args:
            color (Sequence[Color]): a color
        """
        self.interface.EnumSignal(
            [ x0.value for x0 in color ],
        )

    async def get_EnumProperty(self) -> Sequence[Color]:
        """Getter for property EnumProperty

        a property

        Returns:
            Sequence[Color]: the current value
        """
        return await self._properties.get_EnumProperty()

    async def set_EnumProperty(self, value: Sequence[Color]):
        """Setter for property EnumProperty

        a property

        Args:
            value (Sequence[Color]): the new value
        """
        changed_properties = await self._properties.set_EnumProperty(value)

        self.emit_properties_changed(changed_properties)
