# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/04.1_arrays.yml
#   Object: Arrays
#   Template: py/service.j2

from typing import Protocol, List, Dict
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from copy import deepcopy
from enum import Enum
from .struct_array import StructArray
from .simons_array import SimonsArray


class ProvidesArraysInterfaceProperties(Protocol):
    """Protocol for property providers of ArraysInterface
    """

    async def get_ArrayProperty(self) -> List[List[str]]:
        """Getter for ArrayProperty property

        Returns:
            List[List[str]]: the current value
        """
        ...

    async def set_ArrayProperty(self, value: List[List[str]]) -> dict:
        """Setter for ArrayProperty property

        Args:
            value (List[List[str]]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        ...


class ArraysInterfaceProperties:
    """Manages the state of the properties for ArraysInterface

    Args:
        ArrayProperty (List[List[str]]): a simple property
    """

    def __init__(
        self,
        ArrayProperty: List[List[str]],
    ):
        self._properties = {
            "ArrayProperty": ArrayProperty,
        }

    async def get_ArrayProperty(self) -> List[List[str]]:
        """Getter for ArrayProperty property

        Returns:
            List[List[str]]: the current value
        """
        return self._properties["ArrayProperty"]

    async def set_ArrayProperty(self, value: List[List[str]]) -> dict:
        """Setter for ArrayProperty property

        Args:
            value (List[List[str]]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        if value == self._properties["ArrayProperty"]:
            return {}
        self._properties["ArrayProperty"] = value
        return {"ArrayProperty": value}


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for Arrays

    Args:
        wrapper(ArraysInterface): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.testservice.arrays")
        self.object_path = "/com/yarpc/testservice"
        self._wrapper = wrapper

    @method()
    async def ArrayMethod(
        self,
        numbers: 'aau',
    ) -> 'aad':
        raw_return = await self._wrapper.ArrayMethod(
            [ [ x1 for x1 in x0 ] for x0 in numbers ],
        )
        return [ [ x1 for x1 in x0 ] for x0 in raw_return ]

    @signal()
    def ArraySignal(
        self,
        numbers: 'aad',
    ) -> 'aad':
        return numbers

    @dbus_property(access=PropertyAccess.READWRITE)
    async def ArrayProperty(self) -> 'aas':
        unmarshalled = await self._wrapper.get_ArrayProperty()
        return [ [ x1 for x1 in x0 ] for x0 in unmarshalled ]

    @ArrayProperty.setter
    async def ArrayProperty(self, value: 'aas'):
        unmarshalled = [ [ x1 for x1 in x0 ] for x0 in value ]
        await self._wrapper.set_ArrayProperty(unmarshalled)


class ArraysInterface():
    """
    A interface using arrays

    Args:
        property_provider (ProvidesArraysInterfaceProperties): provider for interface properties
    """

    def __init__(
        self,
        property_provider: ProvidesArraysInterfaceProperties,
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path

        self._ArrayMethod_handler = None
        self._properties = property_provider

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                new_data = {}
                for key in data.keys():
                    new_data[key.value if isinstance(key, Enum) else key] = marshal(data[key])
                return new_data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif isinstance(data, Enum):
                return data.value
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    def on_ArrayMethod(self, handler) -> None:
        """
        Set handler for ArrayMethod method

        Args:
            handler (Callable[[List[List[int]]], Awaitable[List[List[float]]]]): the method handler
        """
        self._ArrayMethod_handler = handler

    async def ArrayMethod(
        self,
        numbers: List[List[int]],
    ) -> List[List[float]]:
        """
        a simple method with one argument

        Args:
            numbers (List[List[int]]): Some numbers

        Returns:
            List[List[float]]: normalized numbers
        """
        if self._ArrayMethod_handler is None:
            raise NotImplementedError()

        return await self._ArrayMethod_handler(
            numbers,
        )

    def ArraySignal(
        self,
        numbers: List[List[float]],
    ) -> None:
        """
        a simple signal with one argument

        Args:
            numbers (List[List[float]]): normalized numbers
        """
        self.interface.ArraySignal(
            [ [ x1 for x1 in x0 ] for x0 in numbers ],
        )

    async def get_ArrayProperty(self) -> List[List[str]]:
        """Getter for property ArrayProperty

        a simple property

        Returns:
            List[List[str]]: the current value
        """
        return await self._properties.get_ArrayProperty()

    async def set_ArrayProperty(self, value: List[List[str]]):
        """Setter for property ArrayProperty

        a simple property

        Args:
            value (List[List[str]]): the new value
        """
        changed_properties = await self._properties.set_ArrayProperty(value)

        self.emit_properties_changed(changed_properties)
