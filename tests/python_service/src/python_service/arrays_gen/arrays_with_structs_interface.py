# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/04.2_arrays_with_structs.yml
#   Object: ArraysWithStructs
#   Template: py/service.j2

from typing import Protocol, List, Dict
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from copy import deepcopy
from enum import Enum
from .struct_array import StructArray
from .simons_array import SimonsArray


class ProvidesArraysWithStructsInterfaceProperties(Protocol):
    """Protocol for property providers of ArraysWithStructsInterface
    """

    async def get_ArrayStructProperty(self) -> List[StructArray]:
        """Getter for ArrayStructProperty property

        Returns:
            List[StructArray]: the current value
        """
        ...

    async def set_ArrayStructProperty(self, value: List[StructArray]) -> dict:
        """Setter for ArrayStructProperty property

        Args:
            value (List[StructArray]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        ...


class ArraysWithStructsInterfaceProperties:
    """Manages the state of the properties for ArraysWithStructsInterface

    Args:
        ArrayStructProperty (List[StructArray]): a simple property
    """

    def __init__(
        self,
        ArrayStructProperty: List[StructArray],
    ):
        self._properties = {
            "ArrayStructProperty": ArrayStructProperty,
        }

    async def get_ArrayStructProperty(self) -> List[StructArray]:
        """Getter for ArrayStructProperty property

        Returns:
            List[StructArray]: the current value
        """
        return self._properties["ArrayStructProperty"]

    async def set_ArrayStructProperty(self, value: List[StructArray]) -> dict:
        """Setter for ArrayStructProperty property

        Args:
            value (List[StructArray]): the new value

        Returns:
            dict: dictionary of the changed properties, empty if None changed
        """
        if value == self._properties["ArrayStructProperty"]:
            return {}
        self._properties["ArrayStructProperty"] = value
        return {"ArrayStructProperty": value}


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for ArraysWithStructs

    Args:
        wrapper(ArraysWithStructsInterface): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.testservice.arraysWithStructs")
        self.object_path = "/com/yarpc/testservice"
        self._wrapper = wrapper

    @method()
    async def ArrayStructMethod(
        self,
        numbers: 'a(aau)',
    ) -> 'a(a(aau))':
        raw_return = await self._wrapper.ArrayStructMethod(
            [ StructArray.from_dbus(x0) for x0 in numbers ],
        )
        return [ x0.to_dbus() for x0 in raw_return ]

    @signal()
    def ArrayStructSignal(
        self,
        numbers: 'a(aau)',
    ) -> 'a(aau)':
        return numbers

    @dbus_property(access=PropertyAccess.READWRITE)
    async def ArrayStructProperty(self) -> 'a(aau)':
        unmarshalled = await self._wrapper.get_ArrayStructProperty()
        return [ x0.to_dbus() for x0 in unmarshalled ]

    @ArrayStructProperty.setter
    async def ArrayStructProperty(self, value: 'a(aau)'):
        unmarshalled = [ StructArray.from_dbus(x0) for x0 in value ]
        await self._wrapper.set_ArrayStructProperty(unmarshalled)


class ArraysWithStructsInterface():
    """
    A interface using arrays using structs using arrays

    Args:
        property_provider (ProvidesArraysWithStructsInterfaceProperties): provider for interface properties
    """

    def __init__(
        self,
        property_provider: ProvidesArraysWithStructsInterfaceProperties,
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path

        self._ArrayStructMethod_handler = None
        self._properties = property_provider

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                new_data = {}
                for key in data.keys():
                    new_data[key.value if isinstance(key, Enum) else key] = marshal(data[key])
                return new_data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif isinstance(data, Enum):
                return data.value
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    def on_ArrayStructMethod(self, handler) -> None:
        """
        Set handler for ArrayStructMethod method

        Args:
            handler (Callable[[List[StructArray]], Awaitable[List[SimonsArray]]]): the method handler
        """
        self._ArrayStructMethod_handler = handler

    async def ArrayStructMethod(
        self,
        numbers: List[StructArray],
    ) -> List[SimonsArray]:
        """
        a simple method with one argument

        Args:
            numbers (List[StructArray]): Some numbers

        Returns:
            List[SimonsArray]: more numbers
        """
        if self._ArrayStructMethod_handler is None:
            raise NotImplementedError()

        return await self._ArrayStructMethod_handler(
            numbers,
        )

    def ArrayStructSignal(
        self,
        numbers: List[StructArray],
    ) -> None:
        """
        a simple signal with one argument

        Args:
            numbers (List[StructArray]): numbers
        """
        self.interface.ArrayStructSignal(
            [ x0.to_dbus() for x0 in numbers ],
        )

    async def get_ArrayStructProperty(self) -> List[StructArray]:
        """Getter for property ArrayStructProperty

        a simple property

        Returns:
            List[StructArray]: the current value
        """
        return await self._properties.get_ArrayStructProperty()

    async def set_ArrayStructProperty(self, value: List[StructArray]):
        """Setter for property ArrayStructProperty

        a simple property

        Args:
            value (List[StructArray]): the new value
        """
        changed_properties = await self._properties.set_ArrayStructProperty(value)

        self.emit_properties_changed(changed_properties)
