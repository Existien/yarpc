/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.1_dictionaries.yml
 *   Object: Dicts
 *   Template: qt6/client_header.j2
 */
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include <QDBusServiceWatcher>
#include <QDBusPendingCallWatcher>
#include <QVariant>
#include "DBusError.hpp"
#include "StructDict.hpp"
#include "SimonsDict.hpp"
#include "types.hpp"
namespace gen::dicts {

/**
 * @brief Pending call object for the DictMethod method calls.
 */
class DictMethodPendingCall : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    DictMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent);
signals:
    /**
     * @brief Emitted when an DictMethod call returns.
     *
     * @param another one
     */
    void finished(const QMap<QString, QString> &reply);

    /**
     * @brief Emitted when an error ocurred during an DictMethod call.
     *
     * @param error the error
     */
    void error(DBusError error);
private slots:
    void callFinished(QDBusPendingCallWatcher *watcher);
private:
    QDBusPendingCallWatcher m_watcher;
};

/**
 * D-Bus client for the com.yarpc.backend.dicts D-Bus interface
 */
class BackendDictsClient : public QObject {
    Q_OBJECT
    QML_ELEMENT
    /**
     * @brief Whether the client is connected.
     */
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
    /**
     * @brief a prop
     */
    Q_PROPERTY(QVariant dictProperty READ getVariantDictProperty WRITE setVariantDictProperty NOTIFY dictPropertyChanged)

public:
    BackendDictsClient(QObject* parent = nullptr);

    /**
     * @brief a simple method with one argument
     *
     * @param keysNValues a dictionary
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    DictMethodPendingCall* DictMethod(
        QMap<QString, uint> keysNValues
    );

    /**
     * @brief Getter for the DictProperty property.
     *
     * @returns the current value of the property
     *
     * a prop
     */
    QMap<QString, uint> getDictProperty() const;

    /**
     * @brief Setter for the DictProperty property.
     *
     * @param newValue the new value of the property
     *
     * a prop
     */
    void setDictProperty(const QMap<QString, uint> &newValue);

public slots:
    /**
     * @brief Returns whether the target service is available.
     *
     * @returns Whether the target service is available.
     */
    bool getConnected() const;

    /**
     * @brief Returns a map containing the current values of all properties.
     *
     * @returns a map containing the current values of all properties
     */
    QVariantMap getAllProperties() const;

    /**
     * @brief a simple method with one argument
     *
     * @param keysNValues a dictionary
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    DictMethodPendingCall* DictMethod(
        QVariant keysNValues
    );

signals:
    /**
     * @brief Emitted when the connected property changes.
     */
    void connectedChanged();

    /**
     * @brief a signal
     *
     * @param keysNValues a dictionary
     */
    void dictSignalReceived(
        QVariant keysNValues
    );

    /**
     * @brief Changed signal for the DictProperty property.
     *
     * a prop
     */
    void dictPropertyChanged();

private slots:
    void connectedHandler(const QString& service);
    void disconnectedHandler(const QString& service);
    void propertiesChangedHandler(QString interface, QVariantMap changes, QStringList);
    void DictSignalDBusHandler(QDBusMessage content);

    /**
     * @brief Getter for the DictProperty property as variant.
     *
     * @returns the current value of the property as variant
     *
     * a prop
     */
    QVariant getVariantDictProperty() const;

    /**
     * @brief Setter for the DictProperty property as variant.
     *
     * @param newValue the new value of the property wrapped in a variant
     *
     * a prop
     */
    void setVariantDictProperty(QVariant newValue);
private:
    bool m_connected = false;
    QDBusServiceWatcher m_watcher;
};

}