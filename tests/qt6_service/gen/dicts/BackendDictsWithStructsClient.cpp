/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.2_dictionaries_with_structs.yml
 *   Object: DictsWithStructs
 *   Template: qt6/client_source.j2
 */
#include "BackendDictsWithStructsClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>
#include <QMetaType>
#include <QDBusMetaType>

using namespace gen::dicts;

BackendDictsWithStructsClient::BackendDictsWithStructsClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{
    qRegisterMetaType<StructDict>("StructDict");
    qDBusRegisterMetaType<StructDict>();
    qRegisterMetaType<SimonsDict>("SimonsDict");
    qDBusRegisterMetaType<SimonsDict>();
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithStructs",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendDictsWithStructsClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendDictsWithStructsClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithStructs",
        "DictStructSignal",
        this,
        SLOT(DictStructSignalDBusHandler(QDBusMessage))
    );

}

bool BackendDictsWithStructsClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendDictsWithStructsClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.dictsWithStructs"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendDictsWithStructsClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendDictsWithStructsClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendDictsWithStructsClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.dictsWithStructs") {
        return;
    }
    if (changes.contains("DictStructProperty")) {
        emit dictStructPropertyChanged();
    }
}

DictsStructMethodPendingCall* BackendDictsWithStructsClient::DictsStructMethod(
    QMap<$1, $2> numbers
) {
    QDBusArgument dbusnumbers;
    dbusnumbers << numbers;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithStructs",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "DictsStructMethod",
        QVariant::fromValue(dbusnumbers)
    )};
    return new DictsStructMethodPendingCall(pendingCall, this);
}

DictsStructMethodPendingCall::DictsStructMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &DictsStructMethodPendingCall::callFinished
    );
}

void DictsStructMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}


void BackendDictsWithStructsClient::DictStructSignalDBusHandler(QDBusMessage content) {
    emit dictStructSignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}


QMap<$1, $2> BackendDictsWithStructsClient::getDictStructProperty() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "com.yarpc.backend.dictsWithStructs",
        "DictStructProperty"
    );
    QMap<$1, $2> unmarshalled{};
    if (reply.isValid()) {
        unmarshalled = reply.value().variant().value<QMap<$1, $2>>();
    }
    return unmarshalled;
}

void BackendDictsWithStructsClient::setDictStructProperty(const QMap<$1, $2> &newValue) {

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusArgument marshalled;
    QDBusVariant v;
    v.setVariant(QVariant::fromValue(newValue));
    marshalled << v;
    iface.call(
        "Set",
        "com.yarpc.backend.dictsWithStructs",
        "DictStructProperty",
        QVariant::fromValue<QDBusArgument>(marshalled)
    );
}
