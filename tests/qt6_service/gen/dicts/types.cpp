/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/05_dicts.yml
 *   Template: qt6/types_source.j2
 */
#include "types.hpp"
#include <QList>
#include <QDBusMetaType>

namespace gen::dicts {

void registerMetaTypes() {
    qRegisterMetaType<StructDict>("StructDict");
    qDBusRegisterMetaType<StructDict>();
    qRegisterMetaType<SimonsDict>("SimonsDict");
    qDBusRegisterMetaType<SimonsDict>();
    qRegisterMetaType<QList<QMap<QString, uint>>>("QList<QMap<QString, uint>>");
    qDBusRegisterMetaType<QList<QMap<QString, uint>>>();
    qRegisterMetaType<QMap<bool, QString>>("QMap<bool, QString>");
    qDBusRegisterMetaType<QMap<bool, QString>>();
    qRegisterMetaType<QMap<double, QString>>("QMap<double, QString>");
    qDBusRegisterMetaType<QMap<double, QString>>();
    qRegisterMetaType<QMap<short, QString>>("QMap<short, QString>");
    qDBusRegisterMetaType<QMap<short, QString>>();
    qRegisterMetaType<QMap<int, QString>>("QMap<int, QString>");
    qDBusRegisterMetaType<QMap<int, QString>>();
    qRegisterMetaType<QMap<qlonglong, QString>>("QMap<qlonglong, QString>");
    qDBusRegisterMetaType<QMap<qlonglong, QString>>();
    qRegisterMetaType<QMap<QString, QList<QMap<QString, uint>>>>("QMap<QString, QList<QMap<QString, uint>>>");
    qDBusRegisterMetaType<QMap<QString, QList<QMap<QString, uint>>>>();
    qRegisterMetaType<QMap<QString, QString>>("QMap<QString, QString>");
    qDBusRegisterMetaType<QMap<QString, QString>>();
    qRegisterMetaType<QMap<QString, StructDict>>("QMap<QString, StructDict>");
    qDBusRegisterMetaType<QMap<QString, StructDict>>();
    qRegisterMetaType<QMap<QString, uint>>("QMap<QString, uint>");
    qDBusRegisterMetaType<QMap<QString, uint>>();
    qRegisterMetaType<QMap<QString, QMap<QString, uint>>>("QMap<QString, QMap<QString, uint>>");
    qDBusRegisterMetaType<QMap<QString, QMap<QString, uint>>>();
    qRegisterMetaType<QMap<QString, SimonsDict>>("QMap<QString, SimonsDict>");
    qDBusRegisterMetaType<QMap<QString, SimonsDict>>();
    qRegisterMetaType<QMap<QString, QString>>("QMap<QString, QString>");
    qDBusRegisterMetaType<QMap<QString, QString>>();
    qRegisterMetaType<QMap<QString, StructDict>>("QMap<QString, StructDict>");
    qDBusRegisterMetaType<QMap<QString, StructDict>>();
    qRegisterMetaType<QMap<QString, uint>>("QMap<QString, uint>");
    qDBusRegisterMetaType<QMap<QString, uint>>();
    qRegisterMetaType<QMap<ushort, QString>>("QMap<ushort, QString>");
    qDBusRegisterMetaType<QMap<ushort, QString>>();
    qRegisterMetaType<QMap<uint, QString>>("QMap<uint, QString>");
    qDBusRegisterMetaType<QMap<uint, QString>>();
    qRegisterMetaType<QMap<qulonglong, QString>>("QMap<qulonglong, QString>");
    qDBusRegisterMetaType<QMap<qulonglong, QString>>();
    qRegisterMetaType<QMap<uchar, QString>>("QMap<uchar, QString>");
    qDBusRegisterMetaType<QMap<uchar, QString>>();
}

bool operator!=(const QMap<QString, SimonsDict> &lhs, const QMap<QString, SimonsDict> &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=lhs.keyBegin(); i!=lhs.keyEnd(); ++i) {
        if (!rhs.contains(*i))
        {
            return true;
        }
        if (lhs[*i] != rhs[*i]) {
            return true;
        }
    }
    return false;
}

bool operator!=(const QMap<QString, StructDict> &lhs, const QMap<QString, StructDict> &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=lhs.keyBegin(); i!=lhs.keyEnd(); ++i) {
        if (!rhs.contains(*i))
        {
            return true;
        }
        if (lhs[*i] != rhs[*i]) {
            return true;
        }
    }
    return false;
}

QMap<bool, QString> Conversions::jsToMapOfBoolToString(QVariant jsonObject) {
    QMap<bool, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        bool key_0 = ((*k_0) == "true");
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<double, QString> Conversions::jsToMapOfDoubleToString(QVariant jsonObject) {
    QMap<double, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        double key_0 = (*k_0).toDouble();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<short, QString> Conversions::jsToMapOfInt16ToString(QVariant jsonObject) {
    QMap<short, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        short key_0 = (*k_0).toInt();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<int, QString> Conversions::jsToMapOfInt32ToString(QVariant jsonObject) {
    QMap<int, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        int key_0 = (*k_0).toLong();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<qlonglong, QString> Conversions::jsToMapOfInt64ToString(QVariant jsonObject) {
    QMap<qlonglong, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        qlonglong key_0 = (*k_0).toLongLong();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<QString, QList<QMap<QString, uint>>> Conversions::jsToMapOfStringToListOfMapOfStringToUint32(QVariant jsonObject) {
    QMap<QString, QList<QMap<QString, uint>>> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        QList<QMap<QString, uint>> o_0;
        for (auto &v_1 : v_0.toList()) {
            QMap<QString, uint> o_1;
            auto map_2 = v_1.toMap();
            for (auto k_2 = map_2.keyBegin(); k_2 != map_2.keyEnd(); ++k_2) {
                QString key_2 = (*k_2);
                auto v_2 = map_2.value(*k_2);
                o_1[key_2] = v_2.value<uint>();
            }

            o_0.append(o_1);
        }

        converted[key_0] = o_0;
    }

    return converted;
}

QMap<QString, QMap<QString, uint>> Conversions::jsToMapOfStringToMapOfStringToUint32(QVariant jsonObject) {
    QMap<QString, QMap<QString, uint>> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        QMap<QString, uint> o_0;
        auto map_1 = v_0.toMap();
        for (auto k_1 = map_1.keyBegin(); k_1 != map_1.keyEnd(); ++k_1) {
            QString key_1 = (*k_1);
            auto v_1 = map_1.value(*k_1);
            o_0[key_1] = v_1.value<uint>();
        }

        converted[key_0] = o_0;
    }

    return converted;
}

QMap<QString, SimonsDict> Conversions::jsToMapOfStringToSimonsDict(QVariant jsonObject) {
    QMap<QString, SimonsDict> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<SimonsDict>();
    }

    return converted;
}

QMap<QString, QString> Conversions::jsToMapOfStringToString(QVariant jsonObject) {
    QMap<QString, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<QString, StructDict> Conversions::jsToMapOfStringToStructDict(QVariant jsonObject) {
    QMap<QString, StructDict> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<StructDict>();
    }

    return converted;
}

QMap<QString, uint> Conversions::jsToMapOfStringToUint32(QVariant jsonObject) {
    QMap<QString, uint> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<uint>();
    }

    return converted;
}

QMap<ushort, QString> Conversions::jsToMapOfUint16ToString(QVariant jsonObject) {
    QMap<ushort, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        ushort key_0 = (*k_0).toUInt();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<uint, QString> Conversions::jsToMapOfUint32ToString(QVariant jsonObject) {
    QMap<uint, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        uint key_0 = (*k_0).toULong();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<qulonglong, QString> Conversions::jsToMapOfUint64ToString(QVariant jsonObject) {
    QMap<qulonglong, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        qulonglong key_0 = (*k_0).toULongLong();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<uchar, QString> Conversions::jsToMapOfUint8ToString(QVariant jsonObject) {
    QMap<uchar, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        uchar key_0 = (*k_0).toUInt();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

}