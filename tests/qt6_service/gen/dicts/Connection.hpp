/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/05_dicts.yml
 *   Template: qt6/object_path_header.j2
 */
#pragma once
#include <QObject>
#include <QQmlEngine>
#include <qqmlintegration.h>
#include <QDBusConnection>
#include <QDBusMessage>
#include <memory>
#include "DictsInterfaceAdaptor.hpp"
#include "DictsWithStructsInterfaceAdaptor.hpp"
#include "DictsWithArraysInterfaceAdaptor.hpp"
#include "DictKeysInterfaceAdaptor.hpp"
namespace gen::dicts {

/**
 * @brief Container for D-Bus interfaces exposed under the object path "/com/yarpc/testservice/dicts"
 */
class DictsTestserviceYarpcComObjectPath : public QObject {
    Q_OBJECT
public:
    DictsTestserviceYarpcComObjectPath(QObject* parent = nullptr);

    /**
     * @brief Returns whether there are any interfaces registered under this object path.
     *
     * @returns whether there are any interfaces registered
     */
    bool hasRegistrations() const;

    /** @brief Pointer to the adaptor for a registered DictsInterface interface or null if it isn't registered. */
    DictsInterfaceAdaptor *m_dicts = nullptr;

    /** @brief Pointer to the adaptor for a registered DictsWithStructsInterface interface or null if it isn't registered. */
    DictsWithStructsInterfaceAdaptor *m_dictsWithStructs = nullptr;

    /** @brief Pointer to the adaptor for a registered DictsWithArraysInterface interface or null if it isn't registered. */
    DictsWithArraysInterfaceAdaptor *m_dictsWithArrays = nullptr;

    /** @brief Pointer to the adaptor for a registered DictKeysInterface interface or null if it isn't registered. */
    DictKeysInterfaceAdaptor *m_dictKeys = nullptr;

};

/**
 * @brief D-Bus connection singleton.
 *
 * Responsible for managing the registered interfaces
 */
class Connection : public QObject {
Q_OBJECT
/** @brief Whether there are any interfaces registered. */
Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:

    /**
     * @brief Returns the singleton instance.
     *
     * @returns the singleton instance
     */
    static Connection& instance();

    /**
     * @brief Disconnects from the D-Bus if no interfaces are registered.
     */
    void disconnectIfUnused();

    /**
     * @brief Returns whether the a connection to the D-Bus was established.
     *
     * @returns whether a connection was established
     */
    bool getConnected() const;

    /**
     * @brief Send a D-Bus message.
     *
     * @param message the message to send
     */
    void send(const QDBusMessage &message);

    /**
     * @brief Registers the Dicts interface under its object path.
     *
     * @param interface pointer to the Dicts object to register
     */
    void registerDicts(QObject* interface);

    /**
     * @brief Unregisters the Dicts.
     */
    void unregisterDicts();

    /**
     * @brief Returns whether the Dicts interface is registered.
     *
     * @returns whether the interface is registered
     */
    bool isDictsRegistered() const;
    DictsInterfaceAdaptor * Dicts();

    /**
     * @brief Registers the DictsWithStructs interface under its object path.
     *
     * @param interface pointer to the DictsWithStructs object to register
     */
    void registerDictsWithStructs(QObject* interface);

    /**
     * @brief Unregisters the DictsWithStructs.
     */
    void unregisterDictsWithStructs();

    /**
     * @brief Returns whether the DictsWithStructs interface is registered.
     *
     * @returns whether the interface is registered
     */
    bool isDictsWithStructsRegistered() const;
    DictsWithStructsInterfaceAdaptor * DictsWithStructs();

    /**
     * @brief Registers the DictsWithArrays interface under its object path.
     *
     * @param interface pointer to the DictsWithArrays object to register
     */
    void registerDictsWithArrays(QObject* interface);

    /**
     * @brief Unregisters the DictsWithArrays.
     */
    void unregisterDictsWithArrays();

    /**
     * @brief Returns whether the DictsWithArrays interface is registered.
     *
     * @returns whether the interface is registered
     */
    bool isDictsWithArraysRegistered() const;
    DictsWithArraysInterfaceAdaptor * DictsWithArrays();

    /**
     * @brief Registers the DictKeys interface under its object path.
     *
     * @param interface pointer to the DictKeys object to register
     */
    void registerDictKeys(QObject* interface);

    /**
     * @brief Unregisters the DictKeys.
     */
    void unregisterDictKeys();

    /**
     * @brief Returns whether the DictKeys interface is registered.
     *
     * @returns whether the interface is registered
     */
    bool isDictKeysRegistered() const;
    DictKeysInterfaceAdaptor * DictKeys();

public slots:
    /**
     * @brief Establishes a connection to the D-Bus.
     */
    void connect();

    /**
     * @brief Severs a connection to the D-Bus.
     */
    void disconnect();
signals:
    /**
     * @brief Emitted when the connection status changes.
     */
    void connectedChanged();

    /**
     * @brief Emitted when interfaces are registered or unregistered.
     */
    void registrationChanged();
private:
    Connection();

private:
    void updateRegistrations();
    std::unique_ptr<QDBusConnection> m_connection = nullptr;

    std::unique_ptr<DictsTestserviceYarpcComObjectPath> m_DictsTestserviceYarpcComObjectPath = nullptr;

    QObject* m_Dicts = nullptr;
    QObject* m_DictsWithStructs = nullptr;
    QObject* m_DictsWithArrays = nullptr;
    QObject* m_DictKeys = nullptr;

};

}