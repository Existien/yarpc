/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.4_dictionaries_keys.yml
 *   Object: DictKeys
 *   Template: qt6/client_source.j2
 */
#include "BackendDictKeysClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace gen::dicts;

BackendDictKeysClient::BackendDictKeysClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendDictKeysClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendDictKeysClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Uint8Signal",
        this,
        SLOT(Uint8SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "BoolSignal",
        this,
        SLOT(BoolSignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Int16Signal",
        this,
        SLOT(Int16SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Uint16Signal",
        this,
        SLOT(Uint16SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Int32Signal",
        this,
        SLOT(Int32SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Uint32Signal",
        this,
        SLOT(Uint32SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Int64Signal",
        this,
        SLOT(Int64SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "Uint64Signal",
        this,
        SLOT(Uint64SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "DoubleSignal",
        this,
        SLOT(DoubleSignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        "StringSignal",
        this,
        SLOT(StringSignalDBusHandler(QDBusMessage))
    );

}

bool BackendDictKeysClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendDictKeysClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.dictKeys"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendDictKeysClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendDictKeysClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendDictKeysClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.dictKeys") {
        return;
    }
}


void BackendDictKeysClient::Uint8SignalDBusHandler(QDBusMessage content) {
    emit uint8SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::BoolSignalDBusHandler(QDBusMessage content) {
    emit boolSignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Int16SignalDBusHandler(QDBusMessage content) {
    emit int16SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Uint16SignalDBusHandler(QDBusMessage content) {
    emit uint16SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Int32SignalDBusHandler(QDBusMessage content) {
    emit int32SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Uint32SignalDBusHandler(QDBusMessage content) {
    emit uint32SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Int64SignalDBusHandler(QDBusMessage content) {
    emit int64SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::Uint64SignalDBusHandler(QDBusMessage content) {
    emit uint64SignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::DoubleSignalDBusHandler(QDBusMessage content) {
    emit doubleSignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}

void BackendDictKeysClient::StringSignalDBusHandler(QDBusMessage content) {
    emit stringSignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}
Uint8MethodPendingCall* BackendDictKeysClient::Uint8Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint8Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Uint8MethodPendingCall(pendingCall, this);
}

Uint8MethodPendingCall::Uint8MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint8MethodPendingCall::callFinished
    );
}

void Uint8MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

BoolMethodPendingCall* BackendDictKeysClient::BoolMethod(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "BoolMethod",
        QVariant::fromValue(dbusvalue)
    )};
    return new BoolMethodPendingCall(pendingCall, this);
}

BoolMethodPendingCall::BoolMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &BoolMethodPendingCall::callFinished
    );
}

void BoolMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Int16MethodPendingCall* BackendDictKeysClient::Int16Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int16Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Int16MethodPendingCall(pendingCall, this);
}

Int16MethodPendingCall::Int16MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int16MethodPendingCall::callFinished
    );
}

void Int16MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Uint16MethodPendingCall* BackendDictKeysClient::Uint16Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint16Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Uint16MethodPendingCall(pendingCall, this);
}

Uint16MethodPendingCall::Uint16MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint16MethodPendingCall::callFinished
    );
}

void Uint16MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Int32MethodPendingCall* BackendDictKeysClient::Int32Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int32Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Int32MethodPendingCall(pendingCall, this);
}

Int32MethodPendingCall::Int32MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int32MethodPendingCall::callFinished
    );
}

void Int32MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Uint32MethodPendingCall* BackendDictKeysClient::Uint32Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint32Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Uint32MethodPendingCall(pendingCall, this);
}

Uint32MethodPendingCall::Uint32MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint32MethodPendingCall::callFinished
    );
}

void Uint32MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Int64MethodPendingCall* BackendDictKeysClient::Int64Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int64Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Int64MethodPendingCall(pendingCall, this);
}

Int64MethodPendingCall::Int64MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int64MethodPendingCall::callFinished
    );
}

void Int64MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

Uint64MethodPendingCall* BackendDictKeysClient::Uint64Method(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint64Method",
        QVariant::fromValue(dbusvalue)
    )};
    return new Uint64MethodPendingCall(pendingCall, this);
}

Uint64MethodPendingCall::Uint64MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint64MethodPendingCall::callFinished
    );
}

void Uint64MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

DoubleMethodPendingCall* BackendDictKeysClient::DoubleMethod(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "DoubleMethod",
        QVariant::fromValue(dbusvalue)
    )};
    return new DoubleMethodPendingCall(pendingCall, this);
}

DoubleMethodPendingCall::DoubleMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &DoubleMethodPendingCall::callFinished
    );
}

void DoubleMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

StringMethodPendingCall* BackendDictKeysClient::StringMethod(
    QMap<$1, $2> value
) {
    QDBusArgument dbusvalue;
    dbusvalue << value;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictKeys",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "StringMethod",
        QVariant::fromValue(dbusvalue)
    )};
    return new StringMethodPendingCall(pendingCall, this);
}

StringMethodPendingCall::StringMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &StringMethodPendingCall::callFinished
    );
}

void StringMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}

