/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.2_dictionaries_with_structs.yml
 *   Object: SimonsDict
 *   Template: qt6/struct_header.j2
 */

#pragma once
#include "StructDict.hpp"
#include <QObject>
#include <QDBusArgument>
#include <QDBusMessage>
#include <qqmlintegration.h>

namespace gen::dicts {

/**
 * @brief A struct containing dicts
 */
struct SimonsDict {
    Q_GADGET
    /**
     * @brief some struct dicts
     */
    Q_PROPERTY(QMap<QString, StructDict> numbers MEMBER numbers)
public:
    /**
     * @brief some struct dicts
     */
    QMap<QString, StructDict> numbers;
};

/**
 * @brief Marshalls a SimonsDict into a QDBusArgument.
 *
 * @param argument the argument to marshall into
 * @param object the object to marshall
 *
 * @returns QDBusArgument the argument containing the marshalled object (same as argument)
 */
QDBusArgument &operator<<(QDBusArgument &argument, const SimonsDict &object);

/**
 * @brief Demarshalls a SimonsDict from a QDBusArgument.
 *
 * @param argument the argument to demarshall from
 * @param object the object to demarshall
 *
 * @returns QDBusArgument the argument containing the marshalled object (same as argument)
 */
const QDBusArgument &operator>>(const QDBusArgument &argument, SimonsDict &object);

bool operator!=(const SimonsDict &lhs, const SimonsDict &rhs);

/**
 * @brief Factory to create SimonsDict objects in QML.
 */
class SimonsDictFactory : public QObject {
    Q_OBJECT
    QML_ELEMENT
    QML_SINGLETON
public:
    /**
     * @brief Create a SimonsDict object.
     *
     * @param numbers some struct dicts
     */
    SimonsDict create (
        QMap<QString, StructDict> numbers
    ) const;

    /**
     * @brief Create a SimonsDict object.
     *
     * @param numbers some struct dicts
     */
    Q_INVOKABLE SimonsDict create (
        QVariant numbers
    ) const;
};

}

Q_DECLARE_METATYPE(gen::dicts::SimonsDict)