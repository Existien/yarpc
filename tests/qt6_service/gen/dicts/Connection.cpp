/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/05_dicts.yml
 *   Template: qt6/object_path_source.j2
 */
#include "Connection.hpp"
#include "DictsInterface.hpp"
#include "DictsWithStructsInterface.hpp"
#include "DictsWithArraysInterface.hpp"

using namespace gen::dicts;


DictsTestserviceYarpcComObjectPath::DictsTestserviceYarpcComObjectPath(QObject *parent) : QObject(parent) {
}

bool DictsTestserviceYarpcComObjectPath::hasRegistrations() const {
    return (
        false
        || m_dicts != nullptr
        || m_dictsWithStructs != nullptr
        || m_dictsWithArrays != nullptr
    );
}


Connection::Connection() : QObject(nullptr) {}

Connection& Connection::instance() {
    static Connection object{};
    return object;
}

void Connection::connect() {
    bool hasChanged = false;
    if (m_connection == nullptr) {
        m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "com.yarpc.testservice"));
        if ( m_connection->isConnected()) {
            m_connection->registerService("com.yarpc.testservice");
            hasChanged = true;
        }
    }

    if (hasChanged) {
        emit connectedChanged();
    }
}

void Connection::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("com.yarpc.testservice");
    m_connection = nullptr;
    emit connectedChanged();
}

void Connection::disconnectIfUnused(){
    if (
        false
        || m_Dicts != nullptr
        || m_DictsWithStructs != nullptr
        || m_DictsWithArrays != nullptr
    ) {
        return;
    }
    disconnect();
}

void Connection::updateRegistrations() {
    if (m_connection != nullptr && m_connection->isConnected()) {
        m_connection->unregisterObject("/com/yarpc/testservice/dicts");
        m_DictsTestserviceYarpcComObjectPath.reset(new DictsTestserviceYarpcComObjectPath(this));
        if (m_Dicts != nullptr) {
            auto dictsInterface = dynamic_cast<DictsInterface*>(m_Dicts);
            m_DictsTestserviceYarpcComObjectPath->m_dicts = new DictsInterfaceAdaptor(
                dictsInterface,
                m_DictsTestserviceYarpcComObjectPath.get()
            );
        }
        if (m_DictsWithStructs != nullptr) {
            auto dictsWithStructsInterface = dynamic_cast<DictsWithStructsInterface*>(m_DictsWithStructs);
            m_DictsTestserviceYarpcComObjectPath->m_dictsWithStructs = new DictsWithStructsInterfaceAdaptor(
                dictsWithStructsInterface,
                m_DictsTestserviceYarpcComObjectPath.get()
            );
        }
        if (m_DictsWithArrays != nullptr) {
            auto dictsWithArraysInterface = dynamic_cast<DictsWithArraysInterface*>(m_DictsWithArrays);
            m_DictsTestserviceYarpcComObjectPath->m_dictsWithArrays = new DictsWithArraysInterfaceAdaptor(
                dictsWithArraysInterface,
                m_DictsTestserviceYarpcComObjectPath.get()
            );
        }
        if (
            false
            || m_Dicts != nullptr
            || m_DictsWithStructs != nullptr
            || m_DictsWithArrays != nullptr
        ) {
            m_connection->registerObject(
                "/com/yarpc/testservice/dicts",
                m_DictsTestserviceYarpcComObjectPath.get()
            );
        }
        emit registrationChanged();
    }
}

bool Connection::getConnected() const {
    return m_connection != nullptr;
}

void Connection::send(const QDBusMessage &message) {
    if (m_connection == nullptr) {
        qDebug() << "Sending message failed: No connection";
        return;
    }
    m_connection->send(message);
}

void Connection::registerDicts(QObject* interface) {
    if (m_Dicts == nullptr) {
        auto dictsInterface = dynamic_cast<DictsInterface*>(interface);
        if (dictsInterface != nullptr) {
            m_Dicts = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterDicts() {
    if (m_Dicts != nullptr) {
        m_Dicts = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isDictsRegistered() const {
    return (m_Dicts != nullptr);
}

DictsInterfaceAdaptor* Connection::Dicts() {
    if (m_DictsTestserviceYarpcComObjectPath != nullptr) {
        return m_DictsTestserviceYarpcComObjectPath->m_dicts;
    } else {
        return nullptr;
    }
}

void Connection::registerDictsWithStructs(QObject* interface) {
    if (m_DictsWithStructs == nullptr) {
        auto dictsWithStructsInterface = dynamic_cast<DictsWithStructsInterface*>(interface);
        if (dictsWithStructsInterface != nullptr) {
            m_DictsWithStructs = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterDictsWithStructs() {
    if (m_DictsWithStructs != nullptr) {
        m_DictsWithStructs = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isDictsWithStructsRegistered() const {
    return (m_DictsWithStructs != nullptr);
}

DictsWithStructsInterfaceAdaptor* Connection::DictsWithStructs() {
    if (m_DictsTestserviceYarpcComObjectPath != nullptr) {
        return m_DictsTestserviceYarpcComObjectPath->m_dictsWithStructs;
    } else {
        return nullptr;
    }
}

void Connection::registerDictsWithArrays(QObject* interface) {
    if (m_DictsWithArrays == nullptr) {
        auto dictsWithArraysInterface = dynamic_cast<DictsWithArraysInterface*>(interface);
        if (dictsWithArraysInterface != nullptr) {
            m_DictsWithArrays = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterDictsWithArrays() {
    if (m_DictsWithArrays != nullptr) {
        m_DictsWithArrays = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isDictsWithArraysRegistered() const {
    return (m_DictsWithArrays != nullptr);
}

DictsWithArraysInterfaceAdaptor* Connection::DictsWithArrays() {
    if (m_DictsTestserviceYarpcComObjectPath != nullptr) {
        return m_DictsTestserviceYarpcComObjectPath->m_dictsWithArrays;
    } else {
        return nullptr;
    }
}

