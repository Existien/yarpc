/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.3_dictionaries_with_arrays.yml
 *   Object: DictsWithArrays
 *   Template: qt6/client_source.j2
 */
#include "BackendDictsWithArraysClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace gen::dicts;

BackendDictsWithArraysClient::BackendDictsWithArraysClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithArrays",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendDictsWithArraysClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendDictsWithArraysClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithArrays",
        "DictsArraySignal",
        this,
        SLOT(DictsArraySignalDBusHandler(QDBusMessage))
    );

}

bool BackendDictsWithArraysClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendDictsWithArraysClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.dictsWithArrays"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendDictsWithArraysClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendDictsWithArraysClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendDictsWithArraysClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.dictsWithArrays") {
        return;
    }
    if (changes.contains("DictArrayProperty")) {
        emit dictArrayPropertyChanged();
    }
}

DictsArrayMethodPendingCall* BackendDictsWithArraysClient::DictsArrayMethod(
    QMap<$1, $2> numbers
) {
    QDBusArgument dbusnumbers;
    dbusnumbers << numbers;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithArrays",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "DictsArrayMethod",
        QVariant::fromValue(dbusnumbers)
    )};
    return new DictsArrayMethodPendingCall(pendingCall, this);
}

DictsArrayMethodPendingCall::DictsArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &DictsArrayMethodPendingCall::callFinished
    );
}

void DictsArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QMap<$1, $2>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}


void BackendDictsWithArraysClient::DictsArraySignalDBusHandler(QDBusMessage content) {
    emit dictsArraySignalReceived(
        content.arguments()[0].value<QMap<$1, $2>>()
    );
}


QMap<$1, $2> BackendDictsWithArraysClient::getDictArrayProperty() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithArrays",
        QDBusConnection::sessionBus()
    );
    return iface.property("DictArrayProperty").value<QMap<$1, $2>>();
}

void BackendDictsWithArraysClient::setDictArrayProperty(const QMap<$1, $2> &newValue) {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/dicts",
        "com.yarpc.backend.dictsWithArrays",
        QDBusConnection::sessionBus()
    );
    iface.setProperty("DictArrayProperty", newValue);
}
