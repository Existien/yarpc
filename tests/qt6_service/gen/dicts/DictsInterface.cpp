/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/05.1_dictionaries.yml
 *   Object: Dicts
 *   Template: qt6/service_source.j2
 */
#include "DictsInterface.hpp"

using namespace gen::dicts;

DictsInterface::DictsInterface(QObject* parent)
: QObject(parent) {
    m_adaptor = new DictsInterfaceAdaptor(this);
}

DictsInterfaceAdaptor::DictsInterfaceAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {

}

void DictsInterface::connect(){
    if (m_connection != nullptr) {
        return;
    }
    m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "com.yarpc.testservice"));
    bool success = m_connection->isConnected();
    if (success) {
        success = success && m_connection->registerService("com.yarpc.testservice");
        success = success && m_connection->registerObject(
            "/com/yarpc/testservice",
            "com.yarpc.testservice.dicts",
            this
        );
        if (!success) {
            m_connection->disconnectFromBus("com.yarpc.testservice");
        }
    }
    if (!success) {
        m_connection = nullptr;
    }
    emit connectedChanged();
}
void DictsInterface::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("com.yarpc.testservice");
    m_connection = nullptr;
    emit connectedChanged();
}

bool DictsInterface::getConnected() const {
    return m_connection != nullptr;
}

void DictsInterfaceAdaptor::DictMethod(const QDBusMessage &message){
    auto iface = dynamic_cast<DictsInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleDictMethodCalled(message);
    }
}

DictMethodPendingReply::DictMethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = DictMethodArgs{};
}

DictMethodArgs* DictMethodPendingReply::args() {
    return &m_args;
}

void DictMethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<DictsInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void DictMethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<DictsInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void DictMethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<DictsInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void DictsInterface::handleDictMethodCalled(QDBusMessage call) {
    auto reply = new DictMethodPendingReply(call, this);
    emit dictMethodCalled(reply);
}
void DictsInterface::EmitDictSignal(){
    emit m_adaptor->DictSignal();
}

void DictsInterface::callFinished(const QDBusMessage &reply)
{
    m_connection->send(reply);
}