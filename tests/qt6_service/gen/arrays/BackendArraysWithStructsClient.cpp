/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.2_arrays_with_structs.yml
 *   Object: ArraysWithStructs
 *   Template: qt6/client_source.j2
 */
#include "BackendArraysWithStructsClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace gen::arrays;

BackendArraysWithStructsClient::BackendArraysWithStructsClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arraysWithStructs",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendArraysWithStructsClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendArraysWithStructsClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arraysWithStructs",
        "ArrayStructSignal",
        this,
        SLOT(ArrayStructSignalDBusHandler(QDBusMessage))
    );

}

bool BackendArraysWithStructsClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendArraysWithStructsClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.arraysWithStructs"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendArraysWithStructsClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendArraysWithStructsClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendArraysWithStructsClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.arraysWithStructs") {
        return;
    }
    if (changes.contains("ArrayStructProperty")) {
        emit arrayStructPropertyChanged();
    }
}

ArrayStructMethodPendingCall* BackendArraysWithStructsClient::ArrayStructMethod(
    QList<$1> numbers
) {
    QDBusArgument dbusnumbers;
    dbusnumbers << numbers;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arraysWithStructs",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "ArrayStructMethod",
        QVariant::fromValue(dbusnumbers)
    )};
    return new ArrayStructMethodPendingCall(pendingCall, this);
}

ArrayStructMethodPendingCall::ArrayStructMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &ArrayStructMethodPendingCall::callFinished
    );
}

void ArrayStructMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QList<$1>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}


void BackendArraysWithStructsClient::ArrayStructSignalDBusHandler(QDBusMessage content) {
    emit arrayStructSignalReceived(
        content.arguments()[0].value<QList<$1>>()
    );
}


QList<$1> BackendArraysWithStructsClient::getArrayStructProperty() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arraysWithStructs",
        QDBusConnection::sessionBus()
    );
    return iface.property("ArrayStructProperty").value<QList<$1>>();
}

void BackendArraysWithStructsClient::setArrayStructProperty(const QList<$1> &newValue) {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arraysWithStructs",
        QDBusConnection::sessionBus()
    );
    iface.setProperty("ArrayStructProperty", newValue);
}
