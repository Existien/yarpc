/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.2_arrays_with_structs.yml
 *   Object: ArraysWithStructs
 *   Template: qt6/client_header.j2
 */
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include "DBusError.hpp"
#include <QDBusServiceWatcher>
#include <QDBusPendingCallWatcher>
namespace gen::arrays {

/**
 * @brief Pending call object for the Bump method calls.
 */
class ArrayStructMethodPendingCall : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    ArrayStructMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent);
signals:
    /**
     * @brief Emitted when an ArrayStructMethod call returns.
     */
    void finished();

    /**
     * @brief Emitted when an error ocurred during an ArrayStructMethod call.
     *
     * @param error the error
     */
    void error(DBusError error);
private slots:
    void callFinished(QDBusPendingCallWatcher *watcher);
private:
    QDBusPendingCallWatcher m_watcher;
};

/**
 * D-Bus client for the com.yarpc.backend.arraysWithStructs D-Bus interface
 */
class BackendArraysWithStructsClient : public QObject {
    Q_OBJECT
    QML_ELEMENT
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:
    BackendArraysWithStructsClient(QObject* parent = nullptr);

public slots:
    /**
     * @brief Returns whether the target service is available.
     * @returns Whether the target service is available.
     */
    bool getConnected() const;


    /**
     * @brief a simple method with one argument
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    ArrayStructMethodPendingCall* ArrayStructMethod();

signals:
    /**
     * @brief Emitted when the connected property changes.
     */
    void connectedChanged();

    /**
     * @brief a simple signal with one argument
     */
    void arrayStructSignalReceived();

private slots:
    void connectedHandler(const QString& service);
    void disconnectedHandler(const QString& service);
    void ArrayStructSignalDBusHandler(QDBusMessage content);
private:
    bool m_connected = false;
    QDBusServiceWatcher m_watcher;
};

}