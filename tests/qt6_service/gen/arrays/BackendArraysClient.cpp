/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.1_arrays.yml
 *   Object: Arrays
 *   Template: qt6/client_source.j2
 */
#include "BackendArraysClient.hpp"
#include "types.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>


using namespace gen::arrays;
using namespace BackendArraysClientUtils;

BackendArraysClient::BackendArraysClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{
    registerMetaTypes();
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arrays",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendArraysClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendArraysClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arrays",
        "ArraySignal",
        this,
        SLOT(ArraySignalDBusHandler(QDBusMessage))
    );

}

bool BackendArraysClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendArraysClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.arrays"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendArraysClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendArraysClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendArraysClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.arrays") {
        return;
    }
    if (changes.contains("ArrayProperty")) {
        emit arrayPropertyChanged();
    }
}

ArrayMethodPendingCall* BackendArraysClient::ArrayMethod(
    QVariant numbers
) {
    QList<QList<uint>> arg_0;
    for (auto& item_0 : numbers.value<QVariantList>()) {
        QList<uint> o_0;
        for (auto& item_1 : item_0.value<QVariantList>()) {
            uint o_1;
            o_1 = item_1.value<uint>();

            o_0.push_back(o_1);
        }

        arg_0.push_back(o_0);
    }

    return ArrayMethod(
        arg_0
    );
}
ArrayMethodPendingCall* BackendArraysClient::ArrayMethod(
    QList<QList<uint>> numbers
) {
    QDBusArgument dbusnumbers;
    dbusnumbers << static_cast<QList<QList<uint>>>(numbers);
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "com.yarpc.backend.arrays",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "ArrayMethod",
        QVariant::fromValue(dbusnumbers)
    )};
    return new ArrayMethodPendingCall(pendingCall, this);
}

ArrayMethodPendingCall::ArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &ArrayMethodPendingCall::callFinished
    );
}

void ArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<QList<QList<double>>> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        QList<QList<double>> finishedReply = reply;
        emit finished(static_cast<QList<QList<double>>>(finishedReply));
    }
    deleteLater();
}


void BackendArraysClient::ArraySignalDBusHandler(QDBusMessage content) {
    QList<QList<double>> arg_0;
    content.arguments()[0].value<QDBusArgument>() >> arg_0;
    emit arraySignalReceived(
        QVariant::fromValue(arg_0)
    );
}


QList<QList<QString>> BackendArraysClient::getArrayProperty() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "com.yarpc.backend.arrays",
        "ArrayProperty"
    );
    QList<QList<QString>> unmarshalled{};
    if (reply.isValid()) {
        auto marshalled = qvariant_cast<QDBusArgument>(reply.value().variant());
        marshalled >> unmarshalled;
    }
    return unmarshalled;
}


QVariant BackendArraysClient::getVariantArrayProperty() const {
    auto unmarshalled = getArrayProperty();
    QVariant marshalled;
    QList<QVariant> list_0;
    for (auto& item_0 : unmarshalled) {
        QVariant o_0;
        QList<QVariant> list_1;
        for (auto& item_1 : item_0) {
            QVariant o_1;
            o_1 = QVariant::fromValue(item_1);

            list_1.push_back(o_1);
        }
        o_0 = QVariant::fromValue(list_1);

        list_0.push_back(o_0);
    }
    marshalled = QVariant::fromValue(list_0);

    return marshalled;
}


void BackendArraysClient::setArrayProperty(const QList<QList<QString>> &newValue) {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/arrays",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusArgument marshalled;
    QDBusVariant v;
    v.setVariant(QVariant::fromValue(static_cast<QList<QList<QString>>>(newValue)));
    marshalled << v;
    iface.call(
        "Set",
        "com.yarpc.backend.arrays",
        "ArrayProperty",
        QVariant::fromValue<QDBusArgument>(marshalled)
    );
}

void BackendArraysClient::setVariantArrayProperty(QVariant value ) {
    QList<QList<QString>> unmarshalled;
    for (auto& item_0 : value.value<QVariantList>()) {
        QList<QString> o_0;
        for (auto& item_1 : item_0.value<QVariantList>()) {
            QString o_1;
            o_1 = item_1.value<QString>();

            o_0.push_back(o_1);
        }

        unmarshalled.push_back(o_0);
    }

    setArrayProperty(unmarshalled);
}
