/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.1_arrays.yml
 *   Object: Arrays
 *   Template: qt6/client_source.j2
 */
#include "BackendArraysClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace gen::arrays;

BackendArraysClient::BackendArraysClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.arrays",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendArraysClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendArraysClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.arrays",
        "ArraySignal",
        this,
        SLOT(ArraySignalDBusHandler(QDBusMessage))
    );

}

bool BackendArraysClient::getConnected() const {
    return m_connected;
}

void BackendArraysClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendArraysClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

ArrayMethodPendingCall* BackendArraysClient::ArrayMethod() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.arrays",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "ArrayMethod"
    )};
    return new ArrayMethodPendingCall(pendingCall, this);
}

ArrayMethodPendingCall::ArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &ArrayMethodPendingCall::callFinished
    );
}

void ArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}


void BackendArraysClient::ArraySignalDBusHandler(QDBusMessage content) {
    emit arraySignalReceived();
}

