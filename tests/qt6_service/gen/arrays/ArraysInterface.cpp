/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.1_arrays.yml
 *   Object: Arrays
 *   Template: qt6/service_source.j2
 */
#include "ArraysInterface.hpp"
#include "ArraysInterfaceAdaptor.hpp"
#include "Connection.hpp"
#include <QMetaType>
#include <QDBusMetaType>

using namespace gen::arrays;

ArraysInterface::ArraysInterface(QObject* parent)
: QObject(parent) {
    qRegisterMetaType<StructArray>("StructArray");
    qDBusRegisterMetaType<StructArray>();
    qRegisterMetaType<SimonsArray>("SimonsArray");
    qDBusRegisterMetaType<SimonsArray>();
    QObject::connect(
        &Connection::instance(),
        &Connection::connectedChanged,
        this,
        &ArraysInterface::connectedChanged
    );
    QObject::connect(
        &Connection::instance(),
        &Connection::registrationChanged,
        this,
        &ArraysInterface::connectedChanged
    );
}

void ArraysInterface::connect() {
    Connection::instance().registerArrays(this);
}

void ArraysInterface::disconnect() {
    Connection::instance().unregisterArrays();
}

void ArraysInterface::finishCall(const QDBusMessage &reply)
{
    Connection::instance().send(reply);
}

bool ArraysInterface::getConnected() const {
    return (
        Connection::instance().getConnected()
        && Connection::instance().isArraysRegistered()
    );
}

ArrayMethodPendingReply::ArrayMethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = ArrayMethodArgs{
        .numbers = m_call.arguments()[0].value<QList<$1>>(),
    };
}

ArrayMethodArgs ArrayMethodPendingReply::args() {
    return m_args;
}

void ArrayMethodPendingReply::sendReply(
    const QList<$1> &reply
) {
    auto dbusReply = m_call.createReply(QVariant::fromValue(reply));
    auto iface = dynamic_cast<ArraysInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(dbusReply);
    }
    deleteLater();
}

void ArrayMethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<ArraysInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void ArrayMethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<ArraysInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void ArraysInterface::handleArrayMethodCalled(QDBusMessage call) {
    auto reply = new ArrayMethodPendingReply(call, this);
    emit arrayMethodCalled(reply);
}

void ArraysInterface::EmitArraySignal(
    QList<$1> numbers
) {
    if (Connection::instance().Arrays() != nullptr ) {
        emit Connection::instance().Arrays()->ArraySignal(
            numbers
        );
    }
}

QList<$1> ArraysInterface::getArrayProperty() const {
    return m_ArrayProperty;
}

void ArraysInterface::setArrayProperty(const QList<$1> &value ) {
    m_ArrayProperty = value;
    emit arrayPropertyChanged();
    if (Connection::instance().Arrays() != nullptr ) {
        QVariantMap changedProps;
        changedProps.insert("ArrayProperty", QVariant::fromValue(value));
        emitPropertiesChangedSignal(changedProps);
    }
}


void ArraysInterface::emitPropertiesChangedSignal(const QVariantMap &changedProps) {
    auto signal = QDBusMessage::createSignal(
        "/com/yarpc/testservice/arrays",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged"
    );
    signal << "com.yarpc.testservice.arrays";
    signal << changedProps;
    signal << QStringList{};
    Connection::instance().send(signal);
}