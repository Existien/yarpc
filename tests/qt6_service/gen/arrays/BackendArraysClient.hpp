/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/04.1_arrays.yml
 *   Object: Arrays
 *   Template: qt6/client_header.j2
 */
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include <QDBusServiceWatcher>
#include <QDBusPendingCallWatcher>
#include <QVariant>
#include "DBusError.hpp"
#include "StructArray.hpp"
#include "SimonsArray.hpp"
#include "types.hpp"
namespace gen::arrays {

/**
 * @brief Pending call object for the ArrayMethod method calls.
 */
class ArrayMethodPendingCall : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    ArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent);
signals:
    /**
     * @brief Emitted when an ArrayMethod call returns.
     *
     * @param normalized numbers
     */
    void finished(const QList<QList<double>> &reply);

    /**
     * @brief Emitted when an error ocurred during an ArrayMethod call.
     *
     * @param error the error
     */
    void error(DBusError error);
private slots:
    void callFinished(QDBusPendingCallWatcher *watcher);
private:
    QDBusPendingCallWatcher m_watcher;
};

/**
 * D-Bus client for the com.yarpc.backend.arrays D-Bus interface
 */
class BackendArraysClient : public QObject {
    Q_OBJECT
    QML_ELEMENT
    /**
     * @brief Whether the client is connected.
     */
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
    /**
     * @brief a simple property
     */
    Q_PROPERTY(QVariant arrayProperty READ getVariantArrayProperty WRITE setVariantArrayProperty NOTIFY arrayPropertyChanged)

public:
    BackendArraysClient(QObject* parent = nullptr);

    /**
     * @brief a simple method with one argument
     *
     * @param numbers Some numbers
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    ArrayMethodPendingCall* ArrayMethod(
        QList<QList<uint>> numbers
    );

    /**
     * @brief Getter for the ArrayProperty property.
     *
     * @returns the current value of the property
     *
     * a simple property
     */
    QList<QList<QString>> getArrayProperty() const;

    /**
     * @brief Setter for the ArrayProperty property.
     *
     * @param newValue the new value of the property
     *
     * a simple property
     */
    void setArrayProperty(const QList<QList<QString>> &newValue);

public slots:
    /**
     * @brief Returns whether the target service is available.
     *
     * @returns Whether the target service is available.
     */
    bool getConnected() const;

    /**
     * @brief Returns a map containing the current values of all properties.
     *
     * @returns a map containing the current values of all properties
     */
    QVariantMap getAllProperties() const;

    /**
     * @brief a simple method with one argument
     *
     * @param numbers Some numbers
     *
     * @returns Pending call object with finished signal containing the reply.
     */
    ArrayMethodPendingCall* ArrayMethod(
        QVariant numbers
    );

signals:
    /**
     * @brief Emitted when the connected property changes.
     */
    void connectedChanged();

    /**
     * @brief a simple signal with one argument
     *
     * @param numbers normalized numbers
     */
    void arraySignalReceived(
        QVariant numbers
    );

    /**
     * @brief Changed signal for the ArrayProperty property.
     *
     * a simple property
     */
    void arrayPropertyChanged();

private slots:
    void connectedHandler(const QString& service);
    void disconnectedHandler(const QString& service);
    void propertiesChangedHandler(QString interface, QVariantMap changes, QStringList);
    void ArraySignalDBusHandler(QDBusMessage content);

    /**
     * @brief Getter for the ArrayProperty property as variant.
     *
     * @returns the current value of the property as variant
     *
     * a simple property
     */
    QVariant getVariantArrayProperty() const;

    /**
     * @brief Setter for the ArrayProperty property as variant.
     *
     * @param newValue the new value of the property wrapped in a variant
     *
     * a simple property
     */
    void setVariantArrayProperty(QVariant newValue);
private:
    bool m_connected = false;
    QDBusServiceWatcher m_watcher;
};

}