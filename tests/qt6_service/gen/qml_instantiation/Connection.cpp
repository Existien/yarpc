/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/07_qml_instantiation.yml
 *   Template: qt6/object_path_source.j2
 */
#include "Connection.hpp"
#include "QmlAsServiceInterface.hpp"

using namespace gen::qml_instantiation;


QmlInstantiationTestserviceYarpcComObjectPath::QmlInstantiationTestserviceYarpcComObjectPath(QObject *parent) : QObject(parent) {
}

bool QmlInstantiationTestserviceYarpcComObjectPath::hasRegistrations() const {
    return (
        false
        || m_qmlAsService != nullptr
    );
}


Connection::Connection() : QObject(nullptr) {}

Connection& Connection::instance() {
    static Connection object{};
    return object;
}

void Connection::connect() {
    bool hasChanged = false;
    if (m_connection == nullptr) {
        m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "com.yarpc.testservice"));
        if ( m_connection->isConnected()) {
            m_connection->registerService("com.yarpc.testservice");
            hasChanged = true;
        }
    }

    if (hasChanged) {
        emit connectedChanged();
    }
}

void Connection::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("com.yarpc.testservice");
    m_connection = nullptr;
    emit connectedChanged();
}

void Connection::disconnectIfUnused(){
    if (
        false
        || m_QmlAsService != nullptr
    ) {
        return;
    }
    disconnect();
}

void Connection::updateRegistrations() {
    if (m_connection != nullptr && m_connection->isConnected()) {
        m_connection->unregisterObject("/com/yarpc/testservice/qmlInstantiation");
        m_QmlInstantiationTestserviceYarpcComObjectPath.reset(new QmlInstantiationTestserviceYarpcComObjectPath(this));
        if (m_QmlAsService != nullptr) {
            auto qmlAsServiceInterface = dynamic_cast<QmlAsServiceInterface*>(m_QmlAsService);
            m_QmlInstantiationTestserviceYarpcComObjectPath->m_qmlAsService = new QmlAsServiceInterfaceAdaptor(
                qmlAsServiceInterface,
                m_QmlInstantiationTestserviceYarpcComObjectPath.get()
            );
        }
        if (
            false
            || m_QmlAsService != nullptr
        ) {
            m_connection->registerObject(
                "/com/yarpc/testservice/qmlInstantiation",
                m_QmlInstantiationTestserviceYarpcComObjectPath.get()
            );
        }
        emit registrationChanged();
    }
}

bool Connection::getConnected() const {
    return m_connection != nullptr;
}

void Connection::send(const QDBusMessage &message) {
    if (m_connection == nullptr) {
        qDebug() << "Sending message failed: No connection";
        return;
    }
    m_connection->send(message);
}

void Connection::registerQmlAsService(QObject* interface) {
    if (m_QmlAsService == nullptr) {
        auto qmlAsServiceInterface = dynamic_cast<QmlAsServiceInterface*>(interface);
        if (qmlAsServiceInterface != nullptr) {
            m_QmlAsService = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterQmlAsService() {
    if (m_QmlAsService != nullptr) {
        m_QmlAsService = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isQmlAsServiceRegistered() const {
    return (m_QmlAsService != nullptr);
}

QmlAsServiceInterfaceAdaptor* Connection::QmlAsService() {
    if (m_QmlInstantiationTestserviceYarpcComObjectPath != nullptr) {
        return m_QmlInstantiationTestserviceYarpcComObjectPath->m_qmlAsService;
    } else {
        return nullptr;
    }
}

