/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/07_qml_instantiation.yml
 *   Object: QmlAsClient
 *   Template: qt6/client_source.j2
 */
#include "QmlAsClient.hpp"
#include "types.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>


using namespace gen::qml_instantiation;
using namespace QmlAsClientUtils;

QmlAsClient::QmlAsClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{
    registerMetaTypes();
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &QmlAsClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &QmlAsClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );

}

bool QmlAsClient::getConnected() const {
    return m_connected;
}

QVariantMap QmlAsClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.qmlInstantiation"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void QmlAsClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void QmlAsClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void QmlAsClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.qmlInstantiation") {
        return;
    }
}

PassStructMethodPendingCall* QmlAsClient::PassStructMethod(
    QVariant qmlStruct
) {
    QmlStruct arg_0;
    arg_0 = qmlStruct.value<QmlStruct>();

    return PassStructMethod(
        arg_0
    );
}
PassStructMethodPendingCall* QmlAsClient::PassStructMethod(
    QmlStruct qmlStruct
) {
    QDBusArgument dbusqmlStruct;
    dbusqmlStruct << qmlStruct;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassStructMethod",
        QVariant::fromValue(dbusqmlStruct)
    )};
    return new PassStructMethodPendingCall(pendingCall, this);
}

PassStructMethodPendingCall::PassStructMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassStructMethodPendingCall::callFinished
    );
}

void PassStructMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassArrayInArrayMethodPendingCall* QmlAsClient::PassArrayInArrayMethod(
    QVariant listOfLists
) {
    QList<QList<uint>> arg_0;
    for (auto& item_0 : listOfLists.value<QVariantList>()) {
        QList<uint> o_0;
        for (auto& item_1 : item_0.value<QVariantList>()) {
            uint o_1;
            o_1 = item_1.value<uint>();

            o_0.push_back(o_1);
        }

        arg_0.push_back(o_0);
    }

    return PassArrayInArrayMethod(
        arg_0
    );
}
PassArrayInArrayMethodPendingCall* QmlAsClient::PassArrayInArrayMethod(
    QList<QList<uint>> listOfLists
) {
    QDBusArgument dbuslistOfLists;
    dbuslistOfLists << listOfLists;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassArrayInArrayMethod",
        QVariant::fromValue(dbuslistOfLists)
    )};
    return new PassArrayInArrayMethodPendingCall(pendingCall, this);
}

PassArrayInArrayMethodPendingCall::PassArrayInArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassArrayInArrayMethodPendingCall::callFinished
    );
}

void PassArrayInArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassStructsInArrayMethodPendingCall* QmlAsClient::PassStructsInArrayMethod(
    QVariant listOfStructs
) {
    QList<QmlStruct> arg_0;
    for (auto& item_0 : listOfStructs.value<QVariantList>()) {
        QmlStruct o_0;
        o_0 = item_0.value<QmlStruct>();

        arg_0.push_back(o_0);
    }

    return PassStructsInArrayMethod(
        arg_0
    );
}
PassStructsInArrayMethodPendingCall* QmlAsClient::PassStructsInArrayMethod(
    QList<QmlStruct> listOfStructs
) {
    QDBusArgument dbuslistOfStructs;
    dbuslistOfStructs << listOfStructs;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassStructsInArrayMethod",
        QVariant::fromValue(dbuslistOfStructs)
    )};
    return new PassStructsInArrayMethodPendingCall(pendingCall, this);
}

PassStructsInArrayMethodPendingCall::PassStructsInArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassStructsInArrayMethodPendingCall::callFinished
    );
}

void PassStructsInArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictWithStringsMethodPendingCall* QmlAsClient::PassDictWithStringsMethod(
    QVariant dictWithStrings
) {
    QMap<QString, QString> arg_0;
    arg_0 = dictWithStrings.value<QMap<QString, QString>>();

    return PassDictWithStringsMethod(
        arg_0
    );
}
PassDictWithStringsMethodPendingCall* QmlAsClient::PassDictWithStringsMethod(
    QMap<QString, QString> dictWithStrings
) {
    QDBusArgument dbusdictWithStrings;
    dbusdictWithStrings << dictWithStrings;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictWithStringsMethod",
        QVariant::fromValue(dbusdictWithStrings)
    )};
    return new PassDictWithStringsMethodPendingCall(pendingCall, this);
}

PassDictWithStringsMethodPendingCall::PassDictWithStringsMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictWithStringsMethodPendingCall::callFinished
    );
}

void PassDictWithStringsMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictWithNumbersMethodPendingCall* QmlAsClient::PassDictWithNumbersMethod(
    QVariant dictWithNumbers
) {
    QMap<uint, QString> arg_0;
    arg_0 = dictWithNumbers.value<QMap<uint, QString>>();

    return PassDictWithNumbersMethod(
        arg_0
    );
}
PassDictWithNumbersMethodPendingCall* QmlAsClient::PassDictWithNumbersMethod(
    QMap<uint, QString> dictWithNumbers
) {
    QDBusArgument dbusdictWithNumbers;
    dbusdictWithNumbers << dictWithNumbers;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictWithNumbersMethod",
        QVariant::fromValue(dbusdictWithNumbers)
    )};
    return new PassDictWithNumbersMethodPendingCall(pendingCall, this);
}

PassDictWithNumbersMethodPendingCall::PassDictWithNumbersMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictWithNumbersMethodPendingCall::callFinished
    );
}

void PassDictWithNumbersMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictWithStructsMethodPendingCall* QmlAsClient::PassDictWithStructsMethod(
    QVariant dictWithStructs
) {
    QMap<QString, QmlStruct> arg_0;
    arg_0 = dictWithStructs.value<QMap<QString, QmlStruct>>();

    return PassDictWithStructsMethod(
        arg_0
    );
}
PassDictWithStructsMethodPendingCall* QmlAsClient::PassDictWithStructsMethod(
    QMap<QString, QmlStruct> dictWithStructs
) {
    QDBusArgument dbusdictWithStructs;
    dbusdictWithStructs << dictWithStructs;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictWithStructsMethod",
        QVariant::fromValue(dbusdictWithStructs)
    )};
    return new PassDictWithStructsMethodPendingCall(pendingCall, this);
}

PassDictWithStructsMethodPendingCall::PassDictWithStructsMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictWithStructsMethodPendingCall::callFinished
    );
}

void PassDictWithStructsMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictInArrayMethodPendingCall* QmlAsClient::PassDictInArrayMethod(
    QVariant listOfDicts
) {
    QList<QMap<QString, QString>> arg_0;
    for (auto& item_0 : listOfDicts.value<QVariantList>()) {
        QMap<QString, QString> o_0;
        o_0 = item_0.value<QMap<QString, QString>>();

        arg_0.push_back(o_0);
    }

    return PassDictInArrayMethod(
        arg_0
    );
}
PassDictInArrayMethodPendingCall* QmlAsClient::PassDictInArrayMethod(
    QList<QMap<QString, QString>> listOfDicts
) {
    QDBusArgument dbuslistOfDicts;
    dbuslistOfDicts << listOfDicts;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictInArrayMethod",
        QVariant::fromValue(dbuslistOfDicts)
    )};
    return new PassDictInArrayMethodPendingCall(pendingCall, this);
}

PassDictInArrayMethodPendingCall::PassDictInArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictInArrayMethodPendingCall::callFinished
    );
}

void PassDictInArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictInDictMethodPendingCall* QmlAsClient::PassDictInDictMethod(
    QVariant dictOfDicts
) {
    QMap<QString, QMap<QString, QString>> arg_0;
    arg_0 = dictOfDicts.value<QMap<QString, QMap<QString, QString>>>();

    return PassDictInDictMethod(
        arg_0
    );
}
PassDictInDictMethodPendingCall* QmlAsClient::PassDictInDictMethod(
    QMap<QString, QMap<QString, QString>> dictOfDicts
) {
    QDBusArgument dbusdictOfDicts;
    dbusdictOfDicts << dictOfDicts;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictInDictMethod",
        QVariant::fromValue(dbusdictOfDicts)
    )};
    return new PassDictInDictMethodPendingCall(pendingCall, this);
}

PassDictInDictMethodPendingCall::PassDictInDictMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictInDictMethodPendingCall::callFinished
    );
}

void PassDictInDictMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassArrayInDictMethodPendingCall* QmlAsClient::PassArrayInDictMethod(
    QVariant dictOfLists
) {
    QMap<QString, QList<QString>> arg_0;
    arg_0 = dictOfLists.value<QMap<QString, QList<QString>>>();

    return PassArrayInDictMethod(
        arg_0
    );
}
PassArrayInDictMethodPendingCall* QmlAsClient::PassArrayInDictMethod(
    QMap<QString, QList<QString>> dictOfLists
) {
    QDBusArgument dbusdictOfLists;
    dbusdictOfLists << dictOfLists;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassArrayInDictMethod",
        QVariant::fromValue(dbusdictOfLists)
    )};
    return new PassArrayInDictMethodPendingCall(pendingCall, this);
}

PassArrayInDictMethodPendingCall::PassArrayInDictMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassArrayInDictMethodPendingCall::callFinished
    );
}

void PassArrayInDictMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictInArrayInDictMethodPendingCall* QmlAsClient::PassDictInArrayInDictMethod(
    QVariant dictOfListsOfDicts
) {
    QMap<QString, QList<QMap<QString, QString>>> arg_0;
    arg_0 = dictOfListsOfDicts.value<QMap<QString, QList<QMap<QString, QString>>>>();

    return PassDictInArrayInDictMethod(
        arg_0
    );
}
PassDictInArrayInDictMethodPendingCall* QmlAsClient::PassDictInArrayInDictMethod(
    QMap<QString, QList<QMap<QString, QString>>> dictOfListsOfDicts
) {
    QDBusArgument dbusdictOfListsOfDicts;
    dbusdictOfListsOfDicts << dictOfListsOfDicts;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictInArrayInDictMethod",
        QVariant::fromValue(dbusdictOfListsOfDicts)
    )};
    return new PassDictInArrayInDictMethodPendingCall(pendingCall, this);
}

PassDictInArrayInDictMethodPendingCall::PassDictInArrayInDictMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictInArrayInDictMethodPendingCall::callFinished
    );
}

void PassDictInArrayInDictMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

PassDictInArrayInArrayMethodPendingCall* QmlAsClient::PassDictInArrayInArrayMethod(
    QVariant listOfListsOfDicts
) {
    QList<QList<QMap<QString, QString>>> arg_0;
    for (auto& item_0 : listOfListsOfDicts.value<QVariantList>()) {
        QList<QMap<QString, QString>> o_0;
        for (auto& item_1 : item_0.value<QVariantList>()) {
            QMap<QString, QString> o_1;
            o_1 = item_1.value<QMap<QString, QString>>();

            o_0.push_back(o_1);
        }

        arg_0.push_back(o_0);
    }

    return PassDictInArrayInArrayMethod(
        arg_0
    );
}
PassDictInArrayInArrayMethodPendingCall* QmlAsClient::PassDictInArrayInArrayMethod(
    QList<QList<QMap<QString, QString>>> listOfListsOfDicts
) {
    QDBusArgument dbuslistOfListsOfDicts;
    dbuslistOfListsOfDicts << listOfListsOfDicts;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/qmlInstantiation",
        "com.yarpc.backend.qmlInstantiation",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "PassDictInArrayInArrayMethod",
        QVariant::fromValue(dbuslistOfListsOfDicts)
    )};
    return new PassDictInArrayInArrayMethodPendingCall(pendingCall, this);
}

PassDictInArrayInArrayMethodPendingCall::PassDictInArrayInArrayMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &PassDictInArrayInArrayMethodPendingCall::callFinished
    );
}

void PassDictInArrayInArrayMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

