/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/07_qml_instantiation.yml
 *   Object: QmlAsService
 *   Template: qt6/service_header.j2
 */
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusMessage>
#include <QVariant>
#include "DBusError.hpp"
#include "QmlStruct.hpp"
#include "types.hpp"
namespace gen::qml_instantiation {

namespace QmlAsServiceInterfaceUtils {

/**
 * @brief The arguments passed during a PassStructMethod call.
 */
class PassStructMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassStructMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassStructMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassStructMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QmlStruct &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassStructMethod call.
     *
     * @returns the arguments of the call
     */
    PassStructMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassStructMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassArrayInArrayMethod call.
 */
class PassArrayInArrayMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassArrayInArrayMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassArrayInArrayMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassArrayInArrayMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QList<QList<uint>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassArrayInArrayMethod call.
     *
     * @returns the arguments of the call
     */
    PassArrayInArrayMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassArrayInArrayMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassStructsInArrayMethod call.
 */
class PassStructsInArrayMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassStructsInArrayMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassStructsInArrayMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassStructsInArrayMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QList<QmlStruct> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassStructsInArrayMethod call.
     *
     * @returns the arguments of the call
     */
    PassStructsInArrayMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassStructsInArrayMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictWithStringsMethod call.
 */
class PassDictWithStringsMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictWithStringsMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictWithStringsMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictWithStringsMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<QString, QString> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictWithStringsMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictWithStringsMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictWithStringsMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictWithNumbersMethod call.
 */
class PassDictWithNumbersMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictWithNumbersMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictWithNumbersMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictWithNumbersMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<uint, QString> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictWithNumbersMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictWithNumbersMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictWithNumbersMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictWithStructsMethod call.
 */
class PassDictWithStructsMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictWithStructsMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictWithStructsMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictWithStructsMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<QString, QmlStruct> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictWithStructsMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictWithStructsMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictWithStructsMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictInArrayMethod call.
 */
class PassDictInArrayMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictInArrayMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictInArrayMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictInArrayMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QList<QMap<QString, QString>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictInArrayMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictInArrayMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictInArrayMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictInDictMethod call.
 */
class PassDictInDictMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictInDictMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictInDictMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictInDictMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<QString, QMap<QString, QString>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictInDictMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictInDictMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictInDictMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassArrayInDictMethod call.
 */
class PassArrayInDictMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassArrayInDictMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassArrayInDictMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassArrayInDictMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<QString, QList<QString>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassArrayInDictMethod call.
     *
     * @returns the arguments of the call
     */
    PassArrayInDictMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassArrayInDictMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictInArrayInDictMethod call.
 */
class PassDictInArrayInDictMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictInArrayInDictMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictInArrayInDictMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictInArrayInDictMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QMap<QString, QList<QMap<QString, QString>>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictInArrayInDictMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictInArrayInDictMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictInArrayInDictMethodArgs m_args;
};

/**
 * @brief The arguments passed during a PassDictInArrayInArrayMethod call.
 */
class PassDictInArrayInArrayMethodArgs {
    Q_GADGET
public:
};

/**
 * @brief A pending reply to a PassDictInArrayInArrayMethod call.
 *
 * Use the sendReply or sendError methods to send the pending reply.
 */
class PassDictInArrayInArrayMethodPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    PassDictInArrayInArrayMethodPendingReply(QDBusMessage call, QObject *parent);

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        const QList<QList<QMap<QString, QString>>> &reply
    );
public slots:
    /**
     * @brief Returns the arguments passed during a PassDictInArrayInArrayMethod call.
     *
     * @returns the arguments of the call
     */
    PassDictInArrayInArrayMethodArgs args();

    /**
     * @brief Send a reply to the pending call.
     *
     * @param reply the return value of the call
     */
    void sendReply(
        QVariant reply
    );

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param name the name of the error
     *   (needs to be in the form of a D-Bus URI, e.g. "com.yarpc.testservice.qmlInstantiation.OutOfCheeseError")
     * @param message the error message
     */
    void sendError(const QString &name, const QString &message);

    /**
     * @brief Send an error in reply to the pending call.
     *
     * @param error the D-Bus error to send
     */
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    PassDictInArrayInArrayMethodArgs m_args;
};

}

/**
 * @brief Interface to test returning values and signal arguments instantiated in QML
 */
class QmlAsServiceInterface : public QObject {
    Q_OBJECT
    QML_ELEMENT
    QML_SINGLETON

    /** @brief Whether the interface is registered and connected */
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged )

public:
    QmlAsServiceInterface(QObject* parent = nullptr);

    /**
     * @brief Finishes a pending call by sending a reply.
     *
     * @param reply the reply to send
     */
    void finishCall(const QDBusMessage &reply);

    /**
     * @brief Returns whether the interface is registered and connected
     *
     * @returns whether the interface is registered and connected
     */
    bool getConnected() const;

    /**
     * @brief Handler for PassStructMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassStructMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassArrayInArrayMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassArrayInArrayMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassStructsInArrayMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassStructsInArrayMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictWithStringsMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictWithStringsMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictWithNumbersMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictWithNumbersMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictWithStructsMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictWithStructsMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictInArrayMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictInArrayMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictInDictMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictInDictMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassArrayInDictMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassArrayInDictMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictInArrayInDictMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictInArrayInDictMethodCalled(QDBusMessage call);

    /**
     * @brief Handler for PassDictInArrayInArrayMethod D-Bus calls.
     *
     * @param call the D-Bus call object
     */
    void handlePassDictInArrayInArrayMethodCalled(QDBusMessage call);


    /**
     * @brief pass struct
     *
     * @param qmlStruct the struct
     */
    void EmitPassStructSignal(
        QmlStruct qmlStruct
    );

    /**
     * @brief pass nested arrays
     *
     * @param listOfLists the nested array
     */
    void EmitPassArrayInArraySignal(
        QList<QList<uint>> listOfLists
    );

    /**
     * @brief pass structs in array
     *
     * @param listOfStructs list of structs
     */
    void EmitPassStructsInArraySignal(
        QList<QmlStruct> listOfStructs
    );

    /**
     * @brief pass a dict with strings as keys
     *
     * @param dictWithStrings dict with string as keys
     */
    void EmitPassDictWithStringsSignal(
        QMap<QString, QString> dictWithStrings
    );

    /**
     * @brief pass a dict with numbers as keys
     *
     * @param dictWithNumbers dict with numbers as keys
     */
    void EmitPassDictWithNumbersSignal(
        QMap<uint, QString> dictWithNumbers
    );

    /**
     * @brief pass a dict with structs as values
     *
     * @param dictWithStructs dict with structs as values
     */
    void EmitPassDictWithStructsSignal(
        QMap<QString, QmlStruct> dictWithStructs
    );

    /**
     * @brief pass dict in array
     *
     * @param listOfDicts list of dicts
     */
    void EmitPassDictInArraySignal(
        QList<QMap<QString, QString>> listOfDicts
    );

    /**
     * @brief pass dict in dict
     *
     * @param dictOfDicts dict of dicts
     */
    void EmitPassDictInDictSignal(
        QMap<QString, QMap<QString, QString>> dictOfDicts
    );

    /**
     * @brief pass array in dict
     *
     * @param dictOfLists dict of lists
     */
    void EmitPassArrayInDictSignal(
        QMap<QString, QList<QString>> dictOfLists
    );

    /**
     * @brief pass dict in array in dict
     *
     * @param dictOfListsOfDicts dict of lists of dicts
     */
    void EmitPassDictInArrayInDictSignal(
        QMap<QString, QList<QMap<QString, QString>>> dictOfListsOfDicts
    );

    /**
     * @brief pass dict in array in array
     *
     * @param listOfListsOfDicts list of lists of dicts
     */
    void EmitPassDictInArrayInArraySignal(
        QList<QList<QMap<QString, QString>>> listOfListsOfDicts
    );


public slots:
    /** @brief Registeres and connects the interface. */
    void connect();

    /** @brief Unregisteres and disconnects the interface. */
    void disconnect();

    /**
     * @brief pass struct
     *
     * @param qmlStruct the struct
     */
    void EmitPassStructSignal(
        QVariant qmlStruct
    );

    /**
     * @brief pass nested arrays
     *
     * @param listOfLists the nested array
     */
    void EmitPassArrayInArraySignal(
        QVariant listOfLists
    );

    /**
     * @brief pass structs in array
     *
     * @param listOfStructs list of structs
     */
    void EmitPassStructsInArraySignal(
        QVariant listOfStructs
    );

    /**
     * @brief pass a dict with strings as keys
     *
     * @param dictWithStrings dict with string as keys
     */
    void EmitPassDictWithStringsSignal(
        QVariant dictWithStrings
    );

    /**
     * @brief pass a dict with numbers as keys
     *
     * @param dictWithNumbers dict with numbers as keys
     */
    void EmitPassDictWithNumbersSignal(
        QVariant dictWithNumbers
    );

    /**
     * @brief pass a dict with structs as values
     *
     * @param dictWithStructs dict with structs as values
     */
    void EmitPassDictWithStructsSignal(
        QVariant dictWithStructs
    );

    /**
     * @brief pass dict in array
     *
     * @param listOfDicts list of dicts
     */
    void EmitPassDictInArraySignal(
        QVariant listOfDicts
    );

    /**
     * @brief pass dict in dict
     *
     * @param dictOfDicts dict of dicts
     */
    void EmitPassDictInDictSignal(
        QVariant dictOfDicts
    );

    /**
     * @brief pass array in dict
     *
     * @param dictOfLists dict of lists
     */
    void EmitPassArrayInDictSignal(
        QVariant dictOfLists
    );

    /**
     * @brief pass dict in array in dict
     *
     * @param dictOfListsOfDicts dict of lists of dicts
     */
    void EmitPassDictInArrayInDictSignal(
        QVariant dictOfListsOfDicts
    );

    /**
     * @brief pass dict in array in array
     *
     * @param listOfListsOfDicts list of lists of dicts
     */
    void EmitPassDictInArrayInArraySignal(
        QVariant listOfListsOfDicts
    );


private:


signals:
    /**
     * @brief Emitted when the connection status changes.
     */
    void connectedChanged();

    /**
     * @brief Emitted when a client calls the PassStructMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passStructMethodCalled(QmlAsServiceInterfaceUtils::PassStructMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassArrayInArrayMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passArrayInArrayMethodCalled(QmlAsServiceInterfaceUtils::PassArrayInArrayMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassStructsInArrayMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passStructsInArrayMethodCalled(QmlAsServiceInterfaceUtils::PassStructsInArrayMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictWithStringsMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictWithStringsMethodCalled(QmlAsServiceInterfaceUtils::PassDictWithStringsMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictWithNumbersMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictWithNumbersMethodCalled(QmlAsServiceInterfaceUtils::PassDictWithNumbersMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictWithStructsMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictWithStructsMethodCalled(QmlAsServiceInterfaceUtils::PassDictWithStructsMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictInArrayMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictInArrayMethodCalled(QmlAsServiceInterfaceUtils::PassDictInArrayMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictInDictMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictInDictMethodCalled(QmlAsServiceInterfaceUtils::PassDictInDictMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassArrayInDictMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passArrayInDictMethodCalled(QmlAsServiceInterfaceUtils::PassArrayInDictMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictInArrayInDictMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictInArrayInDictMethodCalled(QmlAsServiceInterfaceUtils::PassDictInArrayInDictMethodPendingReply* reply);

    /**
     * @brief Emitted when a client calls the PassDictInArrayInArrayMethod method.
     *
     * @param reply the reply object containing the call arguments and means to reply
     */
    void passDictInArrayInArrayMethodCalled(QmlAsServiceInterfaceUtils::PassDictInArrayInArrayMethodPendingReply* reply);


private:
    void emitPropertiesChangedSignal(const QVariantMap &changedProperties);
};

}