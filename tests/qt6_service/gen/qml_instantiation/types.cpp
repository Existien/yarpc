/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/07_qml_instantiation.yml
 *   Template: qt6/types_source.j2
 */
#include "types.hpp"
#include <QList>
#include <QDBusMetaType>

namespace gen::qml_instantiation {

void registerMetaTypes() {
    qRegisterMetaType<QmlStruct>("QmlStruct");
    qDBusRegisterMetaType<QmlStruct>();
    qRegisterMetaType<QList<QList<QMap<QString, QString>>>>("QList<QList<QMap<QString, QString>>>");
    qDBusRegisterMetaType<QList<QList<QMap<QString, QString>>>>();
    qRegisterMetaType<QList<QList<uint>>>("QList<QList<uint>>");
    qDBusRegisterMetaType<QList<QList<uint>>>();
    qRegisterMetaType<QList<QMap<QString, QString>>>("QList<QMap<QString, QString>>");
    qDBusRegisterMetaType<QList<QMap<QString, QString>>>();
    qRegisterMetaType<QList<QmlStruct>>("QList<QmlStruct>");
    qDBusRegisterMetaType<QList<QmlStruct>>();
    qRegisterMetaType<QList<QString>>("QList<QString>");
    qDBusRegisterMetaType<QList<QString>>();
    qRegisterMetaType<QList<uint>>("QList<uint>");
    qDBusRegisterMetaType<QList<uint>>();
    qRegisterMetaType<QMap<QmlEnum::Type, QmlEnum::Type>>("QMap<QmlEnum::Type, QmlEnum::Type>");
    qDBusRegisterMetaType<QMap<int, int>>();
    qRegisterMetaType<QMap<QString, QList<QMap<QString, QString>>>>("QMap<QString, QList<QMap<QString, QString>>>");
    qDBusRegisterMetaType<QMap<QString, QList<QMap<QString, QString>>>>();
    qRegisterMetaType<QMap<QString, QList<QString>>>("QMap<QString, QList<QString>>");
    qDBusRegisterMetaType<QMap<QString, QList<QString>>>();
    qRegisterMetaType<QMap<QString, QMap<QString, QString>>>("QMap<QString, QMap<QString, QString>>");
    qDBusRegisterMetaType<QMap<QString, QMap<QString, QString>>>();
    qRegisterMetaType<QMap<QString, QmlStruct>>("QMap<QString, QmlStruct>");
    qDBusRegisterMetaType<QMap<QString, QmlStruct>>();
    qRegisterMetaType<QMap<QString, QString>>("QMap<QString, QString>");
    qDBusRegisterMetaType<QMap<QString, QString>>();
    qRegisterMetaType<QMap<uint, QString>>("QMap<uint, QString>");
    qDBusRegisterMetaType<QMap<uint, QString>>();
}

bool operator!=(const QList<QmlStruct> &lhs, const QList<QmlStruct> &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=0; i<lhs.size(); ++i) {
        if (lhs[i] != rhs[i]) {
            return true;
        }
    }
    return false;
}

bool operator!=(const QMap<QString, QmlStruct> &lhs, const QMap<QString, QmlStruct> &rhs) {
    if (lhs.size() != rhs.size()) {
        return true;
    }
    for (auto i=lhs.keyBegin(); i!=lhs.keyEnd(); ++i) {
        if (!rhs.contains(*i))
        {
            return true;
        }
        if (lhs[*i] != rhs[*i]) {
            return true;
        }
    }
    return false;
}

QMap<QmlEnum::Type, QmlEnum::Type> Conversions::jsToMapOfQmlEnumToQmlEnum(QVariant jsonObject) {
    QMap<QmlEnum::Type, QmlEnum::Type> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QmlEnum::Type key_0 = static_cast<QmlEnum::Type>((*k_0).toLong());
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QmlEnum::Type>();
    }

    return converted;
}

QMap<QString, QList<QMap<QString, QString>>> Conversions::jsToMapOfStringToListOfMapOfStringToString(QVariant jsonObject) {
    QMap<QString, QList<QMap<QString, QString>>> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        QList<QMap<QString, QString>> o_0;
        for (auto &v_1 : v_0.toList()) {
            QMap<QString, QString> o_1;
            auto map_2 = v_1.toMap();
            for (auto k_2 = map_2.keyBegin(); k_2 != map_2.keyEnd(); ++k_2) {
                QString key_2 = (*k_2);
                auto v_2 = map_2.value(*k_2);
                o_1[key_2] = v_2.value<QString>();
            }

            o_0.append(o_1);
        }

        converted[key_0] = o_0;
    }

    return converted;
}

QMap<QString, QList<QString>> Conversions::jsToMapOfStringToListOfString(QVariant jsonObject) {
    QMap<QString, QList<QString>> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        QList<QString> o_0;
        for (auto &v_1 : v_0.toList()) {
            o_0.append(v_1.value<QString>());
        }

        converted[key_0] = o_0;
    }

    return converted;
}

QMap<QString, QMap<QString, QString>> Conversions::jsToMapOfStringToMapOfStringToString(QVariant jsonObject) {
    QMap<QString, QMap<QString, QString>> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        QMap<QString, QString> o_0;
        auto map_1 = v_0.toMap();
        for (auto k_1 = map_1.keyBegin(); k_1 != map_1.keyEnd(); ++k_1) {
            QString key_1 = (*k_1);
            auto v_1 = map_1.value(*k_1);
            o_0[key_1] = v_1.value<QString>();
        }

        converted[key_0] = o_0;
    }

    return converted;
}

QMap<QString, QmlStruct> Conversions::jsToMapOfStringToQmlStruct(QVariant jsonObject) {
    QMap<QString, QmlStruct> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QmlStruct>();
    }

    return converted;
}

QMap<QString, QString> Conversions::jsToMapOfStringToString(QVariant jsonObject) {
    QMap<QString, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        QString key_0 = (*k_0);
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QMap<uint, QString> Conversions::jsToMapOfUint32ToString(QVariant jsonObject) {
    QMap<uint, QString> converted;
    auto map_0 = jsonObject.toMap();
    for (auto k_0 = map_0.keyBegin(); k_0 != map_0.keyEnd(); ++k_0) {
        uint key_0 = (*k_0).toULong();
        auto v_0 = map_0.value(*k_0);
        converted[key_0] = v_0.value<QString>();
    }

    return converted;
}

QList<QList<QMap<QString, QString>>> Conversions::jsToListOfListOfMapOfStringToString(QVariant jsonObject) {
    QList<QList<QMap<QString, QString>>> converted;
    for (auto &v_0 : jsonObject.toList()) {
        QList<QMap<QString, QString>> o_0;
        for (auto &v_1 : v_0.toList()) {
            QMap<QString, QString> o_1;
            auto map_2 = v_1.toMap();
            for (auto k_2 = map_2.keyBegin(); k_2 != map_2.keyEnd(); ++k_2) {
                QString key_2 = (*k_2);
                auto v_2 = map_2.value(*k_2);
                o_1[key_2] = v_2.value<QString>();
            }

            o_0.append(o_1);
        }

        converted.append(o_0);
    }

    return converted;
}

QList<QMap<QString, QString>> Conversions::jsToListOfMapOfStringToString(QVariant jsonObject) {
    QList<QMap<QString, QString>> converted;
    for (auto &v_0 : jsonObject.toList()) {
        QMap<QString, QString> o_0;
        auto map_1 = v_0.toMap();
        for (auto k_1 = map_1.keyBegin(); k_1 != map_1.keyEnd(); ++k_1) {
            QString key_1 = (*k_1);
            auto v_1 = map_1.value(*k_1);
            o_0[key_1] = v_1.value<QString>();
        }

        converted.append(o_0);
    }

    return converted;
}

}