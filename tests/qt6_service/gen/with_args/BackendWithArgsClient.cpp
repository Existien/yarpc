/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/02.1_with_args.yml
 *   Object: WithArgs
 *   Template: qt6/client_source.j2
 */
#include "BackendWithArgsClient.hpp"
#include "types.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>


using namespace gen::with_args;

BackendWithArgsClient::BackendWithArgsClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{
    registerMetaTypes();
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "com.yarpc.backend.withArgs",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendWithArgsClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendWithArgsClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        this,
        SLOT(propertiesChangedHandler(QString, QVariantMap, QStringList))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "com.yarpc.backend.withArgs",
        "Notified",
        this,
        SLOT(NotifiedDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "com.yarpc.backend.withArgs",
        "OrderReceived",
        this,
        SLOT(OrderReceivedDBusHandler(QDBusMessage))
    );

}

bool BackendWithArgsClient::getConnected() const {
    return m_connected;
}

QVariantMap BackendWithArgsClient::getAllProperties() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QVariantMap> reply = iface.call(
        "GetAll",
        "com.yarpc.backend.withArgs"
    );
    if (!reply.isValid()) {
        return QVariantMap();
    } else {
        return reply.value();
    }
}

void BackendWithArgsClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendWithArgsClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}

void BackendWithArgsClient::propertiesChangedHandler(QString iface, QVariantMap changes, QStringList) {
    if (iface != "com.yarpc.backend.withArgs") {
        return;
    }
    if (changes.contains("Speed")) {
        emit speedChanged();
    }
    if (changes.contains("Distance")) {
        emit distanceChanged();
    }
    if (changes.contains("Duration")) {
        emit durationChanged();
    }
}


void BackendWithArgsClient::NotifiedDBusHandler(QDBusMessage content) {
    emit notifiedReceived(
        content.arguments()[0].value<QString>()
    );
}

void BackendWithArgsClient::OrderReceivedDBusHandler(QDBusMessage content) {
    emit orderReceivedReceived(
        content.arguments()[0].value<QString>(),
        content.arguments()[1].value<uint>(),
        content.arguments()[2].value<double>()
    );
}
NotifyPendingCall* BackendWithArgsClient::Notify(
    QVariant message
) {
    QString arg_0;
    arg_0 = message.value<QString>();

    return Notify(
        arg_0
    );
}
NotifyPendingCall* BackendWithArgsClient::Notify(
    QString message
) {
    QDBusArgument dbusmessage;
    dbusmessage << message;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "com.yarpc.backend.withArgs",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Notify",
        QVariant::fromValue(dbusmessage)
    )};
    return new NotifyPendingCall(pendingCall, this);
}

NotifyPendingCall::NotifyPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &NotifyPendingCall::callFinished
    );
}

void NotifyPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

OrderPendingCall* BackendWithArgsClient::Order(
    QVariant item,
    QVariant amount,
    QVariant pricePerItem
) {
    QString arg_0;
    arg_0 = item.value<QString>();

    uint arg_1;
    arg_1 = amount.value<uint>();

    double arg_2;
    arg_2 = pricePerItem.value<double>();

    return Order(
        arg_0,
        arg_1,
        arg_2
    );
}
OrderPendingCall* BackendWithArgsClient::Order(
    QString item,
    uint amount,
    double pricePerItem
) {
    QDBusArgument dbusitem;
    dbusitem << item;
    QDBusArgument dbusamount;
    dbusamount << amount;
    QDBusArgument dbuspricePerItem;
    dbuspricePerItem << pricePerItem;
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "com.yarpc.backend.withArgs",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Order",
        QVariant::fromValue(dbusitem),
        QVariant::fromValue(dbusamount),
        QVariant::fromValue(dbuspricePerItem)
    )};
    return new OrderPendingCall(pendingCall, this);
}

OrderPendingCall::OrderPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &OrderPendingCall::callFinished
    );
}

void OrderPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<double> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished(reply);
    }
    deleteLater();
}



double BackendWithArgsClient::getSpeed() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "com.yarpc.backend.withArgs",
        "Speed"
    );
    double unmarshalled{};
    if (reply.isValid()) {
        unmarshalled = reply.value().variant().value<double>();
    }
    return unmarshalled;
}


QVariant BackendWithArgsClient::getVariantSpeed() const {
    auto unmarshalled = getSpeed();
    QVariant marshalled;
    marshalled = QVariant::fromValue(unmarshalled);

    return marshalled;
}


void BackendWithArgsClient::setSpeed(const double &newValue) {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusArgument marshalled;
    QDBusVariant v;
    v.setVariant(QVariant::fromValue(newValue));
    marshalled << v;
    iface.call(
        "Set",
        "com.yarpc.backend.withArgs",
        "Speed",
        QVariant::fromValue<QDBusArgument>(marshalled)
    );
}

void BackendWithArgsClient::setVariantSpeed(QVariant value ) {
    double unmarshalled;
    unmarshalled = value.value<double>();

    setSpeed(unmarshalled);
}


uint BackendWithArgsClient::getDistance() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "com.yarpc.backend.withArgs",
        "Distance"
    );
    uint unmarshalled{};
    if (reply.isValid()) {
        unmarshalled = reply.value().variant().value<uint>();
    }
    return unmarshalled;
}


QVariant BackendWithArgsClient::getVariantDistance() const {
    auto unmarshalled = getDistance();
    QVariant marshalled;
    marshalled = QVariant::fromValue(unmarshalled);

    return marshalled;
}


void BackendWithArgsClient::setDistance(const uint &newValue) {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusArgument marshalled;
    QDBusVariant v;
    v.setVariant(QVariant::fromValue(newValue));
    marshalled << v;
    iface.call(
        "Set",
        "com.yarpc.backend.withArgs",
        "Distance",
        QVariant::fromValue<QDBusArgument>(marshalled)
    );
}

void BackendWithArgsClient::setVariantDistance(QVariant value ) {
    uint unmarshalled;
    unmarshalled = value.value<uint>();

    setDistance(unmarshalled);
}


double BackendWithArgsClient::getDuration() const {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend/withArgs",
        "org.freedesktop.DBus.Properties",
        QDBusConnection::sessionBus()
    );
    QDBusReply<QDBusVariant> reply = iface.call(
        "Get",
        "com.yarpc.backend.withArgs",
        "Duration"
    );
    double unmarshalled{};
    if (reply.isValid()) {
        unmarshalled = reply.value().variant().value<double>();
    }
    return unmarshalled;
}


QVariant BackendWithArgsClient::getVariantDuration() const {
    auto unmarshalled = getDuration();
    QVariant marshalled;
    marshalled = QVariant::fromValue(unmarshalled);

    return marshalled;
}

