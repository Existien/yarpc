/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/02.2_primitives.yml
 *   Object: Primitives
 *   Template: qt6/client_source.j2
 */
#include "BackendPrimitivesClient.hpp"
#include <QDBusConnection>
#include <QDBusInterface>
#include <QDBusReply>
#include <QDBusPendingCall>
#include <QDBusPendingReply>

using namespace gen::withArgs;

BackendPrimitivesClient::BackendPrimitivesClient(QObject* parent)
 : QObject(parent),
   m_watcher(QDBusServiceWatcher(
    "com.yarpc.backend",
    QDBusConnection::sessionBus(),
    QDBusServiceWatcher::WatchForRegistration | QDBusServiceWatcher::WatchForUnregistration,
    parent
   ))
{

    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    m_connected = iface.isValid();

    connect(
        &m_watcher, &QDBusServiceWatcher::serviceRegistered,
        this, &BackendPrimitivesClient::connectedHandler
    );
    connect(
        &m_watcher, &QDBusServiceWatcher::serviceUnregistered,
        this, &BackendPrimitivesClient::disconnectedHandler
    );

    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Uint8Signal",
        this,
        SLOT(Uint8SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "BoolSignal",
        this,
        SLOT(BoolSignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Int16Signal",
        this,
        SLOT(Int16SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Uint16Signal",
        this,
        SLOT(Uint16SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Int32Signal",
        this,
        SLOT(Int32SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Uint32Signal",
        this,
        SLOT(Uint32SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Int64Signal",
        this,
        SLOT(Int64SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "Uint64Signal",
        this,
        SLOT(Uint64SignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "DoubleSignal",
        this,
        SLOT(DoubleSignalDBusHandler(QDBusMessage))
    );
    QDBusConnection::sessionBus().connect(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        "StringSignal",
        this,
        SLOT(StringSignalDBusHandler(QDBusMessage))
    );

}

bool BackendPrimitivesClient::getConnected() const {
    return m_connected;
}

void BackendPrimitivesClient::connectedHandler(const QString& service) {
    m_connected = true;
    emit connectedChanged();
}

void BackendPrimitivesClient::disconnectedHandler(const QString& service) {
    m_connected = false;
    emit connectedChanged();
}


void BackendPrimitivesClient::Uint8SignalDBusHandler(QDBusMessage content) {
    emit uint8SignalReceived();
}

void BackendPrimitivesClient::BoolSignalDBusHandler(QDBusMessage content) {
    emit boolSignalReceived();
}

void BackendPrimitivesClient::Int16SignalDBusHandler(QDBusMessage content) {
    emit int16SignalReceived();
}

void BackendPrimitivesClient::Uint16SignalDBusHandler(QDBusMessage content) {
    emit uint16SignalReceived();
}

void BackendPrimitivesClient::Int32SignalDBusHandler(QDBusMessage content) {
    emit int32SignalReceived();
}

void BackendPrimitivesClient::Uint32SignalDBusHandler(QDBusMessage content) {
    emit uint32SignalReceived();
}

void BackendPrimitivesClient::Int64SignalDBusHandler(QDBusMessage content) {
    emit int64SignalReceived();
}

void BackendPrimitivesClient::Uint64SignalDBusHandler(QDBusMessage content) {
    emit uint64SignalReceived();
}

void BackendPrimitivesClient::DoubleSignalDBusHandler(QDBusMessage content) {
    emit doubleSignalReceived();
}

void BackendPrimitivesClient::StringSignalDBusHandler(QDBusMessage content) {
    emit stringSignalReceived();
}
Uint8MethodPendingCall* BackendPrimitivesClient::Uint8Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint8Method"
    )};
    return new Uint8MethodPendingCall(pendingCall, this);
}

Uint8MethodPendingCall::Uint8MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint8MethodPendingCall::callFinished
    );
}

void Uint8MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

BoolMethodPendingCall* BackendPrimitivesClient::BoolMethod() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "BoolMethod"
    )};
    return new BoolMethodPendingCall(pendingCall, this);
}

BoolMethodPendingCall::BoolMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &BoolMethodPendingCall::callFinished
    );
}

void BoolMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Int16MethodPendingCall* BackendPrimitivesClient::Int16Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int16Method"
    )};
    return new Int16MethodPendingCall(pendingCall, this);
}

Int16MethodPendingCall::Int16MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int16MethodPendingCall::callFinished
    );
}

void Int16MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Uint16MethodPendingCall* BackendPrimitivesClient::Uint16Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint16Method"
    )};
    return new Uint16MethodPendingCall(pendingCall, this);
}

Uint16MethodPendingCall::Uint16MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint16MethodPendingCall::callFinished
    );
}

void Uint16MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Int32MethodPendingCall* BackendPrimitivesClient::Int32Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int32Method"
    )};
    return new Int32MethodPendingCall(pendingCall, this);
}

Int32MethodPendingCall::Int32MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int32MethodPendingCall::callFinished
    );
}

void Int32MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Uint32MethodPendingCall* BackendPrimitivesClient::Uint32Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint32Method"
    )};
    return new Uint32MethodPendingCall(pendingCall, this);
}

Uint32MethodPendingCall::Uint32MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint32MethodPendingCall::callFinished
    );
}

void Uint32MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Int64MethodPendingCall* BackendPrimitivesClient::Int64Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Int64Method"
    )};
    return new Int64MethodPendingCall(pendingCall, this);
}

Int64MethodPendingCall::Int64MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Int64MethodPendingCall::callFinished
    );
}

void Int64MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

Uint64MethodPendingCall* BackendPrimitivesClient::Uint64Method() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "Uint64Method"
    )};
    return new Uint64MethodPendingCall(pendingCall, this);
}

Uint64MethodPendingCall::Uint64MethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &Uint64MethodPendingCall::callFinished
    );
}

void Uint64MethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

DoubleMethodPendingCall* BackendPrimitivesClient::DoubleMethod() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "DoubleMethod"
    )};
    return new DoubleMethodPendingCall(pendingCall, this);
}

DoubleMethodPendingCall::DoubleMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &DoubleMethodPendingCall::callFinished
    );
}

void DoubleMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

StringMethodPendingCall* BackendPrimitivesClient::StringMethod() {
    QDBusInterface iface(
        "com.yarpc.backend",
        "/com/yarpc/backend",
        "com.yarpc.backend.primitives",
        QDBusConnection::sessionBus()
    );
    QDBusPendingCall pendingCall {iface.asyncCall(
        "StringMethod"
    )};
    return new StringMethodPendingCall(pendingCall, this);
}

StringMethodPendingCall::StringMethodPendingCall(QDBusPendingCall pendingCall, QObject *parent)
: QObject(parent), m_watcher(pendingCall, this) {
    QObject::connect(
        &m_watcher, &QDBusPendingCallWatcher::finished,
        this, &StringMethodPendingCall::callFinished
    );
}

void StringMethodPendingCall::callFinished(QDBusPendingCallWatcher *watcher)
{
    QDBusPendingReply<void> reply {*watcher};
    if (!reply.isValid()) {
        emit error(reply.error());
    } else {
        emit finished();
    }
    deleteLater();
}

