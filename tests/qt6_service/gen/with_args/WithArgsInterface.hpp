/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/02.1_with_args.yml
 *   Object: WithArgs
 *   Template: qt6/service_header.j2
 */
#pragma once
#include <QObject>
#include <qqmlintegration.h>
#include <QDBusAbstractAdaptor>
#include <QDBusConnection>
#include <QDBusMessage>
#include <memory>
#include "DBusError.hpp"
namespace gen::withArgs {

/**
 * @brief D-Bus adaptor for the WithArgs interface.
 */
class WithArgsInterfaceAdaptor : public QDBusAbstractAdaptor {
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.yarpc.testservice.withArgs")
public:
    WithArgsInterfaceAdaptor(QObject* parent = nullptr);
public slots:
    /**
     * @brief a simple method with one argument
     */
    void Notify(const QDBusMessage &message);
    /**
     * @brief a simple method
with args and return value

     */
    void Order(const QDBusMessage &message);
signals:
    /**
     * @brief a simple signal with one argument
     */
    void Notified();
    /**
     * @brief a simple signal with
multiple arguments

     */
    void OrderReceived();
};

class NotifyArgs {
    Q_GADGET
};

class NotifyPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    NotifyPendingReply(QDBusMessage call, QObject *parent);
public slots:
    NotifyArgs* args();
    void sendReply();
    void sendError(const QString &name, const QString &message);
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    NotifyArgs m_args;
};

class OrderArgs {
    Q_GADGET
};

class OrderPendingReply : public QObject {
    Q_OBJECT
    QML_UNCREATABLE("")
    QML_ELEMENT
public:
    OrderPendingReply(QDBusMessage call, QObject *parent);
public slots:
    OrderArgs* args();
    void sendReply();
    void sendError(const QString &name, const QString &message);
    void sendError(const DBusError &error);
private:
    QDBusMessage m_call;
    OrderArgs m_args;
};


class WithArgsInterface : public QObject {
    Q_OBJECT
    QML_ELEMENT
    Q_PROPERTY(bool connected READ getConnected NOTIFY connectedChanged)
public:
    WithArgsInterface(QObject* parent = nullptr);
    bool getConnected() const;
    void callFinished(const QDBusMessage &reply);
    void handleNotifyCalled(QDBusMessage call);
    void handleOrderCalled(QDBusMessage call);

public slots:
    void connect();
    void disconnect();

    void EmitNotified();
    void EmitOrderReceived();

signals:
    void connectedChanged();
    void notifyCalled(BumpPendingReply* reply);
    void orderCalled(BumpPendingReply* reply);

private:
    WithArgsInterfaceAdaptor *m_adaptor;
    std::unique_ptr<QDBusConnection> m_connection = nullptr;
};

}