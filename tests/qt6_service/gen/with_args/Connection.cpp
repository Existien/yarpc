/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/qt6/02_with_args.yml
 *   Template: qt6/object_path_source.j2
 */
#include "Connection.hpp"
#include "WithArgsInterface.hpp"
#include "PrimitivesInterface.hpp"

using namespace gen::with_args;


WithArgsTestserviceYarpcComObjectPath::WithArgsTestserviceYarpcComObjectPath(QObject *parent) : QObject(parent) {
}

bool WithArgsTestserviceYarpcComObjectPath::hasRegistrations() const {
    return (
        false
        || m_withArgs != nullptr
        || m_primitives != nullptr
    );
}


Connection::Connection() : QObject(nullptr) {}

Connection& Connection::instance() {
    static Connection object{};
    return object;
}

void Connection::connect() {
    bool hasChanged = false;
    if (m_connection == nullptr) {
        m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "com.yarpc.testservice"));
        if ( m_connection->isConnected()) {
            m_connection->registerService("com.yarpc.testservice");
            hasChanged = true;
        }
    }

    if (hasChanged) {
        emit connectedChanged();
    }
}

void Connection::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("com.yarpc.testservice");
    m_connection = nullptr;
    emit connectedChanged();
}

void Connection::disconnectIfUnused(){
    if (
        false
        || m_WithArgs != nullptr
        || m_Primitives != nullptr
    ) {
        return;
    }
    disconnect();
}

void Connection::updateRegistrations() {
    if (m_connection != nullptr && m_connection->isConnected()) {
        m_connection->unregisterObject("/com/yarpc/testservice/withArgs");
        m_WithArgsTestserviceYarpcComObjectPath.reset(new WithArgsTestserviceYarpcComObjectPath(this));
        if (m_WithArgs != nullptr) {
            auto withArgsInterface = dynamic_cast<WithArgsInterface*>(m_WithArgs);
            m_WithArgsTestserviceYarpcComObjectPath->m_withArgs = new WithArgsInterfaceAdaptor(
                withArgsInterface,
                m_WithArgsTestserviceYarpcComObjectPath.get()
            );
        }
        if (m_Primitives != nullptr) {
            auto primitivesInterface = dynamic_cast<PrimitivesInterface*>(m_Primitives);
            m_WithArgsTestserviceYarpcComObjectPath->m_primitives = new PrimitivesInterfaceAdaptor(
                primitivesInterface,
                m_WithArgsTestserviceYarpcComObjectPath.get()
            );
        }
        if (
            false
            || m_WithArgs != nullptr
            || m_Primitives != nullptr
        ) {
            m_connection->registerObject(
                "/com/yarpc/testservice/withArgs",
                m_WithArgsTestserviceYarpcComObjectPath.get()
            );
        }
        emit registrationChanged();
    }
}

bool Connection::getConnected() const {
    return m_connection != nullptr;
}

void Connection::send(const QDBusMessage &message) {
    if (m_connection == nullptr) {
        qDebug() << "Sending message failed: No connection";
        return;
    }
    m_connection->send(message);
}

void Connection::registerWithArgs(QObject* interface) {
    if (m_WithArgs == nullptr) {
        auto withArgsInterface = dynamic_cast<WithArgsInterface*>(interface);
        if (withArgsInterface != nullptr) {
            m_WithArgs = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterWithArgs() {
    if (m_WithArgs != nullptr) {
        m_WithArgs = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isWithArgsRegistered() const {
    return (m_WithArgs != nullptr);
}

WithArgsInterfaceAdaptor* Connection::WithArgs() {
    if (m_WithArgsTestserviceYarpcComObjectPath != nullptr) {
        return m_WithArgsTestserviceYarpcComObjectPath->m_withArgs;
    } else {
        return nullptr;
    }
}

void Connection::registerPrimitives(QObject* interface) {
    if (m_Primitives == nullptr) {
        auto primitivesInterface = dynamic_cast<PrimitivesInterface*>(interface);
        if (primitivesInterface != nullptr) {
            m_Primitives = interface;
        }
    }
    connect();
    updateRegistrations();
}

void Connection::unregisterPrimitives() {
    if (m_Primitives != nullptr) {
        m_Primitives = nullptr;
    }
    updateRegistrations();
    disconnectIfUnused();
}

bool Connection::isPrimitivesRegistered() const {
    return (m_Primitives != nullptr);
}

PrimitivesInterfaceAdaptor* Connection::Primitives() {
    if (m_WithArgsTestserviceYarpcComObjectPath != nullptr) {
        return m_WithArgsTestserviceYarpcComObjectPath->m_primitives;
    } else {
        return nullptr;
    }
}

