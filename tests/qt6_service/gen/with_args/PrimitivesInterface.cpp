/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/02.2_primitives.yml
 *   Object: Primitives
 *   Template: qt6/service_source.j2
 */
#include "PrimitivesInterface.hpp"

using namespace gen::withArgs;

PrimitivesInterface::PrimitivesInterface(QObject* parent)
: QObject(parent) {
    m_adaptor = new PrimitivesInterfaceAdaptor(this);
}

PrimitivesInterfaceAdaptor::PrimitivesInterfaceAdaptor(QObject* parent) : QDBusAbstractAdaptor(parent) {

}

void PrimitivesInterface::connect(){
    if (m_connection != nullptr) {
        return;
    }
    m_connection = std::make_unique<QDBusConnection>(QDBusConnection::connectToBus(QDBusConnection::SessionBus, "com.yarpc.testservice"));
    bool success = m_connection->isConnected();
    if (success) {
        success = success && m_connection->registerService("com.yarpc.testservice");
        success = success && m_connection->registerObject(
            "/com/yarpc/testservice",
            "com.yarpc.testservice.primitives",
            this
        );
        if (!success) {
            m_connection->disconnectFromBus("com.yarpc.testservice");
        }
    }
    if (!success) {
        m_connection = nullptr;
    }
    emit connectedChanged();
}
void PrimitivesInterface::disconnect(){
    if (m_connection == nullptr) {
        return;
    }
    m_connection->disconnectFromBus("com.yarpc.testservice");
    m_connection = nullptr;
    emit connectedChanged();
}

bool PrimitivesInterface::getConnected() const {
    return m_connection != nullptr;
}

void PrimitivesInterface::EmitUint8Signal(){
    emit m_adaptor->Uint8Signal();
}
void PrimitivesInterface::EmitBoolSignal(){
    emit m_adaptor->BoolSignal();
}
void PrimitivesInterface::EmitInt16Signal(){
    emit m_adaptor->Int16Signal();
}
void PrimitivesInterface::EmitUint16Signal(){
    emit m_adaptor->Uint16Signal();
}
void PrimitivesInterface::EmitInt32Signal(){
    emit m_adaptor->Int32Signal();
}
void PrimitivesInterface::EmitUint32Signal(){
    emit m_adaptor->Uint32Signal();
}
void PrimitivesInterface::EmitInt64Signal(){
    emit m_adaptor->Int64Signal();
}
void PrimitivesInterface::EmitUint64Signal(){
    emit m_adaptor->Uint64Signal();
}
void PrimitivesInterface::EmitDoubleSignal(){
    emit m_adaptor->DoubleSignal();
}
void PrimitivesInterface::EmitStringSignal(){
    emit m_adaptor->StringSignal();
}
void PrimitivesInterfaceAdaptor::Uint8Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleUint8MethodCalled(message);
    }
}

Uint8MethodPendingReply::Uint8MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Uint8MethodArgs{};
}

Uint8MethodArgs* Uint8MethodPendingReply::args() {
    return &m_args;
}

void Uint8MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Uint8MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Uint8MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleUint8MethodCalled(QDBusMessage call) {
    auto reply = new Uint8MethodPendingReply(call, this);
    emit uint8MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::BoolMethod(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleBoolMethodCalled(message);
    }
}

BoolMethodPendingReply::BoolMethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = BoolMethodArgs{};
}

BoolMethodArgs* BoolMethodPendingReply::args() {
    return &m_args;
}

void BoolMethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void BoolMethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void BoolMethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleBoolMethodCalled(QDBusMessage call) {
    auto reply = new BoolMethodPendingReply(call, this);
    emit boolMethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Int16Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleInt16MethodCalled(message);
    }
}

Int16MethodPendingReply::Int16MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Int16MethodArgs{};
}

Int16MethodArgs* Int16MethodPendingReply::args() {
    return &m_args;
}

void Int16MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Int16MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Int16MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleInt16MethodCalled(QDBusMessage call) {
    auto reply = new Int16MethodPendingReply(call, this);
    emit int16MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Uint16Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleUint16MethodCalled(message);
    }
}

Uint16MethodPendingReply::Uint16MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Uint16MethodArgs{};
}

Uint16MethodArgs* Uint16MethodPendingReply::args() {
    return &m_args;
}

void Uint16MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Uint16MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Uint16MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleUint16MethodCalled(QDBusMessage call) {
    auto reply = new Uint16MethodPendingReply(call, this);
    emit uint16MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Int32Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleInt32MethodCalled(message);
    }
}

Int32MethodPendingReply::Int32MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Int32MethodArgs{};
}

Int32MethodArgs* Int32MethodPendingReply::args() {
    return &m_args;
}

void Int32MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Int32MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Int32MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleInt32MethodCalled(QDBusMessage call) {
    auto reply = new Int32MethodPendingReply(call, this);
    emit int32MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Uint32Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleUint32MethodCalled(message);
    }
}

Uint32MethodPendingReply::Uint32MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Uint32MethodArgs{};
}

Uint32MethodArgs* Uint32MethodPendingReply::args() {
    return &m_args;
}

void Uint32MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Uint32MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Uint32MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleUint32MethodCalled(QDBusMessage call) {
    auto reply = new Uint32MethodPendingReply(call, this);
    emit uint32MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Int64Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleInt64MethodCalled(message);
    }
}

Int64MethodPendingReply::Int64MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Int64MethodArgs{};
}

Int64MethodArgs* Int64MethodPendingReply::args() {
    return &m_args;
}

void Int64MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Int64MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Int64MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleInt64MethodCalled(QDBusMessage call) {
    auto reply = new Int64MethodPendingReply(call, this);
    emit int64MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::Uint64Method(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleUint64MethodCalled(message);
    }
}

Uint64MethodPendingReply::Uint64MethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = Uint64MethodArgs{};
}

Uint64MethodArgs* Uint64MethodPendingReply::args() {
    return &m_args;
}

void Uint64MethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void Uint64MethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void Uint64MethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleUint64MethodCalled(QDBusMessage call) {
    auto reply = new Uint64MethodPendingReply(call, this);
    emit uint64MethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::DoubleMethod(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleDoubleMethodCalled(message);
    }
}

DoubleMethodPendingReply::DoubleMethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = DoubleMethodArgs{};
}

DoubleMethodArgs* DoubleMethodPendingReply::args() {
    return &m_args;
}

void DoubleMethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void DoubleMethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void DoubleMethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleDoubleMethodCalled(QDBusMessage call) {
    auto reply = new DoubleMethodPendingReply(call, this);
    emit doubleMethodCalled(reply);
}
void PrimitivesInterfaceAdaptor::StringMethod(const QDBusMessage &message){
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        message.setDelayedReply(true);
        iface->handleStringMethodCalled(message);
    }
}

StringMethodPendingReply::StringMethodPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = StringMethodArgs{};
}

StringMethodArgs* StringMethodPendingReply::args() {
    return &m_args;
}

void StringMethodPendingReply::sendReply() {
    auto reply = m_call.createReply();
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(reply);
    }
    deleteLater();
}

void StringMethodPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void StringMethodPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<PrimitivesInterface*>(parent());
    if (iface != nullptr) {
        iface->callFinished(error_reply);
    }
    deleteLater();
}

void PrimitivesInterface::handleStringMethodCalled(QDBusMessage call) {
    auto reply = new StringMethodPendingReply(call, this);
    emit stringMethodCalled(reply);
}

void PrimitivesInterface::callFinished(const QDBusMessage &reply)
{
    m_connection->send(reply);
}