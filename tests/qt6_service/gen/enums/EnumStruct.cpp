/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/06.4_enums_with_structs.yml
 *   Object: EnumStruct
 *   Template: qt6/struct_source.j2
 */
#include <QMetaType>
#include <QDBusMetaType>
#include "EnumStruct.hpp"

using namespace gen::enums;

QDBusArgument &gen::enums::operator<<(QDBusArgument &argument, const EnumStruct &object) {
    argument.beginStructure();
    argument << object.color;
    argument << object.colorArray;
    argument << object.colorDict;
    argument.endStructure();
    return argument;
}

const QDBusArgument &gen::enums::operator>>(const QDBusArgument &argument, EnumStruct &object) {
    argument.beginStructure();
    argument >> object.color;
    argument >> object.colorArray;
    argument >> object.colorDict;
    argument.endStructure();
    return argument;
}

bool gen::enums::operator!=(const EnumStruct &lhs, const EnumStruct &rhs) {
    return (false
        || lhs.color != rhs.color
        || lhs.colorArray != rhs.colorArray
        || lhs.colorDict != rhs.colorDict
    );
}

EnumStruct EnumStructFactory::create (
     color,
    QList<> colorArray,
    QMap<$1, $2> colorDict
) const {
    return EnumStruct {
        .color = color,
        .colorArray = colorArray,
        .colorDict = colorDict,
    };
}

EnumStruct EnumStructFactory::create (
    QVariant color,
    QVariant colorArray,
    QVariant colorDict
) const {
     member_0;
    member_0 = color.value<>();

    QList<> member_1;
    for (auto& item_0 : colorArray.value<QVariantList>()) {
         o_0;
        o_0 = item_0.value<>();

        member_1.push_back(o_0);
    }

    QMap<$1, $2> member_2;
    member_2 = colorDict.value<QMap<$1, $2>>();

    return EnumStruct {
        .color = member_0,
        .colorArray = member_1,
        .colorDict = member_2,
    };
}

void EnumStruct::registerMetaTypes() {
    qRegisterMetaType<EnumStruct>("EnumStruct");
    qDBusRegisterMetaType<EnumStruct>();
}