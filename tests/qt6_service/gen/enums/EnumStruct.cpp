/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/06.4_enums_with_structs.yml
 *   Object: EnumStruct
 *   Template: qt6/struct_source.j2
 */
#include <QMetaType>
#include <QDBusMetaType>
#include "EnumStruct.hpp"
#include "types.hpp"

using namespace gen::enums;

QDBusArgument &gen::enums::operator<<(QDBusArgument &argument, const EnumStruct &object) {
    argument.beginStructure();
    argument << *reinterpret_cast<const int*>(&object.color);
    argument << *reinterpret_cast<const QList<int>*>(&object.colorArray);
    argument << *reinterpret_cast<const QMap<int, int>*>(&object.colorDict);
    argument.endStructure();
    return argument;
}

const QDBusArgument &gen::enums::operator>>(const QDBusArgument &argument, EnumStruct &object) {
    argument.beginStructure();
    int dbusColor;
    argument >> dbusColor;
    object.color = *reinterpret_cast<const Color::Type*>(&dbusColor);
    QList<int> dbusColorArray;
    argument >> dbusColorArray;
    object.colorArray = *reinterpret_cast<const QList<Color::Type>*>(&dbusColorArray);
    QMap<int, int> dbusColorDict;
    argument >> dbusColorDict;
    object.colorDict = *reinterpret_cast<const QMap<Color::Type, Color::Type>*>(&dbusColorDict);
    argument.endStructure();
    return argument;
}

bool gen::enums::operator!=(const EnumStruct &lhs, const EnumStruct &rhs) {
    return (false
        || lhs.color != rhs.color
        || lhs.colorArray != rhs.colorArray
        || lhs.colorDict != rhs.colorDict
    );
}

EnumStruct EnumStructFactory::create (
    Color::Type color,
    QList<Color::Type> colorArray,
    QMap<Color::Type, Color::Type> colorDict
) const {
    return EnumStruct {
        .color = color,
        .colorArray = colorArray,
        .colorDict = colorDict,
    };
}

EnumStruct EnumStructFactory::create (
    QVariant color,
    QVariant colorArray,
    QVariant colorDict
) const {
    Color::Type member_0;
    member_0 = color.value<Color::Type>();

    QList<Color::Type> member_1;
    for (auto& item_0 : colorArray.value<QVariantList>()) {
        Color::Type o_0;
        o_0 = item_0.value<Color::Type>();

        member_1.push_back(o_0);
    }

    QMap<Color::Type, Color::Type> member_2;
    member_2 = colorDict.value<QMap<Color::Type, Color::Type>>();

    return EnumStruct {
        .color = member_0,
        .colorArray = member_1,
        .colorDict = member_2,
    };
}