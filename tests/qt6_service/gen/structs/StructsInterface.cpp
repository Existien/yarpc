/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/03_structs.yml
 *   Object: Structs
 *   Template: qt6/service_source.j2
 */
#include <QDBusArgument>
#include "StructsInterface.hpp"
#include "StructsInterfaceAdaptor.hpp"
#include "Connection.hpp"
#include "types.hpp"

using namespace gen::structs;
using namespace StructsInterfaceUtils;

StructsInterface::StructsInterface(QObject* parent)
: QObject(parent) {
    registerMetaTypes();
    QObject::connect(
        &Connection::instance(),
        &Connection::connectedChanged,
        this,
        &StructsInterface::connectedChanged
    );
    QObject::connect(
        &Connection::instance(),
        &Connection::registrationChanged,
        this,
        &StructsInterface::connectedChanged
    );
}

void StructsInterface::connect() {
    Connection::instance().registerStructs(this);
}

void StructsInterface::disconnect() {
    Connection::instance().unregisterStructs();
}

void StructsInterface::finishCall(const QDBusMessage &reply)
{
    Connection::instance().send(reply);
}

bool StructsInterface::getConnected() const {
    return (
        Connection::instance().getConnected()
        && Connection::instance().isStructsRegistered()
    );
}

SendStructPendingReply::SendStructPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    SimpleStruct arg_0;
    {
        auto marshalled = m_call.arguments()[0].value<QDBusArgument>();
        marshalled >> arg_0;
    }
    m_args = SendStructArgs{
        .simpleStruct = static_cast<SimpleStruct>(arg_0),
    };
}

SendStructArgs SendStructPendingReply::args() {
    return m_args;
}

void SendStructPendingReply::sendReply(
    QVariant reply
) {
    SimpleStruct unmarshalled;
    unmarshalled = reply.value<SimpleStruct>();

    sendReply(unmarshalled);
}

void SendStructPendingReply::sendReply(
    const SimpleStruct &reply
) {
    auto replyToSend = static_cast<SimpleStruct>(reply);
    auto dbusReply = m_call.createReply(QVariant::fromValue(replyToSend));
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(dbusReply);
    }
    deleteLater();
}

void SendStructPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void SendStructPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void StructsInterface::handleSendStructCalled(QDBusMessage call) {
    auto reply = new SendStructPendingReply(call, this);
    emit sendStructCalled(reply);
}

void StructsInterface::EmitStructReceived(
    SimpleStruct simpleStruct,
    double totalCosts
) {
    if (Connection::instance().Structs() != nullptr ) {
        emit Connection::instance().Structs()->StructReceived(
            simpleStruct,
            totalCosts
        );
    }
}

void StructsInterface::EmitStructReceived(
    QVariant simpleStruct,
    QVariant totalCosts
) {
    SimpleStruct arg_0;
    arg_0 = simpleStruct.value<SimpleStruct>();

    double arg_1;
    arg_1 = totalCosts.value<double>();

    EmitStructReceived(
        arg_0,
        arg_1
    );
}

SimpleStruct StructsInterface::getSimple() const {
    return m_Simple;
}

void StructsInterface::setSimple(const SimpleStruct &value ) {
    m_Simple = value;
    emit simpleChanged();
    if (Connection::instance().Structs() != nullptr ) {
        QVariantMap changedProps;
        changedProps.insert("Simple", QVariant::fromValue(static_cast<SimpleStruct>(value)));
        emitPropertiesChangedSignal(changedProps);
    }
}

QVariant StructsInterface::getVariantSimple() const {
    auto unmarshalled = getSimple();
    QVariant marshalled;
    marshalled = QVariant::fromValue(unmarshalled);

    return marshalled;
}

void StructsInterface::setVariantSimple(QVariant value ) {
    SimpleStruct unmarshalled;
    unmarshalled = value.value<SimpleStruct>();

    setSimple(unmarshalled);
}


void StructsInterface::emitPropertiesChangedSignal(const QVariantMap &changedProps) {
    auto signal = QDBusMessage::createSignal(
        "/com/yarpc/testservice/structs",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged"
    );
    signal << "com.yarpc.testservice.structs";
    signal << changedProps;
    signal << QStringList{};
    Connection::instance().send(signal);
}