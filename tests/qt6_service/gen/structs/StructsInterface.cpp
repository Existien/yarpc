/* Generated by YARPC
 * Version:  0.1.0
 * Definition:
 *   File: /workspace/tests/definitions/03_structs.yml
 *   Object: Structs
 *   Template: qt6/service_source.j2
 */
#include "StructsInterface.hpp"
#include "StructsInterfaceAdaptor.hpp"
#include "Connection.hpp"

using namespace gen::structs;

StructsInterface::StructsInterface(QObject* parent)
: QObject(parent) {
    QObject::connect(
        &Connection::instance(),
        &Connection::connectedChanged,
        this,
        &StructsInterface::connectedChanged
    );
    QObject::connect(
        &Connection::instance(),
        &Connection::registrationChanged,
        this,
        &StructsInterface::connectedChanged
    );
}

void StructsInterface::connect() {
    Connection::instance().registerStructs(this);
}

void StructsInterface::disconnect() {
    Connection::instance().unregisterStructs();
}

void StructsInterface::finishCall(const QDBusMessage &reply)
{
    Connection::instance().send(reply);
}

bool StructsInterface::getConnected() const {
    return (
        Connection::instance().getConnected()
        && Connection::instance().isStructsRegistered()
    );
}

SendStructPendingReply::SendStructPendingReply(QDBusMessage call, QObject *parent) : QObject(parent) {
    m_call = call;
    m_args = SendStructArgs{
        .simpleStruct = m_call.arguments()[0].value<>(),
    };
}

SendStructArgs SendStructPendingReply::args() {
    return m_args;
}

void SendStructPendingReply::sendReply(
    const  &reply
) {
    auto dbusReply = m_call.createReply();
    dbusReply << reply;
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(dbusReply);
    }
    deleteLater();
}

void SendStructPendingReply::sendError(const QString& name, const QString& message) {
    auto error_reply = m_call.createErrorReply(name, message);
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void SendStructPendingReply::sendError(const DBusError &error) {
    auto error_reply = m_call.createErrorReply(error);
    auto iface = dynamic_cast<StructsInterface*>(parent());
    if (iface != nullptr) {
        iface->finishCall(error_reply);
    }
    deleteLater();
}

void StructsInterface::handleSendStructCalled(QDBusMessage call) {
    auto reply = new SendStructPendingReply(call, this);
    emit sendStructCalled(reply);
}

void StructsInterface::EmitStructReceived(
     simpleStruct,
    double totalCosts
) {
    if (Connection::instance().Structs() != nullptr ) {
        emit Connection::instance().Structs()->StructReceived(
            simpleStruct,
            totalCosts
        );
    }
}

 StructsInterface::getSimple() const {
    return m_Simple;
}

void StructsInterface::setSimple(const  &value ) {
    m_Simple = value;
    emit simpleChanged();
    if (Connection::instance().Structs() != nullptr ) {
        QVariantMap changedProps;
        changedProps.insert("Simple", value);
        emitPropertiesChangedSignal(changedProps);
    }
}


void StructsInterface::emitPropertiesChangedSignal(const QVariantMap &changedProps) {
    auto signal = QDBusMessage::createSignal(
        "/com/yarpc/testservice/structs",
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged"
    );
    signal << "com.yarpc.testservice.structs";
    signal << changedProps;
    signal << QStringList{};
    Connection::instance().send(signal);
}