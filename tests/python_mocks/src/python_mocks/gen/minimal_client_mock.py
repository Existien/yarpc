# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/basic_args.yml
#   Object: Minimal
#   Template: client_mock

from .connection import Connection
from dbus_next import Variant, DBusError
from unittest.mock import Mock
import asyncio


class MinimalClientMock():
    """
    Mock client implementation of the Minimal D-Bus interface

    The Mock instance can be accessed via the `mock` attribute.
    All received signals will be forwarded to the mock using keyword arguments.
    E.g.
    A received signal `Fooed('bar')`
    might result in the following call of the mock:
    `client.mock.Fooed(msg='bar')`
    """

    def __init__(self):
        self._interface = None
        self.mock = Mock()

    async def connect(self):
        """
        Initializes the D-Bus connection and waits until it is closed
        """
        bus = await Connection.bus()
        introspection = await bus.introspect(
            "com.yarpc.testservice",
            "/com/yarpc/testservice",
        )
        proxy_object = bus.get_proxy_object(
            "com.yarpc.testservice",
            "/com/yarpc/testservice",
            introspection
        )
        self._interface = proxy_object.get_interface(
            "com.yarpc.testservice.minimal"
        )

        self._interface.on_bumped(self._Bumped_handler)
        await bus.wait_for_disconnect()

    def _Bumped_handler(self):
        self.mock.Bumped()

    async def Bump(self) -> None:
        """
        a simple method without args
        """
        while not self._interface:
            await asyncio.sleep(0.1)
        return await self._interface.call_bump()
