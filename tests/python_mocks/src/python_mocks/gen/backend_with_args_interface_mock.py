# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/basic_args.yml
#   Object: WithArgs
#   Template: service_mock

from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
import asyncio

class BackendWithArgsInterfaceMock(ServiceInterface):
    """
    Mock service implementation of the WithArgs D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    """

    def __init__(self):
        super().__init__("com.yarpc.backend.withArgs")
        self.mock = AsyncMock()
        self.object_path = "/com/yarpc/backend"

        self.mock.Notify.return_value = None
        self.mock.Order.return_value = None

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)

    @signal()
    def Notified(
        self,
        message: str,
    ) -> 's':
        """
        a simple signal with one argument

        Args:
            message (str): The message
        """
        return message

    @signal()
    def OrderReceived(
        self,
        item: str,
        amount: int,
        pricePerItem: float,
    ) -> 'sud':
        """
        a simple signal with multiple arguments

        Args:
            item (str): The item
            amount (int): a amount ordered
            pricePerItem (float): the price per item
        """
        return [
            item,
            amount,
            pricePerItem,
        ]

    @method()
    async def Notify(
        self,
        message: 's',
    ) -> None:
        """
        a simple method with one argument

        Args:
            message (str): The message
        """
        return await self._await_mock_method("Notify", locals())

    @method()
    async def Order(
        self,
        item: 's',
        amount: 'u',
        pricePerItem: 'd',
    ) -> 'd':
        """
        a simple method with args and return value

        Args:
            item (str): The item
            amount (int): a amount ordered
            pricePerItem (float): the price per item
        """
        return await self._await_mock_method("Order", locals())
