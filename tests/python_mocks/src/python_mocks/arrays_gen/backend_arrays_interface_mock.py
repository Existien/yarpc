# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/04.1_arrays.yml
#   Object: Arrays
#   Template: py/service_mock.j2

from typing import Sequence, Mapping
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
from copy import deepcopy
from .struct_array import StructArray
from .simons_array import SimonsArray


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for Arrays

    Args:
        wrapper(BackendArraysInterfaceMock): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.backend.arrays")
        self.object_path = "/com/yarpc/backend"
        self._wrapper = wrapper

    @method()
    async def ArrayMethod(
        self,
        numbers: 'aau',
    ) -> 'aad':
        raw_return = await self._wrapper.ArrayMethod(
            [ [ x1 for x1 in x0 ] for x0 in numbers ],
        )
        return [ [ x1 for x1 in x0 ] for x0 in raw_return ]

    @signal()
    def ArraySignal(
        self,
        numbers: 'aad',
    ) -> 'aad':
        return numbers

    @dbus_property(access=PropertyAccess.READWRITE)
    async def ArrayProperty(self) -> 'aas':
        unmarshalled = await self._wrapper.get_ArrayProperty()
        return [ [ x1 for x1 in x0 ] for x0 in unmarshalled ]

    @ArrayProperty.setter
    async def ArrayProperty(self, value: 'aas'):
        unmarshalled = [ [ x1 for x1 in x0 ] for x0 in value ]
        await self._wrapper.set_ArrayProperty(unmarshalled)


class BackendArraysInterfaceMock():
    """
    Mock service implementation of the Arrays D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`

    Setting properties will trigger a on_<property>_changed call to the mock with
    the new value and a dictionary with the current properties as arguments. The mock is expected to return
    an updated dictionary of properties.

    Per default, the mock is configured to just return the updated value.

    Args:
        ArrayProperty (Sequence[Sequence[str]]): a simple property
    """

    def __init__(
        self,
        ArrayProperty: Sequence[Sequence[str]],
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path
        self.mock = AsyncMock()

        self.mock.ArrayMethod.return_value = None

        self._properties = {}
        self._properties["ArrayProperty"] = ArrayProperty
        self._ArrayProperty_change_handler = BackendArraysInterfaceMock._default_ArrayProperty_change_handler
        self.mock.on_ArrayProperty_changed = AsyncMock(wraps=self._ArrayProperty_change_handler)

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                for key in data.keys():
                    data[key] = marshal(data[key])
                return data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    async def ArrayMethod(
        self,
        numbers: Sequence[Sequence[int]],
    ) -> Sequence[Sequence[float]]:
        """
        a simple method with one argument

        Args:
            numbers (Sequence[Sequence[int]]): Some numbers

        Returns:
            Sequence[Sequence[float]]: normalized numbers
        """
        return await self._await_mock_method("ArrayMethod", locals())

    def ArraySignal(
        self,
        numbers: Sequence[Sequence[float]],
    ) -> None:
        """
        a simple signal with one argument

        Args:
            numbers (Sequence[Sequence[float]]): normalized numbers
        """
        self.interface.ArraySignal(
            [ [ x1 for x1 in x0 ] for x0 in numbers ],
        )

    async def get_ArrayProperty(self) -> Sequence[Sequence[str]]:
        """Getter for property ArrayProperty

        a simple property

        Returns:
            Sequence[Sequence[str]]: the current value
        """
        return self._properties["ArrayProperty"]

    def on_ArrayProperty_changed(self, handler) -> None:
        """
        Set handler for property changes due to ArrayProperty changes

        The handler takes the new ArrayProperty value and a dictionary of the current properties
        and returns a dictionary with the current property values, or just the changed ones

        Args:
            handler(Callable[[Sequence[Sequence[str]], dict], Awaitable[dict]]): the properties change handler

        Returns:
            dict: the changed properties
        """
        self._ArrayProperty_change_handler = handler
        self.mock.on_ArrayProperty_changed = AsyncMock(wraps=self._ArrayProperty_change_handler)

    async def _default_ArrayProperty_change_handler(value: Sequence[Sequence[str]], _: dict) -> dict:
        return { "ArrayProperty": value }

    async def set_ArrayProperty(self, value: Sequence[Sequence[str]]):
        """Setter for property ArrayProperty

        a simple property

        Args:
            value (Sequence[Sequence[str]]): the new value
        """
        properties_working_copy = deepcopy(self._properties)
        changed_properties = await self.mock.on_ArrayProperty_changed(value, properties_working_copy)
        properties_working_copy.update(changed_properties)
        for key in self._properties.keys():
            if key not in properties_working_copy:
                continue
            if properties_working_copy[key] == self._properties[key]:
                del properties_working_copy[key]
            else:
                self._properties[key] = properties_working_copy[key]

            self.emit_properties_changed(properties_working_copy)
