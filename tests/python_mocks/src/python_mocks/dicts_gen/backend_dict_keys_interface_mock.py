# Generated by YARPC
# Version:  0.1.0+editable
# Spec:
#   File: /workspace/tests/specs/05.4_dictionaries_keys.yml
#   Object: DictKeys
#   Template: py/service_mock.j2

from typing import List, Dict
from dbus_next.service import (
    ServiceInterface, method, dbus_property, signal
)
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError
from unittest.mock import AsyncMock
from copy import deepcopy
from enum import Enum
from .struct_dict import StructDict
from .simons_dict import SimonsDict


class _Interface(ServiceInterface):
    """
    D-Bus interface implementation for DictKeys

    Args:
        wrapper(BackendDictKeysInterfaceMock): Wrapper responsible for (un-)marhsalling D-Bus types
    """

    def __init__(self, wrapper):
        super().__init__("com.yarpc.backend.dictKeys")
        self.object_path = "/com/yarpc/backend"
        self._wrapper = wrapper

    @signal()
    def Uint8Signal(
        self,
        value: 'a{ys}',
    ) -> 'a{ys}':
        return value

    @signal()
    def BoolSignal(
        self,
        value: 'a{bs}',
    ) -> 'a{bs}':
        return value

    @signal()
    def Int16Signal(
        self,
        value: 'a{ns}',
    ) -> 'a{ns}':
        return value

    @signal()
    def Uint16Signal(
        self,
        value: 'a{qs}',
    ) -> 'a{qs}':
        return value

    @signal()
    def Int32Signal(
        self,
        value: 'a{is}',
    ) -> 'a{is}':
        return value

    @signal()
    def Uint32Signal(
        self,
        value: 'a{us}',
    ) -> 'a{us}':
        return value

    @signal()
    def Int64Signal(
        self,
        value: 'a{xs}',
    ) -> 'a{xs}':
        return value

    @signal()
    def Uint64Signal(
        self,
        value: 'a{ts}',
    ) -> 'a{ts}':
        return value

    @signal()
    def DoubleSignal(
        self,
        value: 'a{ds}',
    ) -> 'a{ds}':
        return value

    @signal()
    def StringSignal(
        self,
        value: 'a{ss}',
    ) -> 'a{ss}':
        return value

    @method()
    async def Uint8Method(
        self,
        value: 'a{ys}',
    ) -> 'a{ys}':
        raw_return = await self._wrapper.Uint8Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def BoolMethod(
        self,
        value: 'a{bs}',
    ) -> 'a{bs}':
        raw_return = await self._wrapper.BoolMethod(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Int16Method(
        self,
        value: 'a{ns}',
    ) -> 'a{ns}':
        raw_return = await self._wrapper.Int16Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Uint16Method(
        self,
        value: 'a{qs}',
    ) -> 'a{qs}':
        raw_return = await self._wrapper.Uint16Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Int32Method(
        self,
        value: 'a{is}',
    ) -> 'a{is}':
        raw_return = await self._wrapper.Int32Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Uint32Method(
        self,
        value: 'a{us}',
    ) -> 'a{us}':
        raw_return = await self._wrapper.Uint32Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Int64Method(
        self,
        value: 'a{xs}',
    ) -> 'a{xs}':
        raw_return = await self._wrapper.Int64Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def Uint64Method(
        self,
        value: 'a{ts}',
    ) -> 'a{ts}':
        raw_return = await self._wrapper.Uint64Method(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def DoubleMethod(
        self,
        value: 'a{ds}',
    ) -> 'a{ds}':
        raw_return = await self._wrapper.DoubleMethod(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }

    @method()
    async def StringMethod(
        self,
        value: 'a{ss}',
    ) -> 'a{ss}':
        raw_return = await self._wrapper.StringMethod(
            { k0: v0 for k0, v0 in value.items() },
        )
        return { k0: v0 for k0, v0 in raw_return.items() }


class BackendDictKeysInterfaceMock():
    """
    Mock service implementation of the DictKeys D-Bus interface.

    The AsyncMock instance can be accessed via the `mock` attribute.
    All method calls will be forwarded to the mock using keyword arguments.
    E.g.
    `await service.Foo('bar')`
    might result in the following await of the mock:
    `await service.mock.Foo(msg='bar')`
    """

    def __init__(
        self,
    ):
        self.interface = _Interface(self)
        self.name = self.interface.name
        self.object_path = self.interface.object_path
        self.mock = AsyncMock()

        self.mock.Uint8Method.return_value = None
        self.mock.BoolMethod.return_value = None
        self.mock.Int16Method.return_value = None
        self.mock.Uint16Method.return_value = None
        self.mock.Int32Method.return_value = None
        self.mock.Uint32Method.return_value = None
        self.mock.Int64Method.return_value = None
        self.mock.Uint64Method.return_value = None
        self.mock.DoubleMethod.return_value = None
        self.mock.StringMethod.return_value = None

        self._properties = {}

    async def _await_mock_method(self, method, local_variables):
        kwargs = dict(filter(lambda kv: kv[0] != 'self', local_variables.items()))
        return await getattr(self.mock, method)(**kwargs)

    def emit_properties_changed(self, changed_properties: dict) -> None:
        """Informs clients about changed properties

        Args:
            changed_properties (dict): A dictionary containing all changed properties with their new values
        """
        if not changed_properties: return

        def marshal(data):
            if isinstance(data, dict):
                new_data = {}
                for key in data.keys():
                    new_data[key.value if isinstance(key, Enum) else key] = marshal(data[key])
                return new_data
            elif isinstance(data, list):
                for i in range(0, len(data)):
                    data[i] = marshal(data[i])
                return data
            elif isinstance(data, Enum):
                return data.value
            elif hasattr(data, 'to_dbus'):
                return data.to_dbus()
            else:
                return data
        marshalled = marshal(deepcopy(changed_properties))
        self.interface.emit_properties_changed(marshalled)

    def Uint8Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Uint8Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def BoolSignal(
        self,
        value: Dict[bool, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[bool, str]): the value
        """
        self.interface.BoolSignal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Int16Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Int16Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Uint16Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Uint16Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Int32Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Int32Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Uint32Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Uint32Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Int64Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Int64Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def Uint64Signal(
        self,
        value: Dict[int, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[int, str]): the value
        """
        self.interface.Uint64Signal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def DoubleSignal(
        self,
        value: Dict[float, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[float, str]): the value
        """
        self.interface.DoubleSignal(
            { k0: v0 for k0, v0 in value.items() },
        )

    def StringSignal(
        self,
        value: Dict[str, str],
    ) -> None:
        """
        a signal

        Args:
            value (Dict[str, str]): the value
        """
        self.interface.StringSignal(
            { k0: v0 for k0, v0 in value.items() },
        )

    async def Uint8Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Uint8Method", locals())

    async def BoolMethod(
        self,
        value: Dict[bool, str],
    ) -> Dict[bool, str]:
        """
        a method

        Args:
            value (Dict[bool, str]): the value

        Returns:
            Dict[bool, str]: the return type
        """
        return await self._await_mock_method("BoolMethod", locals())

    async def Int16Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Int16Method", locals())

    async def Uint16Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Uint16Method", locals())

    async def Int32Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Int32Method", locals())

    async def Uint32Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Uint32Method", locals())

    async def Int64Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Int64Method", locals())

    async def Uint64Method(
        self,
        value: Dict[int, str],
    ) -> Dict[int, str]:
        """
        a method

        Args:
            value (Dict[int, str]): the value

        Returns:
            Dict[int, str]: the return type
        """
        return await self._await_mock_method("Uint64Method", locals())

    async def DoubleMethod(
        self,
        value: Dict[float, str],
    ) -> Dict[float, str]:
        """
        a method

        Args:
            value (Dict[float, str]): the value

        Returns:
            Dict[float, str]: the return type
        """
        return await self._await_mock_method("DoubleMethod", locals())

    async def StringMethod(
        self,
        value: Dict[str, str],
    ) -> Dict[str, str]:
        """
        a method

        Args:
            value (Dict[str, str]): the value

        Returns:
            Dict[str, str]: the return type
        """
        return await self._await_mock_method("StringMethod", locals())
